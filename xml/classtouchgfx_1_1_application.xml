<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classtouchgfx_1_1_application" kind="class" language="C++" prot="public">
    <compoundname>touchgfx::Application</compoundname>
    <basecompoundref refid="classtouchgfx_1_1_u_i_event_listener" prot="public" virt="non-virtual">UIEventListener</basecompoundref>
    <derivedcompoundref refid="classtouchgfx_1_1_m_v_p_application" prot="public" virt="non-virtual">MVPApplication</derivedcompoundref>
    <includes local="no">Application.hpp</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a926cf3d3225b8281bfbc58e8b9b8c5e9" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t MAX_TIMER_WIDGETS</definition>
        <argsstring></argsstring>
        <name>MAX_TIMER_WIDGETS</name>
        <initializer>= 32</initializer>
        <briefdescription>
<para>Maximum number of widgets receiving ticks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Memory impact: x * (sizeof(Drawable*)+1) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="196" column="1" bodyfile="touchgfx/Application.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a160d7a6f71ed82ae7bd81307c0cb5149" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t TICK_INTERVAL_MS</definition>
        <argsstring></argsstring>
        <name>TICK_INTERVAL_MS</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>Deprecated, do not use this constant. Tick interval depends on VSYNC of your target platform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="197" column="1" bodyfile="touchgfx/Application.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a445362194264a9d0f9e6372b01a8475d" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref>, 8 &gt;</type>
        <definition>Vector&lt;Rect, 8&gt; cachedDirtyAreas</definition>
        <argsstring></argsstring>
        <name>cachedDirtyAreas</name>
        <briefdescription>
<para>When draw caching is enabled, these rects keeps track of the dirty screen area. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="263" column="1" bodyfile="touchgfx/Application.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a03eb86d53f7f6ad2ee9b27450e241b94" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool drawCacheEnabled</definition>
        <argsstring></argsstring>
        <name>drawCacheEnabled</name>
        <briefdescription>
<para>True when draw caching is active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="265" column="1" bodyfile="touchgfx/Application.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1aa55958152b521f20cef2201be9a76210" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref>, 8 &gt;</type>
        <definition>Vector&lt;Rect, 8&gt; lastRects</definition>
        <argsstring></argsstring>
        <name>lastRects</name>
        <briefdescription>
<para>The dirty areas from last frame that needs to be redrawn because we have swapped framebuffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="264" column="1" bodyfile="touchgfx/Application.hpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a58df65ecc1828b6d3e3c377fcb8eec63" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t timerWidgetCounter[MAX_TIMER_WIDGETS]</definition>
        <argsstring>[MAX_TIMER_WIDGETS]</argsstring>
        <name>timerWidgetCounter</name>
        <briefdescription>
<para>A counter for each potentially registered timer widget. Increase when registering for timer events, decrease when unregistering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="262" column="1" bodyfile="touchgfx/Application.hpp" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a91d1e6695916070caef464c2abc181d7" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> *, <ref refid="classtouchgfx_1_1_application_1a926cf3d3225b8281bfbc58e8b9b8c5e9" kindref="member">MAX_TIMER_WIDGETS</ref> &gt;</type>
        <definition>Vector&lt;Drawable*, MAX_TIMER_WIDGETS&gt; timerWidgets</definition>
        <argsstring></argsstring>
        <name>timerWidgets</name>
        <briefdescription>
<para>List of widgets that receive timer ticks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="261" column="1" bodyfile="touchgfx/Application.hpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1adf387ac2f1760791c05f2dc901d8698c" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool transitionHandled</definition>
        <argsstring></argsstring>
        <name>transitionHandled</name>
        <briefdescription>
<para>True if the transition is done and <ref refid="classtouchgfx_1_1_screen_1a308eab3a01440c35ab204cbb6f6a5fe7" kindref="member">Screen::afterTransition</ref> has been called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="266" column="1" bodyfile="touchgfx/Application.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a3c1174b2fd0e814eee2679a2413c1e10" prot="protected" static="yes" mutable="no">
        <type><ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> *</type>
        <definition>Screen* currentScreen</definition>
        <argsstring></argsstring>
        <name>currentScreen</name>
        <briefdescription>
<para>Pointer to currently displayed <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="267" column="1" bodyfile="touchgfx/Application.hpp" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1ac8903a2dfccee4458956ba56bcea104a" prot="protected" static="yes" mutable="no">
        <type><ref refid="classtouchgfx_1_1_transition" kindref="compound">Transition</ref> *</type>
        <definition>Transition* currentTransition</definition>
        <argsstring></argsstring>
        <name>currentTransition</name>
        <briefdescription>
<para>Pointer to current transition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="268" column="1" bodyfile="touchgfx/Application.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a21e8d69d8d26f0866343e517afde2c07" prot="protected" static="yes" mutable="no">
        <type><ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> *</type>
        <definition>DebugPrinter* debugPrinter</definition>
        <argsstring></argsstring>
        <name>debugPrinter</name>
        <briefdescription>
<para>Pointer to the <ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="270" column="1" bodyfile="touchgfx/Application.hpp" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a3e8bd0532349a78d04c0273d2219f2cb" prot="protected" static="yes" mutable="no">
        <type><ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref></type>
        <definition>Rect debugRegionInvalidRect</definition>
        <argsstring></argsstring>
        <name>debugRegionInvalidRect</name>
        <briefdescription>
<para>Invalidated Debug Region. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="271" column="1" bodyfile="touchgfx/Application.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_application_1a04a0d41fa8c25bfad4f06563b287b464" prot="protected" static="yes" mutable="no">
        <type><ref refid="classtouchgfx_1_1_application" kindref="compound">Application</ref> *</type>
        <definition>Application* instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <briefdescription>
<para>Pointer to the instance of the Application-derived subclass. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Must be set by subclass constructor! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="269" column="1" bodyfile="touchgfx/Application.hpp" bodystart="269" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtouchgfx_1_1_application_1aa3890a41838bb30cb92b58b3dc5acd0e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> *</type>
        <definition>static DebugPrinter* getDebugPrinter</definition>
        <argsstring>()</argsstring>
        <name>getDebugPrinter</name>
        <briefdescription>
<para>Returns the <ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> object associated with the application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> The <ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="216" column="1" bodyfile="touchgfx/Application.hpp" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1aa98b8f5621b53c808429f5dde0662921" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_application" kindref="compound">Application</ref> *</type>
        <definition>static Application* getInstance</definition>
        <argsstring>()</argsstring>
        <name>getInstance</name>
        <briefdescription>
<para>Gets the single instance application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The instance of this application. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a294ee096b1f2b53b2e75a01d1353be8d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void invalidateDebugRegion</definition>
        <argsstring>()</argsstring>
        <name>invalidateDebugRegion</name>
        <briefdescription>
<para>Sets the debug string to be displayed onscreen. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the debug string to be displayed onscreen on top of the framebuffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="226" column="1" bodyfile="touchgfx/Application.hpp" bodystart="226" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a53586157421c5a442ed0dcf1af8fe1a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void setDebugPrinter</definition>
        <argsstring>(DebugPrinter *printer)</argsstring>
        <name>setDebugPrinter</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> *</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
<para>Sets the <ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> object to be used by the application. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classtouchgfx_1_1_debug_printer" kindref="compound">DebugPrinter</ref> object to be used by the application to print debug messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">printer</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug printer to configure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="206" column="1" bodyfile="touchgfx/Application.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1afc7d422637f039b2bd76276d57d3925b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void setDebugString</definition>
        <argsstring>(const char *string)</argsstring>
        <name>setDebugString</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Sets the debug string to be displayed onscreen. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the debug string to be displayed onscreen on top of the framebuffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">string</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug string to display onscreen. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="241" column="1" bodyfile="touchgfx/Application.hpp" bodystart="241" bodyend="248"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtouchgfx_1_1_application_1ab3ba9ea6a545ab622b6ebdeba6c5aa3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void appSwitchScreen</definition>
        <argsstring>(uint8_t screenId)</argsstring>
        <name>appSwitchScreen</name>
        <param>
          <type>uint8_t</type>
          <declname>screenId</declname>
        </param>
        <briefdescription>
<para>An application specific function for switching screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Overloading this can provide a means to switch screen from places that does not have access to a pointer to the new screen. Base implementation is empty.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>screenId</parametername>
</parameternamelist>
<parameterdescription>
<para>An id that maps to the desired screen. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="65" column="1" bodyfile="touchgfx/Application.hpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a87b977acf74b1266372429242bc469c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void cacheDrawOperations</definition>
        <argsstring>(bool enableCache)</argsstring>
        <name>cacheDrawOperations</name>
        <param>
          <type>bool</type>
          <declname>enableCache</declname>
        </param>
        <briefdescription>
<para>This functions allows for deferring draw operations to a later time. </para>
        </briefdescription>
        <detaileddescription>
<para>If active, calls to draw will simply note that the specified area is dirty, but not perform any actual drawing. When disabling the draw cache, the dirty area will be flushed (drawn) immediately.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enableCache</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, all future draw operations will be cached. If false draw caching is disabled, and the current cache (if not empty) is drawn immediately. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1aa39b86d75ac96268a9bac4b165990669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clearAllTimerWidgets</definition>
        <argsstring>()</argsstring>
        <name>clearAllTimerWidgets</name>
        <briefdescription>
<para>Clears all currently registered timer widgets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1abc45d04e5f5ce1fbd68f920fcdb2d0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void draw</definition>
        <argsstring>()</argsstring>
        <name>draw</name>
        <briefdescription>
<para>Initiate a draw operation of the entire screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Standard implementation is to delegate draw request to the current <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref>.</para>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classtouchgfx_1_1_application_1a65fd8d8e7e3f7bbca6ad03b5347564d9" kindref="member">draw(Rect&amp;)</ref> </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a65fd8d8e7e3f7bbca6ad03b5347564d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void draw</definition>
        <argsstring>(Rect &amp;rect)</argsstring>
        <name>draw</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Initiate a draw operation of the specified region of the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Standard implementation is to delegate draw request to the current <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area to draw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Unlike <ref refid="classtouchgfx_1_1_drawable_1a7e4c58d8817f4119459b70ec52c38ef4" kindref="member">Widget::draw</ref> this is safe to call from user code as it will properly traverse widgets in z-order. </para>
</simplesect>
<simplesect kind="note"><para>The coordinates given must be absolute coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1aeb2b80f5169106df5543ff8f3518c67d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> *</type>
        <definition>Screen* getCurrentScreen</definition>
        <argsstring>()</argsstring>
        <name>getCurrentScreen</name>
        <briefdescription>
<para>Gets the current screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current screen. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="45" column="1" bodyfile="touchgfx/Application.hpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a376ee2a979c55a90ca5f071aa22f3a9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t getNumberOfRegisteredTimerWidgets</definition>
        <argsstring>() const</argsstring>
        <name>getNumberOfRegisteredTimerWidgets</name>
        <briefdescription>
<para>gets the number of timer widgets that has been registered. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of timerWidgets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a19a08388b6296ea1045e9718918e65cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t getTimerWidgetCountForDrawable</definition>
        <argsstring>(const Drawable *w) const</argsstring>
        <name>getTimerWidgetCountForDrawable</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Gets the number of timer events registered to a widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets the number of timer events registered to a widget, i.e. how many times a drawable must be unregistered until it no longer receives timer ticks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The widget to to get count from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the drawable is not registered as a timer widget, otherwise returns how many times the drawable is currently registered. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a7f1524b90bc90e5f6cf7ee47aae12123" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleClickEvent</definition>
        <argsstring>(const ClickEvent &amp;evt)</argsstring>
        <name>handleClickEvent</name>
        <reimplements refid="classtouchgfx_1_1_u_i_event_listener_1a046dadb316d2687b1ce6b7ec081116ee">handleClickEvent</reimplements>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_click_event" kindref="compound">ClickEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
<para>Handle a click event. </para>
        </briefdescription>
        <detaileddescription>
<para>Standard implementation is to delegate the event to the current screen. Called by the framework when a click is detected by some platform specific means.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtouchgfx_1_1_click_event" kindref="compound">ClickEvent</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a06ae1946b2124cc94e26cfe18728debf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleDragEvent</definition>
        <argsstring>(const DragEvent &amp;evt)</argsstring>
        <name>handleDragEvent</name>
        <reimplements refid="classtouchgfx_1_1_u_i_event_listener_1ada662e4d76cd97bfd582579fbb88f90f">handleDragEvent</reimplements>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_drag_event" kindref="compound">DragEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
<para>Handle drag events. </para>
        </briefdescription>
        <detaileddescription>
<para>Called by the framework when a drag is detected by some platform specific means. Standard implementation is to delegate drag event to current screen.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>The drag event, expressed in absolute coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a4db4945ecbc2303bf860e082409b8029" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleGestureEvent</definition>
        <argsstring>(const GestureEvent &amp;evt)</argsstring>
        <name>handleGestureEvent</name>
        <reimplements refid="classtouchgfx_1_1_u_i_event_listener_1a5d6483291e6a4aa5283750bf9ef1fc20">handleGestureEvent</reimplements>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_gesture_event" kindref="compound">GestureEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
<para>Handle gestures. </para>
        </briefdescription>
        <detaileddescription>
<para>Called by the framework when a gesture is detected by some platform specific means. Standard implementation is to delegate drag event to current screen.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>The gesture event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a73066ed0ba854ea765ef3abac92ff615" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleKeyEvent</definition>
        <argsstring>(uint8_t c)</argsstring>
        <name>handleKeyEvent</name>
        <reimplements refid="classtouchgfx_1_1_u_i_event_listener_1a73066ed0ba854ea765ef3abac92ff615">handleKeyEvent</reimplements>
        <param>
          <type>uint8_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Handle an incoming character received by the <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Standard implementation delegates to current screen (which, in turn, does nothing).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The incomming character to handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1af54ae20b14a651b98e1980b39fb4fd39" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handlePendingScreenTransition</definition>
        <argsstring>()</argsstring>
        <name>handlePendingScreenTransition</name>
        <reimplements refid="classtouchgfx_1_1_u_i_event_listener_1af54ae20b14a651b98e1980b39fb4fd39">handlePendingScreenTransition</reimplements>
        <reimplementedby refid="classtouchgfx_1_1_m_v_p_application_1af54ae20b14a651b98e1980b39fb4fd39">handlePendingScreenTransition</reimplementedby>
        <briefdescription>
<para>Evaluates the pending <ref refid="structtouchgfx_1_1_callback" kindref="compound">Callback</ref> instances. </para>
        </briefdescription>
        <detaileddescription>
<para>If a callback is valid, it is executed and a <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> transition is executed. This base implementation is empty and does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a1af635cee0f186c3d0fcea60bac14355" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleTickEvent</definition>
        <argsstring>()</argsstring>
        <name>handleTickEvent</name>
        <reimplements refid="classtouchgfx_1_1_u_i_event_listener_1a1af635cee0f186c3d0fcea60bac14355">handleTickEvent</reimplements>
        <briefdescription>
<para>Handle tick. </para>
        </briefdescription>
        <detaileddescription>
<para>Standard implementation is to delegate tick to the widgets that have registered to receive one. Called by some platform specific means. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a5c54374756338ccf158b197f64470345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void registerTimerWidget</definition>
        <argsstring>(Drawable *w)</argsstring>
        <name>registerTimerWidget</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Adds a widget to the list of widgets receiving ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a widget to the list of widgets receiving ticks every frame (typically 16.67ms)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">w</parametername>
</parameternamelist>
<parameterdescription>
<para>The widget to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_application_1a67a336123386c822f49194c77446e77b" kindref="member">unregisterTimerWidget</ref></para>
</simplesect>
<simplesect kind="note"><para>The framework keeps track of the number of times a specific widget is registered. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a5d470cf8b4d40671ec384d7ab7ff34ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void switchScreen</definition>
        <argsstring>(Screen *newScreen)</argsstring>
        <name>switchScreen</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> *</type>
          <declname>newScreen</declname>
        </param>
        <briefdescription>
<para>Switch to another <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Will call tearDownScreen on current <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> before switching, and subsequently call setupScreen and draw automatically for the new <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">newScreen</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the new screen. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a67a336123386c822f49194c77446e77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unregisterTimerWidget</definition>
        <argsstring>(const Drawable *w)</argsstring>
        <name>unregisterTimerWidget</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Removes a widget from the list of widgets receiving ticks. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a widget from the list of widgets receiving ticks every frame (typically 16.67ms) milliseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">w</parametername>
</parameternamelist>
<parameterdescription>
<para>The widget to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If widget has been registered multiple times, an equal number of calls to unregister are required to stop widget from receiving tick events. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="174" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtouchgfx_1_1_application_1aec7d6461aa7be31d98eff24b9d69ae3d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Application</definition>
        <argsstring>()</argsstring>
        <name>Application</name>
        <briefdescription>
<para>Protected constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_application_1a78985d7e177bbf52ea33baf9b15f33e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void invalidateArea</definition>
        <argsstring>(Rect area)</argsstring>
        <name>invalidateArea</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>area</declname>
        </param>
        <briefdescription>
<para>Invalidates this area. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para>The area to invalidate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Application.hpp" line="256" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classtouchgfx_1_1_application" kindref="compound">Application</ref> class is the main interface for manipulating screen contents. </para>
    </briefdescription>
    <detaileddescription>
<para>It holds a pointer to the currently displayed <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref>, and delegates draw requests and events to that <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref>. Additionally it contains some global application settings.</para>
<para>A user-defined application subclass can be defined to override standard functionality.</para>
<para><simplesect kind="see"><para><ref refid="classtouchgfx_1_1_u_i_event_listener" kindref="compound">UIEventListener</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="231">
        <label>MVPApplication</label>
        <link refid="classtouchgfx_1_1_m_v_p_application"/>
        <childnode refid="229" relation="public-inheritance">
        </childnode>
      </node>
      <node id="230">
        <label>UIEventListener</label>
        <link refid="classtouchgfx_1_1_u_i_event_listener"/>
      </node>
      <node id="229">
        <label>Application</label>
        <link refid="classtouchgfx_1_1_application"/>
        <childnode refid="230" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="238">
        <label>Vector&lt; touchgfx::Drawable *, MAX_TIMER_WIDGETS &gt;</label>
        <link refid="classtouchgfx_1_1_vector"/>
      </node>
      <node id="239">
        <label>Transition</label>
        <link refid="classtouchgfx_1_1_transition"/>
        <childnode refid="240" relation="usage">
          <edgelabel>screenContainer</edgelabel>
        </childnode>
      </node>
      <node id="240">
        <label>Container</label>
        <link refid="classtouchgfx_1_1_container"/>
        <childnode refid="241" relation="public-inheritance">
        </childnode>
        <childnode refid="241" relation="usage">
          <edgelabel>firstChild</edgelabel>
        </childnode>
      </node>
      <node id="234">
        <label>Rect</label>
        <link refid="classtouchgfx_1_1_rect"/>
      </node>
      <node id="233">
        <label>UIEventListener</label>
        <link refid="classtouchgfx_1_1_u_i_event_listener"/>
      </node>
      <node id="241">
        <label>Drawable</label>
        <link refid="classtouchgfx_1_1_drawable"/>
        <childnode refid="234" relation="usage">
          <edgelabel>rect</edgelabel>
        </childnode>
        <childnode refid="241" relation="usage">
          <edgelabel>nextSibling</edgelabel>
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="232">
        <label>Application</label>
        <link refid="classtouchgfx_1_1_application"/>
        <childnode refid="233" relation="public-inheritance">
        </childnode>
        <childnode refid="234" relation="usage">
          <edgelabel>debugRegionInvalidRect</edgelabel>
        </childnode>
        <childnode refid="235" relation="usage">
          <edgelabel>cachedDirtyAreas</edgelabel>
          <edgelabel>lastRects</edgelabel>
        </childnode>
        <childnode refid="236" relation="usage">
          <edgelabel>debugPrinter</edgelabel>
        </childnode>
        <childnode refid="238" relation="usage">
          <edgelabel>timerWidgets</edgelabel>
        </childnode>
        <childnode refid="232" relation="usage">
          <edgelabel>instance</edgelabel>
        </childnode>
        <childnode refid="239" relation="usage">
          <edgelabel>currentTransition</edgelabel>
        </childnode>
        <childnode refid="242" relation="usage">
          <edgelabel>currentScreen</edgelabel>
        </childnode>
      </node>
      <node id="235">
        <label>Vector&lt; touchgfx::Rect, 8 &gt;</label>
        <link refid="classtouchgfx_1_1_vector"/>
      </node>
      <node id="242">
        <label>Screen</label>
        <link refid="classtouchgfx_1_1_screen"/>
        <childnode refid="241" relation="usage">
          <edgelabel>focus</edgelabel>
        </childnode>
        <childnode refid="240" relation="usage">
          <edgelabel>container</edgelabel>
        </childnode>
      </node>
      <node id="236">
        <label>DebugPrinter</label>
        <link refid="classtouchgfx_1_1_debug_printer"/>
        <childnode refid="234" relation="usage">
          <edgelabel>debugRegion</edgelabel>
        </childnode>
        <childnode refid="237" relation="usage">
          <edgelabel>debugForegroundColor</edgelabel>
        </childnode>
      </node>
      <node id="237">
        <label>colortype</label>
        <link refid="structtouchgfx_1_1colortype"/>
      </node>
    </collaborationgraph>
    <location file="touchgfx/Application.hpp" line="31" column="1" bodyfile="touchgfx/Application.hpp" bodystart="30" bodyend="272"/>
    <listofallmembers>
      <member refid="classtouchgfx_1_1_application_1aec7d6461aa7be31d98eff24b9d69ae3d" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>Application</name></member>
      <member refid="classtouchgfx_1_1_application_1ab3ba9ea6a545ab622b6ebdeba6c5aa3a" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>appSwitchScreen</name></member>
      <member refid="classtouchgfx_1_1_application_1a445362194264a9d0f9e6372b01a8475d" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>cachedDirtyAreas</name></member>
      <member refid="classtouchgfx_1_1_application_1a87b977acf74b1266372429242bc469c9" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>cacheDrawOperations</name></member>
      <member refid="classtouchgfx_1_1_application_1aa39b86d75ac96268a9bac4b165990669" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>clearAllTimerWidgets</name></member>
      <member refid="classtouchgfx_1_1_application_1a3c1174b2fd0e814eee2679a2413c1e10" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>currentScreen</name></member>
      <member refid="classtouchgfx_1_1_application_1ac8903a2dfccee4458956ba56bcea104a" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>currentTransition</name></member>
      <member refid="classtouchgfx_1_1_application_1a21e8d69d8d26f0866343e517afde2c07" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>debugPrinter</name></member>
      <member refid="classtouchgfx_1_1_application_1a3e8bd0532349a78d04c0273d2219f2cb" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>debugRegionInvalidRect</name></member>
      <member refid="classtouchgfx_1_1_application_1abc45d04e5f5ce1fbd68f920fcdb2d0e0" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>draw</name></member>
      <member refid="classtouchgfx_1_1_application_1a65fd8d8e7e3f7bbca6ad03b5347564d9" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>draw</name></member>
      <member refid="classtouchgfx_1_1_application_1a03eb86d53f7f6ad2ee9b27450e241b94" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>drawCacheEnabled</name></member>
      <member refid="classtouchgfx_1_1_application_1aeb2b80f5169106df5543ff8f3518c67d" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>getCurrentScreen</name></member>
      <member refid="classtouchgfx_1_1_application_1aa3890a41838bb30cb92b58b3dc5acd0e" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>getDebugPrinter</name></member>
      <member refid="classtouchgfx_1_1_application_1aa98b8f5621b53c808429f5dde0662921" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>getInstance</name></member>
      <member refid="classtouchgfx_1_1_application_1a376ee2a979c55a90ca5f071aa22f3a9a" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>getNumberOfRegisteredTimerWidgets</name></member>
      <member refid="classtouchgfx_1_1_application_1a19a08388b6296ea1045e9718918e65cc" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>getTimerWidgetCountForDrawable</name></member>
      <member refid="classtouchgfx_1_1_application_1a7f1524b90bc90e5f6cf7ee47aae12123" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>handleClickEvent</name></member>
      <member refid="classtouchgfx_1_1_application_1a06ae1946b2124cc94e26cfe18728debf" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>handleDragEvent</name></member>
      <member refid="classtouchgfx_1_1_application_1a4db4945ecbc2303bf860e082409b8029" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>handleGestureEvent</name></member>
      <member refid="classtouchgfx_1_1_application_1a73066ed0ba854ea765ef3abac92ff615" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>handleKeyEvent</name></member>
      <member refid="classtouchgfx_1_1_application_1af54ae20b14a651b98e1980b39fb4fd39" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>handlePendingScreenTransition</name></member>
      <member refid="classtouchgfx_1_1_application_1a1af635cee0f186c3d0fcea60bac14355" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>handleTickEvent</name></member>
      <member refid="classtouchgfx_1_1_application_1a04a0d41fa8c25bfad4f06563b287b464" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>instance</name></member>
      <member refid="classtouchgfx_1_1_application_1a78985d7e177bbf52ea33baf9b15f33e4" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>invalidateArea</name></member>
      <member refid="classtouchgfx_1_1_application_1a294ee096b1f2b53b2e75a01d1353be8d" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>invalidateDebugRegion</name></member>
      <member refid="classtouchgfx_1_1_application_1aa55958152b521f20cef2201be9a76210" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>lastRects</name></member>
      <member refid="classtouchgfx_1_1_application_1a926cf3d3225b8281bfbc58e8b9b8c5e9" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>MAX_TIMER_WIDGETS</name></member>
      <member refid="classtouchgfx_1_1_application_1a5c54374756338ccf158b197f64470345" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>registerTimerWidget</name></member>
      <member refid="classtouchgfx_1_1_application_1a53586157421c5a442ed0dcf1af8fe1a7" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>setDebugPrinter</name></member>
      <member refid="classtouchgfx_1_1_application_1afc7d422637f039b2bd76276d57d3925b" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>setDebugString</name></member>
      <member refid="classtouchgfx_1_1_application_1a5d470cf8b4d40671ec384d7ab7ff34ad" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>switchScreen</name></member>
      <member refid="classtouchgfx_1_1_application_1a160d7a6f71ed82ae7bd81307c0cb5149" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>TICK_INTERVAL_MS</name></member>
      <member refid="classtouchgfx_1_1_application_1a58df65ecc1828b6d3e3c377fcb8eec63" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>timerWidgetCounter</name></member>
      <member refid="classtouchgfx_1_1_application_1a91d1e6695916070caef464c2abc181d7" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>timerWidgets</name></member>
      <member refid="classtouchgfx_1_1_application_1adf387ac2f1760791c05f2dc901d8698c" prot="protected" virt="non-virtual"><scope>touchgfx::Application</scope><name>transitionHandled</name></member>
      <member refid="classtouchgfx_1_1_application_1a67a336123386c822f49194c77446e77b" prot="public" virt="non-virtual"><scope>touchgfx::Application</scope><name>unregisterTimerWidget</name></member>
      <member refid="classtouchgfx_1_1_u_i_event_listener_1a3565666b0e1e01fc33464b4852acce16" prot="public" virt="virtual"><scope>touchgfx::Application</scope><name>~UIEventListener</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
