<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classtouchgfx_1_1_unicode" kind="class" language="C++" prot="public">
    <compoundname>touchgfx::Unicode</compoundname>
    <includes local="no">Unicode.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t UnicodeChar</definition>
        <argsstring></argsstring>
        <name>UnicodeChar</name>
        <briefdescription>
<para>Use the UnicodeChar typename when referring to characters in a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="22" column="1" bodyfile="touchgfx/Unicode.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a5802add1404921c21fcb6fb3985a4062" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int atoi</definition>
        <argsstring>(const UnicodeChar *s)</argsstring>
        <name>atoi</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>String to integer conversion. </para>
        </briefdescription>
        <detaileddescription>
<para>Starts conversion at the start of the string. Running digits from here are converted. Only radix 10 supported.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Radix 10, null-terminated <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> string to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The converted integer value of the string, 0 if the string does not start with a digit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a28604375f310ab2fb191115d427c8d52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t fromUTF8</definition>
        <argsstring>(const uint8_t *utf8, UnicodeChar *dst, uint16_t maxchars)</argsstring>
        <name>fromUTF8</name>
        <param>
          <type>const uint8_t *</type>
          <declname>utf8</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxchars</declname>
        </param>
        <briefdescription>
<para>Convert a string from UTF8 to <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The conversion stops if there is no more room in the destination or if the terminating zero character has been converted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utf8</parametername>
</parameternamelist>
<parameterdescription>
<para>The UTF8 string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer for the converted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxchars</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of chars that the dst array can hold.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters successfully converted from UTF8 to <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> including the terminating zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a0081e3edf8ae83ab4256ec33aeb3c633" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void itoa</definition>
        <argsstring>(int32_t value, UnicodeChar *buffer, uint16_t bufferSize, int radix)</argsstring>
        <name>itoa</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <briefdescription>
<para>Integer to ASCII conversion. </para>
        </briefdescription>
        <detaileddescription>
<para>Supports radix 2 to radix 16.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>to place result in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer (number of 16-bit values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>to use (8 for octal, 10 for decimal, 16 for hex) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* snprintf</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const UnicodeChar *format,...)</argsstring>
        <name>snprintf</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Formats a string and adds null termination. </para>
        </briefdescription>
        <detaileddescription>
<para>The string is formatted like when the standard printf is used.</para>
<para>Support formats: %c (element type: char), %s (element type: null-terminated UnicodeChar list), %u, %i, %d, %o, %x (all these are integers formatted in radix 10, 10, 10, 8, 16 respectively).</para>
<para>The number formats (%u, %i, %d, %o and %x) all support %[0][length]X to specify the size of the generated field (length) and whether the number should be prefixed with zeros (or blanks).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to insert in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">snprintfFloat</ref>, <ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">snprintfFloats</ref></para>
</simplesect>
<simplesect kind="note"><para>%f is not supported by this function because floats are converted to doubles when given as parameters in a variable argument list (va_list). Use snprintfFloat or snprintfFloats instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a9686301c4453079e24c685580660c0a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* snprintf</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const char *format,...)</argsstring>
        <name>snprintf</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Formats a string and adds null termination. </para>
        </briefdescription>
        <detaileddescription>
<para>The string is formatted like when the standard printf is used.</para>
<para>Support formats: %c (element type: char), %s (element type: null-terminated UnicodeChar list), %u, %i, %d, %o, %x (all these are integers formatted in radix 10, 10, 10, 8, 16 respectively).</para>
<para>The number formats (%u, %i, %d, %o and %x) all support <verbatim>\%[flags][width][.precision]X
</verbatim></para>
<para>Where flags can be:<itemizedlist>
<listitem><para>&apos;-&apos;: left justify the field (see width).</para>
</listitem><listitem><para>&apos;+&apos;: force sign.</para>
</listitem><listitem><para>&apos; &apos;: insert space if value is positive.</para>
</listitem><listitem><para>&apos;0&apos;: left pad with zeros instead of spaces (see width).</para>
</listitem></itemizedlist>
</para>
<para>Where width is the desired width of the output. If the value is larger, more characters may be generated, but not more than the parameter dstSize. If width is &apos;*&apos; the actual width is read from the parameters passed to this function.</para>
<para>Where precision is the number of number of digits after the decimal point, default is<orderedlist>
<listitem><para>Use &quot;\%.f&quot; to not generate any numbers after the decimal point. If precision is &apos;*&apos; the actual precision is read from the parameters passed to this function.</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to insert in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">snprintfFloat</ref>, <ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">snprintfFloats</ref></para>
</simplesect>
<simplesect kind="note"><para>%f is not supported by this function because floats are converted to doubles when given as parameters in a variable argument list (va_list). Use snprintfFloat or snprintfFloats instead.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">snprintfFloat</ref>, <ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">snprintfFloats</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* snprintfFloat</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const UnicodeChar *format, const float value)</argsstring>
        <name>snprintfFloat</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Variant of <ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">snprintfFloats()</ref> for exactly one float only. </para>
        </briefdescription>
        <detaileddescription>
<para>The number format supports only one %f with flags/modifiers. The following is supported: <verbatim>\%[flags][width][.precision]f
</verbatim></para>
<para>Where flags can be:<itemizedlist>
<listitem><para>&apos;-&apos;: left justify the field (see width).</para>
</listitem><listitem><para>&apos;+&apos;: force sign.</para>
</listitem><listitem><para>&apos; &apos;: insert space if value is positive.</para>
</listitem><listitem><para>&apos;#&apos;: insert decimal point even if there are not decimals.</para>
</listitem><listitem><para>&apos;0&apos;: left pad with zeros instead of spaces (see width).</para>
</listitem></itemizedlist>
</para>
<para>Where width is the desired width of the output. If the value is larger, more characters may be generated, but not more than the parameter dstSize.</para>
<para>Where precision is the number of number of digits after the decimal point, default is &quot;3&quot;. Use &quot;\%.f&quot; to not generate any numbers after the decimal point. <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">Unicode::UnicodeChar</ref><sp/>buffer[20];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%6.4f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;3.1416&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%#6.f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;<sp/><sp/><sp/><sp/>3.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%6f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;<sp/>3.142&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%+06.f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;+00003&quot;</highlight></codeline>
</programlisting></para>
<para>If more control over the output is needed, see snprintfFloats which can have more than a single &quot;\%f&quot; in the string and also supports &quot;*&quot; in place of a number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string containing exactly on occurrence of f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point value to insert for f.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" kindref="member">snprintf</ref>, <ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">snprintfFloats</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="299" column="1" bodyfile="touchgfx/Unicode.hpp" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a4a8775a0a8666c54b0cedf0b082bbcb4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* snprintfFloat</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const char *format, const float value)</argsstring>
        <name>snprintfFloat</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Variant of <ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">snprintfFloats()</ref> for exactly one float only. </para>
        </briefdescription>
        <detaileddescription>
<para>The number format supports only one %f with flags/modifiers. The following is supported: <verbatim>\%[flags][width][.precision]f
</verbatim></para>
<para>Where flags can be:<itemizedlist>
<listitem><para>&apos;-&apos;: left justify the field (see width).</para>
</listitem><listitem><para>&apos;+&apos;: force sign.</para>
</listitem><listitem><para>&apos; &apos;: insert space if value is positive.</para>
</listitem><listitem><para>&apos;#&apos;: insert decimal point even if there are not decimals.</para>
</listitem><listitem><para>&apos;0&apos;: left pad with zeros instead of spaces (see width).</para>
</listitem></itemizedlist>
</para>
<para>Where width is the desired width of the output. If the value is larger, more characters may be generated, but not more than the parameter dstSize.</para>
<para>Where precision is the number of number of digits after the decimal point, default is &quot;3&quot;. Use &quot;\%.f&quot; to not generate any numbers after the decimal point. <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">Unicode::UnicodeChar</ref><sp/>buffer[20];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%6.4f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;3.1416&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%#6.f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;<sp/><sp/><sp/><sp/>3.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%6f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;<sp/>3.142&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">Unicode::snprintfFloat</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%+06.f&quot;</highlight><highlight class="normal">,<sp/>3.14159f);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;+00003&quot;</highlight></codeline>
</programlisting></para>
<para>If more control over the output is needed, see snprintfFloats which can have more than a single &quot;\%f&quot; in the string and also supports &quot;*&quot; in place of a number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string containing exactly on occurrence of f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point value to insert for f.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" kindref="member">snprintf</ref>, <ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">snprintfFloats</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="392" column="1" bodyfile="touchgfx/Unicode.hpp" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* snprintfFloats</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const UnicodeChar *format, const float *values)</argsstring>
        <name>snprintfFloats</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Variant of snprintf for floats only. </para>
        </briefdescription>
        <detaileddescription>
<para>The format supports several %f with flags/modifiers. The following is supported: <verbatim>\%[flags][width][.precision]f
</verbatim></para>
<para>Where flags can be:<itemizedlist>
<listitem><para>&apos;-&apos;: left justify the field (see width).</para>
</listitem><listitem><para>&apos;+&apos;: force sign.</para>
</listitem><listitem><para>&apos; &apos;: insert space if value is positive</para>
</listitem><listitem><para>&apos;#&apos;: insert decimal point even if there are not decimals</para>
</listitem><listitem><para>&apos;0&apos;: left pad with zeros instead of spaces (see width)</para>
</listitem></itemizedlist>
</para>
<para>Where width is the desired width of the output. If the value is larger, more characters may be generated, but not more than the parameter dstSize. If width is &apos;*&apos; the actual width is read from the list of values passed to this function.</para>
<para>Where precision is the number of number of digits after the decimal point, default is<orderedlist>
<listitem><para>Use &quot;\%.f&quot; to not generate any numbers after the decimal point. If precision is &apos;*&apos; the actual precision is read from the list of values passed to this function. <programlisting filename=".cpp"><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>param1[3]<sp/>=<sp/>{<sp/>6.0f,<sp/>4.0f,<sp/>3.14159f<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">Unicode::snprintfFloats</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%*.*f&quot;</highlight><highlight class="normal">,<sp/>param1);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;3.1416&quot;<sp/>float<sp/>param2[2]<sp/>=<sp/>{<sp/>3.14159f,<sp/>-123.4f<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">Unicode::snprintfFloats</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%f<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>param2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;3.142<sp/>-123.400&quot;</highlight></codeline>
</programlisting></para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string containing f&apos;s. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point values to insert for f. The number of elements in the array must match the number of f&apos;s in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" kindref="member">snprintf</ref>, <ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">snprintfFloat</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a0f2fa0968e37403e3cbc192eca3bd423" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* snprintfFloats</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const char *format, const float *values)</argsstring>
        <name>snprintfFloats</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Variant of snprintf for floats only. </para>
        </briefdescription>
        <detaileddescription>
<para>The format supports several %f with flags/modifiers. The following is supported: <verbatim>\%[flags][width][.precision]f
</verbatim></para>
<para>Where flags can be:<itemizedlist>
<listitem><para>&apos;-&apos;: left justify the field (see width).</para>
</listitem><listitem><para>&apos;+&apos;: force sign.</para>
</listitem><listitem><para>&apos; &apos;: insert space if value is positive</para>
</listitem><listitem><para>&apos;#&apos;: insert decimal point even if there are not decimals</para>
</listitem><listitem><para>&apos;0&apos;: left pad with zeros instead of spaces (see width)</para>
</listitem></itemizedlist>
</para>
<para>Where width is the desired width of the output. If the value is larger, more characters may be generated, but not more than the parameter dstSize. If width is &apos;*&apos; the actual width is read from the list of values passed to this function.</para>
<para>Where precision is the number of number of digits after the decimal point, default is<orderedlist>
<listitem><para>Use &quot;\%.f&quot; to not generate any numbers after the decimal point. If precision is &apos;*&apos; the actual precision is read from the list of values passed to this function. <programlisting filename=".cpp"><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>param1[3]<sp/>=<sp/>{<sp/>6.0f,<sp/>4.0f,<sp/>3.14159f<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">Unicode::snprintfFloats</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%*.*f&quot;</highlight><highlight class="normal">,<sp/>param1);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;3.1416&quot;<sp/>float<sp/>param2[2]<sp/>=<sp/>{<sp/>3.14159f,<sp/>-123.4f<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" kindref="member">Unicode::snprintfFloats</ref>(buffer,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%f<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>param2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>buffer=&quot;3.142<sp/>-123.400&quot;</highlight></codeline>
</programlisting></para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string containing f&apos;s. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point values to insert for f. The number of elements in the array must match the number of f&apos;s in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" kindref="member">snprintf</ref>, <ref refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" kindref="member">snprintfFloat</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1aafec2e0c77dc489d81b0e878adfa91c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t strlen</definition>
        <argsstring>(const UnicodeChar *str)</argsstring>
        <name>strlen</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Gets the length of a null-terminated <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string in question.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a58230df1632282042673b11ecb285093" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t strlen</definition>
        <argsstring>(const char *str)</argsstring>
        <name>strlen</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Gets the length of a null-terminated string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1ac6eb338ea0cfc618304dd6df977fac7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int strncmp</definition>
        <argsstring>(const UnicodeChar *RESTRICT str1, const UnicodeChar *RESTRICT str2, uint16_t maxchars)</argsstring>
        <name>strncmp</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *RESTRICT</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *RESTRICT</type>
          <declname>str2</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxchars</declname>
        </param>
        <briefdescription>
<para>Compares up to maxchars characters in two strings. </para>
        </briefdescription>
        <detaileddescription>
<para>One character from each buffer is compared, one at a time until the characters differ, until a terminating null- character is reached, or until maxchars characters match in both strings, whichever happens first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxchars</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of chars to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an integral value indicating the relationship between the strings: A zero value indicates that the characters compared in both strings are all equal. A value greater than zero indicates that the first character that does not match has a greater value in str1 than in str2; And a value less than zero indicates the opposite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1ab071cc6dce4b215a296dcea6c9006967" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int strncmp_ignore_white_spaces</definition>
        <argsstring>(const UnicodeChar *RESTRICT str1, const UnicodeChar *RESTRICT str2, uint16_t maxchars)</argsstring>
        <name>strncmp_ignore_white_spaces</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *RESTRICT</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *RESTRICT</type>
          <declname>str2</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxchars</declname>
        </param>
        <briefdescription>
<para>Like strncmp except that ignore any spaces in the two strings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxchars</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of chars to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an integral value indicating the relationship between the strings: A zero value indicates that the characters compared in both strings are all equal. A value greater than zero indicates that the first character that does not match has a greater value in str1 than in str2; And a value less than zero indicates the opposite. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1adea21018ae2e3100464df17a3276336c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t strncpy</definition>
        <argsstring>(UnicodeChar *RESTRICT dst, const UnicodeChar *RESTRICT src, uint16_t maxchars)</argsstring>
        <name>strncpy</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *RESTRICT</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *RESTRICT</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxchars</declname>
        </param>
        <briefdescription>
<para>Copy a string to a destination buffer, UnicodeChar to UnicodeChar version. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops after copying maxchars <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> characters or after copying the ending zero termination UnicodeChar.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer. Must have a size of at least maxchars. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxchars</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of UnicodeChars to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters copied (excluding null-termination if encountered)</para>
</simplesect>
<simplesect kind="note"><para>If there is no null-termination among the first n UnicodeChars of src, the string placed in destination will NOT be null-terminated! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1aec9439ccf8efd987ec86ce02a2c3cf01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t strncpy</definition>
        <argsstring>(UnicodeChar *RESTRICT dst, const char *RESTRICT src, uint16_t maxchars)</argsstring>
        <name>strncpy</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *RESTRICT</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *RESTRICT</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxchars</declname>
        </param>
        <briefdescription>
<para>Copy a string to a destination buffer, char to UnicodeChar version. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops after copying maxchars <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> characters or after copying the ending null-termination UnicodeChar.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer. Must have a size of at least maxchars. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxchars</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of chars to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters copied (excluding null-termination if encountered)</para>
</simplesect>
<simplesect kind="note"><para>If there is no null-termination among the first n UnicodeChars of src, the string placed in destination will NOT be null-terminated! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a3a9dc0a2d6018dbde7287afee71b77b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t toUTF8</definition>
        <argsstring>(const UnicodeChar *unicode, uint8_t *utf8, uint16_t maxbytes)</argsstring>
        <name>toUTF8</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>unicode</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>utf8</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxbytes</declname>
        </param>
        <briefdescription>
<para>Converts a string from <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> to UTF8. </para>
        </briefdescription>
        <detaileddescription>
<para>The conversion stops if there is no more room in the destination or if the terminating zero character has been converted. U+10000 through U+10FFFF are skipped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unicode</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">utf8</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer for the converted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes that the UTF8 array can hold.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters successfully converted from <ref refid="classtouchgfx_1_1_unicode" kindref="compound">Unicode</ref> to UTF8 including the terminating zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a914b242d859dff4adfbcb568ced738d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void utoa</definition>
        <argsstring>(uint32_t value, UnicodeChar *buffer, uint16_t bufferSize, int radix)</argsstring>
        <name>utoa</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <briefdescription>
<para>Integer to ASCII conversion. </para>
        </briefdescription>
        <detaileddescription>
<para>Supports radix 2 to radix 16.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>to place result in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer (number of 16-bit values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>to use (8 for octal, 10 for decimal, 16 for hex) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1ae26aedd214ba559e354f45dea8a2a016" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* vsnprintf</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const UnicodeChar *format, va_list pArg)</argsstring>
        <name>vsnprintf</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>pArg</declname>
        </param>
        <briefdescription>
<para>Variant of snprintf. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pArg</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to insert in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" kindref="member">snprintf</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1ac383bd00e6405ac3214429b5a87cf1d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* vsnprintf</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const char *format, va_list pArg)</argsstring>
        <name>vsnprintf</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>pArg</declname>
        </param>
        <briefdescription>
<para>Variant of snprintf. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for the formatted string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the dst buffer measured by number of UnicodeChars the buffer can hold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pArg</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to insert in the format string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the first element in the buffer where the formatted string is placed.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" kindref="member">snprintf</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="209" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1aa3fbb749d8f6afe551329ccdef5ea476" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void composeString</definition>
        <argsstring>(const UnicodeChar *&amp;bufptr, UnicodeChar sign, UnicodeChar formatChar, bool hasPrecision, bool zeroPrefix, int precision, bool hasWidth, int width, bool alignLeft, int &amp;charNumber, uint16_t dstSize, UnicodeChar *dst)</argsstring>
        <name>composeString</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *&amp;</type>
          <declname>bufptr</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref></type>
          <declname>sign</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref></type>
          <declname>formatChar</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasPrecision</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zeroPrefix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alignLeft</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>charNumber</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a2300e9305e85dd060e004d676cf6a87f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FORCE_INLINE_FUNCTION void</type>
        <definition>static FORCE_INLINE_FUNCTION void nextChar</definition>
        <argsstring>(const UnicodeChar *&amp;ucFormat, const char *&amp;cFormat)</argsstring>
        <name>nextChar</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *&amp;</type>
          <declname>ucFormat</declname>
        </param>
        <param>
          <type>const char *&amp;</type>
          <declname>cFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1afdef37e974525462d6b7ce125ea7a64f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parseFlagsAndPrecision</definition>
        <argsstring>(const UnicodeChar *&amp;ucFormat, const char *&amp;cFormat, UnicodeChar &amp;sign, bool &amp;alignLeft, bool &amp;forceDecimalPoint, bool &amp;zeroPrefix, bool &amp;hasWidth, int &amp;width, bool &amp;hasPrecision, int &amp;precision)</argsstring>
        <name>parseFlagsAndPrecision</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *&amp;</type>
          <declname>ucFormat</declname>
        </param>
        <param>
          <type>const char *&amp;</type>
          <declname>cFormat</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> &amp;</type>
          <declname>sign</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>alignLeft</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>forceDecimalPoint</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>zeroPrefix</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>hasWidth</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>width</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>hasPrecision</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a7e329a0c0ba947927a120ff2f7284aa1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FORCE_INLINE_FUNCTION <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">Unicode::UnicodeChar</ref></type>
        <definition>static FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar</definition>
        <argsstring>(const UnicodeChar *ucFormat, const char *cFormat)</argsstring>
        <name>peekChar</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>ucFormat</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="464" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a164f96369115216d61e0bac676bebdba" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static const UnicodeChar* skip_white_spaces</definition>
        <argsstring>(const UnicodeChar *str)</argsstring>
        <name>skip_white_spaces</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a75cf45d14c02add90ca42285a8690db0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* snprintfFloats</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const UnicodeChar *ucFormat, const char *cFormat, const float *values)</argsstring>
        <name>snprintfFloats</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>ucFormat</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cFormat</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_unicode_1a99ce784cca1df48ebc4f79b5bc94ff72" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
        <definition>static UnicodeChar* vsnprintf</definition>
        <argsstring>(UnicodeChar *dst, uint16_t dstSize, const UnicodeChar *ucFormat, const char *cFormat, va_list pArg)</argsstring>
        <name>vsnprintf</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" kindref="member">UnicodeChar</ref> *</type>
          <declname>ucFormat</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cFormat</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>pArg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Unicode.hpp" line="466" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class provides simple helper functions for working with strings which are stored as a null-terminated array of 16-bit characters. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="touchgfx/Unicode.hpp" line="19" column="1" bodyfile="touchgfx/Unicode.hpp" bodystart="18" bodyend="468"/>
    <listofallmembers>
      <member refid="classtouchgfx_1_1_unicode_1a5802add1404921c21fcb6fb3985a4062" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>atoi</name></member>
      <member refid="classtouchgfx_1_1_unicode_1aa3fbb749d8f6afe551329ccdef5ea476" prot="private" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>composeString</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a28604375f310ab2fb191115d427c8d52" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>fromUTF8</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a0081e3edf8ae83ab4256ec33aeb3c633" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>itoa</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a2300e9305e85dd060e004d676cf6a87f" prot="private" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>nextChar</name></member>
      <member refid="classtouchgfx_1_1_unicode_1afdef37e974525462d6b7ce125ea7a64f" prot="private" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>parseFlagsAndPrecision</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a7e329a0c0ba947927a120ff2f7284aa1" prot="private" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>peekChar</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a164f96369115216d61e0bac676bebdba" prot="private" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>skip_white_spaces</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a70b575d92b71d89d038c659abb693993" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>snprintf</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a9686301c4453079e24c685580660c0a8" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>snprintf</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a4ee22a6811d0cdefa08213ba85ae1de7" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>snprintfFloat</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a4a8775a0a8666c54b0cedf0b082bbcb4" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>snprintfFloat</name></member>
      <member refid="classtouchgfx_1_1_unicode_1addc9ab9782c0eec39c42e383a112655d" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>snprintfFloats</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a0f2fa0968e37403e3cbc192eca3bd423" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>snprintfFloats</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a75cf45d14c02add90ca42285a8690db0" prot="private" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>snprintfFloats</name></member>
      <member refid="classtouchgfx_1_1_unicode_1aafec2e0c77dc489d81b0e878adfa91c9" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>strlen</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a58230df1632282042673b11ecb285093" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>strlen</name></member>
      <member refid="classtouchgfx_1_1_unicode_1ac6eb338ea0cfc618304dd6df977fac7a" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>strncmp</name></member>
      <member refid="classtouchgfx_1_1_unicode_1ab071cc6dce4b215a296dcea6c9006967" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>strncmp_ignore_white_spaces</name></member>
      <member refid="classtouchgfx_1_1_unicode_1adea21018ae2e3100464df17a3276336c" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>strncpy</name></member>
      <member refid="classtouchgfx_1_1_unicode_1aec9439ccf8efd987ec86ce02a2c3cf01" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>strncpy</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a3a9dc0a2d6018dbde7287afee71b77b0" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>toUTF8</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a8288baea3c463411f70776b30b04605d" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>UnicodeChar</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a914b242d859dff4adfbcb568ced738d7" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>utoa</name></member>
      <member refid="classtouchgfx_1_1_unicode_1ae26aedd214ba559e354f45dea8a2a016" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>vsnprintf</name></member>
      <member refid="classtouchgfx_1_1_unicode_1ac383bd00e6405ac3214429b5a87cf1d5" prot="public" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>vsnprintf</name></member>
      <member refid="classtouchgfx_1_1_unicode_1a99ce784cca1df48ebc4f79b5bc94ff72" prot="private" virt="non-virtual"><scope>touchgfx::Unicode</scope><name>vsnprintf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
