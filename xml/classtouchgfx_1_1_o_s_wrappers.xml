<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classtouchgfx_1_1_o_s_wrappers" kind="class" language="C++" prot="public">
    <compoundname>touchgfx::OSWrappers</compoundname>
    <includes local="no">OSWrappers.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1a33b672a447b93652fde7f35f187247b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void giveFrameBufferSemaphore</definition>
        <argsstring>()</argsstring>
        <name>giveFrameBufferSemaphore</name>
        <briefdescription>
<para>Release the framebuffer semaphore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1a3e14c8c09e3b4e7e2285e18ec4635179" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void giveFrameBufferSemaphoreFromISR</definition>
        <argsstring>()</argsstring>
        <name>giveFrameBufferSemaphoreFromISR</name>
        <briefdescription>
<para>Release the framebuffer semaphore in a way that is safe in interrupt context. </para>
        </briefdescription>
        <detaileddescription>
<para>Called from ISR. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1aafb7e488abf18afaab6e3017d6f9e861" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
<para>Initialize framebuffer semaphore and queue/mutex for VSYNC signal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1a253ad7861870970c0165804b00ff7326" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void signalVSync</definition>
        <argsstring>()</argsstring>
        <name>signalVSync</name>
        <briefdescription>
<para>Signal that a VSYNC has occurred. </para>
        </briefdescription>
        <detaileddescription>
<para>Should make the vsync queue/mutex available.</para>
<para><simplesect kind="note"><para>This function is called from an ISR, and should (depending on OS) trigger a scheduling. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1ad29854b0a00f275814233434c0b931b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void takeFrameBufferSemaphore</definition>
        <argsstring>()</argsstring>
        <name>takeFrameBufferSemaphore</name>
        <briefdescription>
<para>Take the framebuffer semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>Blocks until semaphore is available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1a2c50576c6ab3b8362a4bb2fc48822bc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void taskDelay</definition>
        <argsstring>(uint16_t ms)</argsstring>
        <name>taskDelay</name>
        <param>
          <type>uint16_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>A function that causes executing task to sleep for a number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is OPTIONAL. It is only used by the TouchGFX in the case of a specific frame refresh strategy (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL). Due to backwards compatibility, in order for this function to be usable by the <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> the function must be explicitly registered: hal.registerTaskDelayFunction(&amp;OSWrappers::taskDelay)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to sleep.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_h_a_l_1af7ed8f3a817cabfa5fba5f2f44f55bd7" kindref="member">HAL::setFrameRefreshStrategy</ref>, <ref refid="classtouchgfx_1_1_h_a_l_1a42152550ca952d7c3b149ada5c017ecf" kindref="member">HAL::registerTaskDelayFunction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1a1ebb0346f8a46046d7fa05d9a4180588" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tryTakeFrameBufferSemaphore</definition>
        <argsstring>()</argsstring>
        <name>tryTakeFrameBufferSemaphore</name>
        <briefdescription>
<para>Attempt to obtain the framebuffer semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>If semaphore is not available, do nothing.</para>
<para><simplesect kind="note"><para>must return immediately! This function does not care who has the taken the semaphore, it only serves to make sure that the semaphore is taken by someone. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_o_s_wrappers_1a2514887814683a91594f7387ec1996ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void waitForVSync</definition>
        <argsstring>()</argsstring>
        <name>waitForVSync</name>
        <briefdescription>
<para>This function blocks until a VSYNC occurs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function must first clear the mutex/queue and then wait for the next one to occur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/OSWrappers.hpp" line="37" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class specifies OS wrappers for dealing with the framebuffer semaphore and the VSYNC signal. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="touchgfx/hal/OSWrappers.hpp" line="18" column="1" bodyfile="touchgfx/hal/OSWrappers.hpp" bodystart="17" bodyend="73"/>
    <listofallmembers>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1a33b672a447b93652fde7f35f187247b2" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>giveFrameBufferSemaphore</name></member>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1a3e14c8c09e3b4e7e2285e18ec4635179" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>giveFrameBufferSemaphoreFromISR</name></member>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1aafb7e488abf18afaab6e3017d6f9e861" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>initialize</name></member>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1a253ad7861870970c0165804b00ff7326" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>signalVSync</name></member>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1ad29854b0a00f275814233434c0b931b8" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>takeFrameBufferSemaphore</name></member>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1a2c50576c6ab3b8362a4bb2fc48822bc7" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>taskDelay</name></member>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1a1ebb0346f8a46046d7fa05d9a4180588" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>tryTakeFrameBufferSemaphore</name></member>
      <member refid="classtouchgfx_1_1_o_s_wrappers_1a2514887814683a91594f7387ec1996ef" prot="public" virt="non-virtual"><scope>touchgfx::OSWrappers</scope><name>waitForVSync</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
