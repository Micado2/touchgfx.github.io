<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classtouchgfx_1_1_h_a_l" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>touchgfx::HAL</compoundname>
    <derivedcompoundref refid="classtouchgfx_1_1_h_a_l_s_d_l2" prot="public" virt="non-virtual">HALSDL2</derivedcompoundref>
    <includes local="no">HAL.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4" prot="public" static="no" strong="no">
        <type></type>
        <name>FrameRefreshStrategy</name>
        <enumvalue id="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4a3c95f830eb73d08211afe676080d18b5" prot="public">
          <name>REFRESH_STRATEGY_DEFAULT</name>
          <briefdescription>
<para>If not explicitly set, this strategy is used. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4ab08914e9037d6b98fb2606a4483ed8a0" prot="public">
          <name>REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL</name>
          <briefdescription>
<para>Strategy optimized for single framebuffer on systems with TFT controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4ad6eaee7a49c2ae7399ac220c1055ebdb" prot="public">
          <name>REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER</name>
          <briefdescription>
<para>Strategy using less than a full framebuffer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A list of available frame refresh strategies. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classtouchgfx_1_1_h_a_l_1af7ed8f3a817cabfa5fba5f2f44f55bd7" kindref="member">setFrameRefreshStrategy</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="801" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="800" bodyend="805"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a88f14e4aa8756798bf97845274e8614d" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t DISPLAY_HEIGHT</definition>
        <argsstring></argsstring>
        <name>DISPLAY_HEIGHT</name>
        <briefdescription>
<para>The height of the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> display in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="555" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a687a54fff313039e31edc57eb1781297" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacetouchgfx_1aaf854447c39c56bbaf8275faddd3476d" kindref="member">DisplayRotation</ref></type>
        <definition>DisplayRotation DISPLAY_ROTATION</definition>
        <argsstring></argsstring>
        <name>DISPLAY_ROTATION</name>
        <briefdescription>
<para>The rotation from display to framebuffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="556" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a69caf4e3dd9e447013bc0d95dc00b29e" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t DISPLAY_WIDTH</definition>
        <argsstring></argsstring>
        <name>DISPLAY_WIDTH</name>
        <briefdescription>
<para>The width of the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> display in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="554" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a65190cd2f6af334e630f8e1d33783542" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t FRAME_BUFFER_HEIGHT</definition>
        <argsstring></argsstring>
        <name>FRAME_BUFFER_HEIGHT</name>
        <briefdescription>
<para>The height of the framebuffer in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="558" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1ac405941b35fb55f1635ab2804f60f08e" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t FRAME_BUFFER_WIDTH</definition>
        <argsstring></argsstring>
        <name>FRAME_BUFFER_WIDTH</name>
        <briefdescription>
<para>The width of the framebuffer in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="557" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a0638787ef3286032a7e7ac67d53c1d61" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool USE_ANIMATION_STORAGE</definition>
        <argsstring></argsstring>
        <name>USE_ANIMATION_STORAGE</name>
        <briefdescription>
<para>Is animation storage enabled? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="560" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a713a93a66c418e8221fe9341bb1858e4" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool USE_DOUBLE_BUFFERING</definition>
        <argsstring></argsstring>
        <name>USE_DOUBLE_BUFFERING</name>
        <briefdescription>
<para>Is double buffering enabled? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="559" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="559" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1af0c77c8827957c2d15397234aea724f6" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> *</type>
        <definition>LCD* auxiliaryLCD</definition>
        <argsstring></argsstring>
        <name>auxiliaryLCD</name>
        <briefdescription>
<para>Auxiliary <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> class used to render Drawables into dynamic bitmaps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1070" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a10e22c3440b3719c6ab6603469c17083" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref> *</type>
        <definition>ButtonController* buttonController</definition>
        <argsstring></argsstring>
        <name>buttonController</name>
        <briefdescription>
<para>A reference to an optional <ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1057" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a05a11ff786f8aba513c4393cddef4dee" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_d_m_a___interface" kindref="compound">DMA_Interface</ref> &amp;</type>
        <definition>DMA_Interface&amp; dma</definition>
        <argsstring></argsstring>
        <name>dma</name>
        <briefdescription>
<para>A reference to the DMA interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1053" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a55d4a3b2e3954954ac0bde7a1572d3c5" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t fingerSize</definition>
        <argsstring></argsstring>
        <name>fingerSize</name>
        <briefdescription>
<para>The radius of the finger in pixels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1067" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1ac66e3b19235b43dbe16f9bef92d8c091" prot="protected" static="no" mutable="no">
        <type>uint16_t *</type>
        <definition>uint16_t* frameBuffer0</definition>
        <argsstring></argsstring>
        <name>frameBuffer0</name>
        <briefdescription>
<para>Pointer to the first framebuffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1063" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a7a5e0d2d006904d52da083c421645ab9" prot="protected" static="no" mutable="no">
        <type>uint16_t *</type>
        <definition>uint16_t* frameBuffer1</definition>
        <argsstring></argsstring>
        <name>frameBuffer1</name>
        <briefdescription>
<para>Pointer to the second framebuffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1064" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a1a28230b1ddebca275d51d72f356bd2b" prot="protected" static="no" mutable="no">
        <type>uint16_t *</type>
        <definition>uint16_t* frameBuffer2</definition>
        <argsstring></argsstring>
        <name>frameBuffer2</name>
        <briefdescription>
<para>Pointer to the optional third framebuffer used for animation storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1065" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1adf80c809ef5619c1f049673cfead6e51" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_frame_buffer_allocator" kindref="compound">FrameBufferAllocator</ref> *</type>
        <definition>FrameBufferAllocator* frameBufferAllocator</definition>
        <argsstring></argsstring>
        <name>frameBufferAllocator</name>
        <briefdescription>
<para>A reference to an optional <ref refid="classtouchgfx_1_1_frame_buffer_allocator" kindref="compound">FrameBufferAllocator</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1058" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1058" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1ae3e79adce0f20f90e6ed0841ac5808bc" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool frameBufferUpdatedThisFrame</definition>
        <argsstring></argsstring>
        <name>frameBufferUpdatedThisFrame</name>
        <briefdescription>
<para>True if something was drawn in the current frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1069" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1069" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a13b276fe6aeb77874d05a66cc27eb8ea" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_gestures" kindref="compound">Gestures</ref></type>
        <definition>Gestures gestures</definition>
        <argsstring></argsstring>
        <name>gestures</name>
        <briefdescription>
<para>Class for low-level interpretation of touch events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1060" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1aca20e801cb9562eb4da3a028b5cad0cb" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> &amp;</type>
        <definition>LCD&amp; lcdRef</definition>
        <argsstring></argsstring>
        <name>lcdRef</name>
        <briefdescription>
<para>A reference to the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1054" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a70d9d7d6a38d3c1d6856319f6fa6e1a4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lockDMAToPorch</definition>
        <argsstring></argsstring>
        <name>lockDMAToPorch</name>
        <briefdescription>
<para>Whether or not to lock DMA transfers with TFT porch signal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1068" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a859883064e961e58224109bd208ae314" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_m_c_u_instrumentation" kindref="compound">MCUInstrumentation</ref> *</type>
        <definition>MCUInstrumentation* mcuInstrumentation</definition>
        <argsstring></argsstring>
        <name>mcuInstrumentation</name>
        <briefdescription>
<para>A reference to an optional MCU instrumentation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1056" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a123c63e538589b1f208fcd41067b5514" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacetouchgfx_1a38bd6ad994c4baaac737cf426fbf23ea" kindref="member">DisplayOrientation</ref></type>
        <definition>DisplayOrientation nativeDisplayOrientation</definition>
        <argsstring></argsstring>
        <name>nativeDisplayOrientation</name>
        <briefdescription>
<para>Contains the native display orientation. If desired orientation is different, apply rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1061" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1061" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a89f3f06692914977fdc5a9d8e494c668" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref></type>
        <definition>Rect partialFrameBufferRect</definition>
        <argsstring></argsstring>
        <name>partialFrameBufferRect</name>
        <briefdescription>
<para>The region of the screen covered by the partial framebuffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1071" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1adcf247597bbd8b4cf7bb1644be325d8d" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4" kindref="member">FrameRefreshStrategy</ref></type>
        <definition>FrameRefreshStrategy refreshStrategy</definition>
        <argsstring></argsstring>
        <name>refreshStrategy</name>
        <briefdescription>
<para>The selected display refresh strategy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1066" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a1c6b454fcb5302c60165c03cb53e05e6" prot="protected" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* taskDelayFunc) (uint16_t)</definition>
        <argsstring>)(uint16_t)</argsstring>
        <name>taskDelayFunc</name>
        <briefdescription>
<para>Pointer to a function that can delay GUI task for a number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1062" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a1b7a962e3c313381b64ba5c8102733db" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_touch_controller" kindref="compound">TouchController</ref> &amp;</type>
        <definition>TouchController&amp; touchController</definition>
        <argsstring></argsstring>
        <name>touchController</name>
        <briefdescription>
<para>A reference to the touch controller. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1055" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1055" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a9f832b80ca0857bc38fca999ddd9d7b0" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool isDrawing</definition>
        <argsstring></argsstring>
        <name>isDrawing</name>
        <briefdescription>
<para>True if currently in the process of rendering a screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1059" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1059" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a4697bffac2cbfd7e78af30e37c6322cb" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t cc_begin</definition>
        <argsstring></argsstring>
        <name>cc_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1087" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1aa35cae78a70ca752b38af7ce649b5a8f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool clientDirty</definition>
        <argsstring></argsstring>
        <name>clientDirty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1083" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a21a9ba1a73cf60fed3cc68fde420a739" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool displayOrientationChangeRequested</definition>
        <argsstring></argsstring>
        <name>displayOrientationChangeRequested</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1089" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a6ff4d714082c99811dd8b4986e89d280" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lastTouched</definition>
        <argsstring></argsstring>
        <name>lastTouched</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1085" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a27f46bc82b854ed478bca4eedfa67112" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t lastX</definition>
        <argsstring></argsstring>
        <name>lastX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1076" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a5560173de73e637031ddd3722575ff54" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t lastY</definition>
        <argsstring></argsstring>
        <name>lastY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1077" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a7e933b682dcad07bafc6595e3b004018" prot="private" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_u_i_event_listener" kindref="compound">UIEventListener</ref> *</type>
        <definition>UIEventListener* listener</definition>
        <argsstring></argsstring>
        <name>listener</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1074" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1ab3fa5c6eea56337e8edc676eedf4c93b" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t mcuLoadPct</definition>
        <argsstring></argsstring>
        <name>mcuLoadPct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1079" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1ac916c122d68d5e027a9809014fa2b8a1" prot="private" static="no" mutable="no">
        <type><ref refid="namespacetouchgfx_1a38bd6ad994c4baaac737cf426fbf23ea" kindref="member">DisplayOrientation</ref></type>
        <definition>DisplayOrientation requestedOrientation</definition>
        <argsstring></argsstring>
        <name>requestedOrientation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1088" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a3200e2e7bc1b7a63939b030805ca57ed" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool swapRequested</definition>
        <argsstring></argsstring>
        <name>swapRequested</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1084" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1ace680928a2a93f289c9781a73dec6745" prot="private" static="no" mutable="no">
        <type>int8_t</type>
        <definition>int8_t touchSampleRate</definition>
        <argsstring></argsstring>
        <name>touchSampleRate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1078" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a5e2c782e86c8b997957703bcc160fbaf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool updateMCULoad</definition>
        <argsstring></argsstring>
        <name>updateMCULoad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1086" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a06101e7fb97be03e4d0f6f30fc697aea" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool useAuxiliaryLCD</definition>
        <argsstring></argsstring>
        <name>useAuxiliaryLCD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1090" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1ae53541b4559ba9b6076854727bd9fab2" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t vSyncCnt</definition>
        <argsstring></argsstring>
        <name>vSyncCnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1080" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a01472300b011d4e311d65f91a7c16143" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vSyncCompensationEnabled</definition>
        <argsstring></argsstring>
        <name>vSyncCompensationEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1082" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a2e984a1dfd05337e2219121c597663de" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t vSyncForFrame</definition>
        <argsstring></argsstring>
        <name>vSyncForFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1081" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1081" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_h_a_l_1a8827c1b512625911efaebdc9549b9107" prot="private" static="yes" mutable="no">
        <type><ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> *</type>
        <definition>HAL* instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1075" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1075" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a705c80beba28778e2399d45f6ed97eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void allowDMATransfers</definition>
        <argsstring>()</argsstring>
        <name>allowDMATransfers</name>
        <briefdescription>
<para>Allow the DMA to start transfers. </para>
        </briefdescription>
        <detaileddescription>
<para>Front Porch Entry is a good place to call this. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ae26fd1525f3ede94d9cff4c11c3cb423" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void backPorchExited</definition>
        <argsstring>()</argsstring>
        <name>backPorchExited</name>
        <briefdescription>
<para>Has to be called from within the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> IRQ rutine when the Back Porch Exit is reached. </para>
        </briefdescription>
        <detaileddescription>
<para>Has to be called from within the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> IRQ rutine when the Back Porch Exit is reached. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="504" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="504" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ac8dbf97679e73e73955e2ecd45109ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void blitCopy</definition>
        <argsstring>(const uint16_t *pSrc, const uint8_t *pClut, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t srcWidth, uint8_t alpha, bool hasTransparentPixels, uint16_t dstWidth, Bitmap::BitmapFormat srcFormat, Bitmap::BitmapFormat dstFormat)</argsstring>
        <name>blitCopy</name>
        <param>
          <type>const uint16_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>pClut</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>srcWidth</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasTransparentPixels</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstWidth</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_bitmap_1a23d1a7c7cf0f6da45ca389904e644d55" kindref="member">Bitmap::BitmapFormat</ref></type>
          <declname>srcFormat</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_bitmap_1a23d1a7c7cf0f6da45ca389904e644d55" kindref="member">Bitmap::BitmapFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <briefdescription>
<para>Blits a 2D source-array to the framebuffer performing alpha-blending (and transparency keying) as specified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>The source-array pointer (points to first value to copy) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pClut</parametername>
</parameternamelist>
<parameterdescription>
<para>The CLUT pointer (points to CLUT header data which include the type and size of this CLUT followed by colors data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination x coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination y coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the source 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha value to use for blending (255 = solid, no blending) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasTransparentPixels</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, this data copy contains transparent pixels and require hardware support for that to be enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the destination 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The source buffer color format (default is the framebuffer format) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer color format (default is the framebuffer format)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Alpha=255 is assumed &quot;solid&quot; and shall be used if <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> does not support BLIT_OP_COPY_WITH_ALPHA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a6ff0a8b2198a0aa836bcff822d1df26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void blitCopy</definition>
        <argsstring>(const uint16_t *pSrc, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t srcWidth, uint8_t alpha, bool hasTransparentPixels, uint16_t dstWidth, Bitmap::BitmapFormat srcFormat, Bitmap::BitmapFormat dstFormat)</argsstring>
        <name>blitCopy</name>
        <param>
          <type>const uint16_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>srcWidth</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasTransparentPixels</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstWidth</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_bitmap_1a23d1a7c7cf0f6da45ca389904e644d55" kindref="member">Bitmap::BitmapFormat</ref></type>
          <declname>srcFormat</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_bitmap_1a23d1a7c7cf0f6da45ca389904e644d55" kindref="member">Bitmap::BitmapFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <briefdescription>
<para>Blits a 2D source-array to the framebuffer performing alpha-blending (and transparency keying) as specified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>The source-array pointer (points to first value to copy) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination x coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination y coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the source 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha value to use for blending (255 = solid, no blending) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasTransparentPixels</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, this data copy contains transparent pixels and require hardware support for that to be enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the destination 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The source buffer color format (default is the framebuffer format) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer color format (default is the framebuffer format)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Alpha=255 is assumed &quot;solid&quot; and shall be used if <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> does not support BLIT_OP_COPY_WITH_ALPHA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1af3fbd84308b86fe2b5392637f6ce505a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void blitCopy</definition>
        <argsstring>(const uint16_t *pSrc, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t srcWidth, uint8_t alpha, bool hasTransparentPixels)</argsstring>
        <name>blitCopy</name>
        <param>
          <type>const uint16_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>srcWidth</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasTransparentPixels</declname>
        </param>
        <briefdescription>
<para>Blits a 2D source-array to the framebuffer performing alpha-blending (and transparency keying) as specified using the default lcd format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>The source-array pointer (points to first value to copy) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination x coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination y coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the source 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha value to use for blending (255 = solid, no blending) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasTransparentPixels</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, this data copy contains transparent pixels and require hardware support for that to be enabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Alpha=255 is assumed &quot;solid&quot; and shall be used if <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> does not support BLIT_OP_COPY_WITH_ALPHA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a3d7d4d8a67422bfc45100ea70441e6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void blitCopyARGB8888</definition>
        <argsstring>(const uint16_t *pSrc, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t srcWidth, uint8_t alpha)</argsstring>
        <name>blitCopyARGB8888</name>
        <param>
          <type>const uint16_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>srcWidth</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Blits a 2D source-array to the framebuffer performing per-pixel alpha blending. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>The source-array pointer (points to first value to copy) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination x coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination y coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the source 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha value to use for blending. This is applied on every pixel, in addition to the per-pixel alpha value (255 = solid, no blending) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a6a9d5dd2bec5e01051b5524ff452a82a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void blitCopyGlyph</definition>
        <argsstring>(const uint8_t *pSrc, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t srcWidth, colortype color, uint8_t alpha, BlitOperations operation)</argsstring>
        <name>blitCopyGlyph</name>
        <param>
          <type>const uint8_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>srcWidth</declname>
        </param>
        <param>
          <type><ref refid="structtouchgfx_1_1colortype" kindref="compound">colortype</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespacetouchgfx_1a5c99ff39743a4feaa2188efdc075ae8b" kindref="member">BlitOperations</ref></type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Blits a 4bpp or 8bpp glyph - maybe use the same method and supply additional color mode arg. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>The source-array pointer (points to first value to copy) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination x coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination y coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the source 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtouchgfx_1_1_color" kindref="compound">Color</ref> of the text. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha value to use for blending (255 = solid, no blending) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation type to use for blit copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a9a0c19d1a1246b6086e12f61c1f933e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void blitFill</definition>
        <argsstring>(colortype color, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t alpha, uint16_t dstWidth, Bitmap::BitmapFormat dstFormat)</argsstring>
        <name>blitFill</name>
        <param>
          <type><ref refid="structtouchgfx_1_1colortype" kindref="compound">colortype</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstWidth</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_bitmap_1a23d1a7c7cf0f6da45ca389904e644d55" kindref="member">Bitmap::BitmapFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <briefdescription>
<para>Blits a color value to the framebuffer performing alpha-blending (and transparency keying) as specified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired fill-color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination x coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination y coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha value to use for blending (255 = solid, no blending) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance (in elements) from first value of first line, to first value of second line (the destination 2D array width) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination buffer color format (default is the framebuffer format)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Alpha=255 is assumed &quot;solid&quot; and shall be used if <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> does not support BLIT_OP_FILL_WITH_ALPHA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a8a7bc42ad95131aa18e017605a0fedc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void blitFill</definition>
        <argsstring>(colortype color, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t alpha)</argsstring>
        <name>blitFill</name>
        <param>
          <type><ref refid="structtouchgfx_1_1colortype" kindref="compound">colortype</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Blits a color value to the framebuffer performing alpha-blending (and transparency keying) as specified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired fill-color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination x coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination y coordinate on the framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of desired area of the source 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha value to use for blending (255 = solid, no blending)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Alpha=255 is assumed &quot;solid&quot; and shall be used if <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> does not support BLIT_OP_FILL_WITH_ALPHA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a4f53c9928e6d17edbb6382461ea60a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool blockCopy</definition>
        <argsstring>(void *RESTRICT dest, const void *RESTRICT src, uint32_t numBytes)</argsstring>
        <name>blockCopy</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1a4f53c9928e6d17edbb6382461ea60a43">blockCopy</reimplementedby>
        <param>
          <type>void *<ref refid="_config_8hpp_1aae3356b63849abbe8789dd41648ee90a" kindref="member">RESTRICT</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const void *<ref refid="_config_8hpp_1aae3356b63849abbe8789dd41648ee90a" kindref="member">RESTRICT</ref></type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>This function performs a platform-specific memcpy, if supported by the hardware. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to destination memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to source memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the copy succeeded, false if copy was not performed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a899e0d32497b51e5483064565623156f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void configureInterrupts</definition>
        <argsstring>()=0</argsstring>
        <name>configureInterrupts</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1a77a3b251f30ecb28886d3372e5fbfd1b">configureInterrupts</reimplementedby>
        <briefdescription>
<para>Configures the interrupts relevant for TouchGFX. </para>
        </briefdescription>
        <detaileddescription>
<para>This primarily entails setting the interrupt priorities for the DMA and <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> interrupts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a01a26dc295915296613e39a1f38abf2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint16_t</type>
        <definition>virtual uint16_t configurePartialFrameBuffer</definition>
        <argsstring>(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height)</argsstring>
        <name>configurePartialFrameBuffer</name>
        <param>
          <type>const uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Configures a partial framebuffer as current framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This method uses the assigned <ref refid="classtouchgfx_1_1_frame_buffer_allocator" kindref="compound">FrameBufferAllocator</ref> to allocate block of compatible dimensions. The height of the allocated block is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The absolute x coordinate of the block on the screen. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The absolute y coordinate of the block on the screen. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the block requested.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The height of the block allocated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a1be4b79cccbf907115e5ce6075759b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint16_t *</type>
        <definition>virtual uint16_t* copyFBRegionToMemory</definition>
        <argsstring>(Rect meAbs)</argsstring>
        <name>copyFBRegionToMemory</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>meAbs</declname>
        </param>
        <briefdescription>
<para>Copies a region of the currently displayed framebuffer to memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Used for e.g. <ref refid="classtouchgfx_1_1_slide_transition" kindref="compound">SlideTransition</ref> and for displaying pre-rendered drawables e.g. in animations where redrawing the drawable is not necessary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meAbs</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer region to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the memory address containing the copy of the framebuffer.</para>
</simplesect>
<simplesect kind="note"><para>Requires animation storage to be present. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a8547506d89d884bcd2039241a5805c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint16_t *</type>
        <definition>virtual uint16_t* copyFBRegionToMemory</definition>
        <argsstring>(Rect meAbs, uint16_t *dst, uint32_t stride)</argsstring>
        <name>copyFBRegionToMemory</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>meAbs</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Copies a region of the currently displayed framebuffer to a buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Used for e.g. <ref refid="classtouchgfx_1_1_slide_transition" kindref="compound">SlideTransition</ref> and for displaying pre-rendered drawables e.g. in animations where redrawing the drawable is not necessary. The buffer can e.g. be a dynamic bitmap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meAbs</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer region to copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the buffer to store the copy in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the target buffer (row length).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the memory address containing the copy of the framebuffer.</para>
</simplesect>
<simplesect kind="note"><para>Requires animation storage to be present. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a1fbc52b8a6598c3a3183e79ab7b18021" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void disableInterrupts</definition>
        <argsstring>()=0</argsstring>
        <name>disableInterrupts</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1af5028e20dc4b7425a6bbd0671b32b9a3">disableInterrupts</reimplementedby>
        <briefdescription>
<para>Disables the DMA and <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a666d501b1cf9ac91dc6dc6e78e7f0e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void drawDrawableInDynamicBitmap</definition>
        <argsstring>(Drawable &amp;drawable, BitmapId bitmapId)</argsstring>
        <name>drawDrawableInDynamicBitmap</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> &amp;</type>
          <declname>drawable</declname>
        </param>
        <param>
          <type><ref refid="namespacetouchgfx_1a3923435f6df64396b2203d60ddfa89e4" kindref="member">BitmapId</ref></type>
          <declname>bitmapId</declname>
        </param>
        <briefdescription>
<para>Render a <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> and its widgets into a dynamic bitmap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">drawable</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference on the <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> object to render. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmapId</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic bitmap to be used as a rendertarget. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="951" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a661a7afd508167ec028cb97320bce2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void drawDrawableInDynamicBitmap</definition>
        <argsstring>(Drawable &amp;drawable, BitmapId bitmapId, const Rect &amp;rect)</argsstring>
        <name>drawDrawableInDynamicBitmap</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> &amp;</type>
          <declname>drawable</declname>
        </param>
        <param>
          <type><ref refid="namespacetouchgfx_1a3923435f6df64396b2203d60ddfa89e4" kindref="member">BitmapId</ref></type>
          <declname>bitmapId</declname>
        </param>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Render a <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> and its widgets into a dynamic bitmap. </para>
        </briefdescription>
        <detaileddescription>
<para>Only the specified <ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref> region is updated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">drawable</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference on the <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> object to render. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmapId</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic bitmap to be used as a rendertarget. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>Region to update. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="961" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a2202c8be3809f3abde2c823e7d4241f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void enableInterrupts</definition>
        <argsstring>()=0</argsstring>
        <name>enableInterrupts</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1a36a492e20549120a008400b010fc8977">enableInterrupts</reimplementedby>
        <briefdescription>
<para>Enables the DMA and <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a1d84dc0c997642bd476853aefb6446a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void enableLCDControllerInterrupt</definition>
        <argsstring>()=0</argsstring>
        <name>enableLCDControllerInterrupt</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1abebe60bfe17c2b6b1b01816efeb1f2ea">enableLCDControllerInterrupt</reimplementedby>
        <briefdescription>
<para>Configure the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> controller to fire interrupts at VSYNC. </para>
        </briefdescription>
        <detaileddescription>
<para>Called automatically once TouchGFX initialization has completed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a7f93a2214fa1982c6f5ff3a1ed9ef77c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void enableMCULoadCalculation</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>enableMCULoadCalculation</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>This method sets a flag that determines if generic <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> should calculate MCU load based on concrete MCU instrumentation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, set flag to update MCU load. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="701" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a0f0005b02d82995ee28c1c7895a15a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void flushDMA</definition>
        <argsstring>()</argsstring>
        <name>flushDMA</name>
        <briefdescription>
<para>This function blocks until the DMA queue (containing BlitOps) is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a93dfbddf2eff9ce1d0fd1bf2a89e5028" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void flushFrameBuffer</definition>
        <argsstring>()</argsstring>
        <name>flushFrameBuffer</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1a93dfbddf2eff9ce1d0fd1bf2a89e5028">flushFrameBuffer</reimplementedby>
        <briefdescription>
<para>This function is called whenever the framework has performed a complete draw. </para>
        </briefdescription>
        <detaileddescription>
<para>On some platforms, a local framebuffer needs to be pushed to the display through a SPI channel or similar. Implement that functionality here. This function is called whenever the framework has performed a complete draw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1af7803460ef14e8d4a4731d40a9f4c57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void flushFrameBuffer</definition>
        <argsstring>(const Rect &amp;rect)</argsstring>
        <name>flushFrameBuffer</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1af7803460ef14e8d4a4731d40a9f4c57f">flushFrameBuffer</reimplementedby>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>This function is called whenever the framework has performed a partial draw. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area of the screen that has been drawn, expressed in absolute coordinates.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_h_a_l_1a93dfbddf2eff9ce1d0fd1bf2a89e5028" kindref="member">flushFrameBuffer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a1a6717e9770ad606ffe0c2276427f0f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void frontPorchEntered</definition>
        <argsstring>()</argsstring>
        <name>frontPorchEntered</name>
        <briefdescription>
<para>Has to be called from within the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> IRQ routine when the Front Porch Entry is reached. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="170" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a7c4974317fa357a72aadb65cf8df894e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t* getAnimationStorage</definition>
        <argsstring>() const</argsstring>
        <name>getAnimationStorage</name>
        <briefdescription>
<para>Gets the optional framebuffer used for animation storage. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The address or 0 if unused. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="790" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="790" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a0f618e37f375c87dddb612788df3324c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> *</type>
        <definition>LCD* getAuxiliaryLCD</definition>
        <argsstring>()</argsstring>
        <name>getAuxiliaryLCD</name>
        <briefdescription>
<para>Get the auxiliary <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> class attached to the <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> instance if any. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer on the axiliary <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> class attached to the <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="978" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="978" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1aa76b900e4b59cdff7bb1892030c266fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetouchgfx_1a5c99ff39743a4feaa2188efdc075ae8b" kindref="member">BlitOperations</ref></type>
        <definition>virtual BlitOperations getBlitCaps</definition>
        <argsstring>()</argsstring>
        <name>getBlitCaps</name>
        <briefdescription>
<para>Function for obtaining the blit capabilities of the concrete <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>As default, will return whatever blitcaps are reported by the associated DMA object.</para>
<para><simplesect kind="return"><para>a bitmask of the supported blitcaps. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="258" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a3824270ab45fd63e637a1f6199c2bda6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref> *</type>
        <definition>ButtonController* getButtonController</definition>
        <argsstring>() const</argsstring>
        <name>getButtonController</name>
        <briefdescription>
<para>Gets the associated <ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the <ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref>, or zero if no <ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref> has been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="732" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="732" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a1cf8b1899b19f8e52e86fe4006531e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t getCPUCycles</definition>
        <argsstring>()</argsstring>
        <name>getCPUCycles</name>
        <briefdescription>
<para>Gets the current cycle counter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the cycle counter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ad0f6ee4f84ab0f5a09f9d198e3bdf14d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t getDisplayHeight</definition>
        <argsstring>() const</argsstring>
        <name>getDisplayHeight</name>
        <briefdescription>
<para>Gets display height. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The display height. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="460" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="460" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a9724a2c9e9763c751266320a8890cb80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetouchgfx_1a38bd6ad994c4baaac737cf426fbf23ea" kindref="member">DisplayOrientation</ref></type>
        <definition>DisplayOrientation getDisplayOrientation</definition>
        <argsstring>() const</argsstring>
        <name>getDisplayOrientation</name>
        <briefdescription>
<para>Gets the current display orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>Will be equal to the native orientation of the display unless setDisplayOrientation has been explicitly called earlier.</para>
<para><simplesect kind="return"><para>The current display orientation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="116" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a939eadd59671da1da21f6a729df6f611" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t getDisplayWidth</definition>
        <argsstring>() const</argsstring>
        <name>getDisplayWidth</name>
        <briefdescription>
<para>Gets display width. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The display width. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="450" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="450" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a3bf3fd3047dfb9b99f89edd6f9d659f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacetouchgfx_1ac4182ff66044df30080851925c914fb0" kindref="member">DMAType</ref></type>
        <definition>virtual DMAType getDMAType</definition>
        <argsstring>()</argsstring>
        <name>getDMAType</name>
        <briefdescription>
<para>Function for obtaining the DMA type of the concrete DMA implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>As default, will return DMA_TYPE_GENERIC type value.</para>
<para><simplesect kind="return"><para>a DMAType value of the concrete DMA implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="940" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="940" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ab2e6f5b465dd6c637971f8f74449d07a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t getFingerSize</definition>
        <argsstring>() const</argsstring>
        <name>getFingerSize</name>
        <briefdescription>
<para>Gets the finger size in pixels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the finger in pixels, 1 is the default value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="780" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="780" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1afbaf61825a1727a7352e669be3a93888" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_frame_buffer_allocator" kindref="compound">FrameBufferAllocator</ref> *</type>
        <definition>FrameBufferAllocator* getFrameBufferAllocator</definition>
        <argsstring>()</argsstring>
        <name>getFrameBufferAllocator</name>
        <briefdescription>
<para>Gets the framebuffer allocator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The framebuffer allocator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="753" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="753" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a35eb6f0a4856e743be6fdbe5f934b8fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4" kindref="member">FrameRefreshStrategy</ref></type>
        <definition>FrameRefreshStrategy getFrameRefreshStrategy</definition>
        <argsstring>() const</argsstring>
        <name>getFrameRefreshStrategy</name>
        <briefdescription>
<para>Used internally by TouchGFX core to manage the timing and process of drawing into the framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current frame refresh strategy.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_h_a_l_1af7ed8f3a817cabfa5fba5f2f44f55bd7" kindref="member">setFrameRefreshStrategy</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="867" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="867" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a64088fc596df92a732dd8cb083454fbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t getLCDRefreshCount</definition>
        <argsstring>()</argsstring>
        <name>getLCDRefreshCount</name>
        <briefdescription>
<para>Returns the number of VSync interrupts between the current drawing operation and the last drawing operation, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>the number of lost frames.</para>
<para><simplesect kind="return"><para>Number of VSync since previous draw. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="474" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a4b0233f623b18fd87d3e387b66ccbde2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t getMCULoadPct</definition>
        <argsstring>() const</argsstring>
        <name>getMCULoadPct</name>
        <briefdescription>
<para>Gets the current MCU load. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>mcuLoadPct the MCU Load in %. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="711" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="711" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1aa8754934c1239c5b1a7c16beda97c97c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>uint16_t</type>
        <definition>virtual uint16_t getTFTCurrentLine</definition>
        <argsstring>()</argsstring>
        <name>getTFTCurrentLine</name>
        <briefdescription>
<para>Get the current line (Y) of the TFT controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to obtain the progress of the TFT controller. More specifically, the line (or Y-value) currently being transferred.</para>
<para>Note: The value must be adjusted to account for vertical back porch before returning, such that the value is always within the range of [0; actual display height in pixels[</para>
<para>It is used for the REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL frame refresh strategy in order to synchronize framebuffer drawing with TFT controller progress. If this strategy is used, the concrete <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> subclass must provide an override of this function that returns correct line value. If this strategy is not used, then the getTFTCurrentLine function is never called and can be disregarded.</para>
<para><simplesect kind="return"><para>In this default implementation, 0xFFFF is returned to signify &quot;not
        implemented&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="929" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="929" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a3bec5c2eaafb5e7b2674dc6720dccf0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>uint16_t *</type>
        <definition>virtual uint16_t* getTFTFrameBuffer</definition>
        <argsstring>() const =0</argsstring>
        <name>getTFTFrameBuffer</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1ae6195e03edb44b7de37d578c2774365c">getTFTFrameBuffer</reimplementedby>
        <briefdescription>
<para>Gets the framebuffer address used by the TFT controller. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The address of the framebuffer currently being displayed on the TFT. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a19d1b16b7fd76c0ecd3cef8ace6a4a89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t getTouchSampleRate</definition>
        <argsstring>() const</argsstring>
        <name>getTouchSampleRate</name>
        <briefdescription>
<para>Gets the number of ticks between each touch screen sample. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of ticks between each touch screen sample. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="663" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="663" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1aff7d430ff97f6eca77cee715afcbcd7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HAL</definition>
        <argsstring>(DMA_Interface &amp;dmaInterface, LCD &amp;display, TouchController &amp;touchCtrl, uint16_t width, uint16_t height)</argsstring>
        <name>HAL</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_d_m_a___interface" kindref="compound">DMA_Interface</ref> &amp;</type>
          <declname>dmaInterface</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> &amp;</type>
          <declname>display</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_touch_controller" kindref="compound">TouchController</ref> &amp;</type>
          <declname>touchCtrl</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Initializes a new instance of the <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dmaInterface</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the DMA interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">display</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">touchCtrl</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the touch controller. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> display, in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> display, in pixels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="44" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="44" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a25a40b6614565f755233080a384c35f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
<para>This function is responsible for initializing the entire framework. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1add7d8e4551e5fb46a8ce656dc5c14190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lockDMAToFrontPorch</definition>
        <argsstring>(bool enableLock)</argsstring>
        <name>lockDMAToFrontPorch</name>
        <param>
          <type>bool</type>
          <declname>enableLock</declname>
        </param>
        <briefdescription>
<para>Function to set whether the DMA transfers are locked to the TFT update cycle. </para>
        </briefdescription>
        <detaileddescription>
<para>If locked, DMA transfer will not begin until the TFT controller has finished updating the display. If not locked, DMA transfers will begin as soon as possible. Default is true (DMA is locked with TFT).</para>
<para>Disabling the lock will in most cases significantly increase rendering performance. It is therefore strongly recommended to disable it. Depending on platform this may in rare cases cause rendering problems (visible tearing on display). Please see the chapter &quot;Optimizing DMA During TFT Controller Access&quot; for details on this setting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enableLock</parametername>
</parameternamelist>
<parameterdescription>
<para>True to lock DMA transfers to the front porch signal. Conservative, default setting. False to disable, which will normally yield substantial performance improvement.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This setting only has effect when using double buffering. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="236" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a58075740e18c8812114dd5082a5074e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint16_t *</type>
        <definition>virtual uint16_t* lockFrameBuffer</definition>
        <argsstring>()</argsstring>
        <name>lockFrameBuffer</name>
        <briefdescription>
<para>Waits for the framebuffer to become available for use (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>not used by DMA transfers).</para>
<para><simplesect kind="return"><para>A pointer to the beginning of the currently used framebuffer.</para>
</simplesect>
<simplesect kind="note"><para>Function blocks until framebuffer is available. Client code MUST call <ref refid="classtouchgfx_1_1_h_a_l_1ad72bdda011be4074fcb5c3009a96e02c" kindref="member">unlockFrameBuffer()</ref> when framebuffer operation has completed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a8ebfd2ba3e6bbca031f49a42638e4033" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void registerEventListener</definition>
        <argsstring>(UIEventListener &amp;listener)</argsstring>
        <name>registerEventListener</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_u_i_event_listener" kindref="compound">UIEventListener</ref> &amp;</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Registers an event handler implementation with the underlying event system. </para>
        </briefdescription>
        <detaileddescription>
<para>The actual <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> implementation decides whether or not multiple <ref refid="classtouchgfx_1_1_u_i_event_listener" kindref="compound">UIEventListener</ref> instances are allowed (including execution order).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a42152550ca952d7c3b149ada5c017ecf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void registerTaskDelayFunction</definition>
        <argsstring>(void(*delayF)(uint16_t))</argsstring>
        <name>registerTaskDelayFunction</name>
        <param>
          <type>void(*)(uint16_t)</type>
          <declname>delayF</declname>
        </param>
        <briefdescription>
<para>Registers a function capable of delaying GUI task execution. </para>
        </briefdescription>
        <detaileddescription>
<para>In order to make use of the <ref refid="classtouchgfx_1_1_h_a_l_1ad68f077a0a024c4ae26d2f5aa6784fe1" kindref="member">HAL::taskDelay</ref> function, a delay function must be registered by calling this function. Usually the delay function would be <ref refid="classtouchgfx_1_1_o_s_wrappers_1a2c50576c6ab3b8362a4bb2fc48822bc7" kindref="member">OSWrappers::taskDelay</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">delayF</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a function returning void with an uint16_t parameter specifying number of milliseconds to delay.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The task delay capability is only used when the frame refresh strategy REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL is selected. Otherwise it is not necessary to register a delay function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="886" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="886" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a4bedab6fe6056b80b124104085ab562c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool sampleKey</definition>
        <argsstring>(uint8_t &amp;key)</argsstring>
        <name>sampleKey</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1a4bedab6fe6056b80b124104085ab562c">sampleKey</reimplementedby>
        <param>
          <type>uint8_t &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Sample external key event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter that will be set to the key value if a keypress was detected.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a keypress was detected and the &quot;key&quot; parameter is set to a value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="536" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="536" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ae6fc10602f19e1dfe07d579939c543ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setAuxiliaryLCD</definition>
        <argsstring>(LCD *auxLCD)</argsstring>
        <name>setAuxiliaryLCD</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> *</type>
          <declname>auxLCD</declname>
        </param>
        <briefdescription>
<para>Set an auxiliary <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> class to be used for offscreen rendering. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">auxLCD</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer on the axiliary <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> class to use for offscreen rendering. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="968" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="968" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a87c1f6c423f7ac101443cce375ea67ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setButtonController</definition>
        <argsstring>(ButtonController *btnCtrl)</argsstring>
        <name>setButtonController</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref> *</type>
          <declname>btnCtrl</declname>
        </param>
        <briefdescription>
<para>Stores a pointer to an instance of a specific implementation of a <ref refid="classtouchgfx_1_1_button_controller" kindref="compound">ButtonController</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">btnCtrl</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to button controller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="721" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="721" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a54f42eaa3650ab0a0e342e0026826fde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void setDisplayOrientation</definition>
        <argsstring>(DisplayOrientation orientation)</argsstring>
        <name>setDisplayOrientation</name>
        <param>
          <type><ref refid="namespacetouchgfx_1a38bd6ad994c4baaac737cf426fbf23ea" kindref="member">DisplayOrientation</ref></type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Sets the desired display orientation (landscape or portrait). </para>
        </briefdescription>
        <detaileddescription>
<para>If desired orientation is different from the native orientation of the display, a rotation is automatically applied. The rotation does not incur any performance cost.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired display orientation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>A screen transition must occur before this takes effect! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="104" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1adcbcf663a587b694756e0551a7ec4a02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setDragThreshold</definition>
        <argsstring>(uint8_t value)</argsstring>
        <name>setDragThreshold</name>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Configure the threshold for reporting drag events. </para>
        </briefdescription>
        <detaileddescription>
<para>A touch input movement must exceed this value in either axis in order to report a drag. Default value is 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New threshold value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Use if touch controller is not completely accurate to avoid &quot;false&quot; drags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="549" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1af2c44c65e38882752f77141bd9eca3f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setFingerSize</definition>
        <argsstring>(uint8_t size)</argsstring>
        <name>setFingerSize</name>
        <param>
          <type>uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the finger size in pixels. </para>
        </briefdescription>
        <detaileddescription>
<para>Setting the finger size to a size of more than 1 pixel will emulate a finger of width and height of 2*(fingersize-1)+1. This can be especially useful when trying to interact with small elements on a high ppi display. The finger size will influence which element is chosen as the point of interaction, when clicking, dragging, ... the display. A number of samples will be drawn from within the finger area and a best matching drawable will be chosen. The best matching algorithm will consider the size of the drawable and the distance from the touch point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the finger. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="770" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="770" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a0082f3c519686ebf9043752a2a6ce2e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setFrameBufferAllocator</definition>
        <argsstring>(FrameBufferAllocator *allocator)</argsstring>
        <name>setFrameBufferAllocator</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_frame_buffer_allocator" kindref="compound">FrameBufferAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Sets a framebuffer allocator. </para>
        </briefdescription>
        <detaileddescription>
<para>The framebuffer allocator is only used in partial framebuffer mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a framebuffer allocator object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="743" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="743" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ad984d2d33fe2d3605b67427e5a34a47d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void setFrameBufferStartAddress</definition>
        <argsstring>(void *adr, uint16_t depth=16, bool useDoubleBuffering=true, bool useAnimationStorage=true)</argsstring>
        <name>setFrameBufferStartAddress</name>
        <param>
          <type>void *</type>
          <declname>adr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>depth</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useDoubleBuffering</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useAnimationStorage</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Sets the address used for framebuffers, usually located in external memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Will reserve memory for one or two framebuffers based on display size. Will optionally also reserve memory for a third framebuffer used for animationStorage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">adr</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting address to use for framebuffers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) Depth of each pixel in bits, default is 16. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useDoubleBuffering</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) If true, reserve memory for an extra framebuffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useAnimationStorage</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) If true, reserve memory for animation storage.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classtouchgfx_1_1_h_a_l_1a2a6fd92626168d79e8346658752027e6" kindref="member">setFrameBufferStartAddresses(void*,void*,void*)</ref> </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="576" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="576" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a2a6fd92626168d79e8346658752027e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void setFrameBufferStartAddresses</definition>
        <argsstring>(void *frameBuffer, void *doubleBuffer, void *animationStorage)</argsstring>
        <name>setFrameBufferStartAddresses</name>
        <param>
          <type>void *</type>
          <declname>frameBuffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>doubleBuffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>animationStorage</declname>
        </param>
        <briefdescription>
<para>Sets framebuffer start addresses. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets individual framebuffer start addresses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frameBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer for framebuffer data, must be non-null. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">doubleBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, buffer for double buffer data. If null double buffering is disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">animationStorage</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the animation storage. If null animation storage is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="621" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="621" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a90f65a787d4a4296655e2434e88c1b6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setFrameRateCompensation</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setFrameRateCompensation</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Enables or disables compensation for lost frames. </para>
        </briefdescription>
        <detaileddescription>
<para>See knowledge base article.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable, false to disable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="484" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1af7ed8f3a817cabfa5fba5f2f44f55bd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool setFrameRefreshStrategy</definition>
        <argsstring>(FrameRefreshStrategy s)</argsstring>
        <name>setFrameRefreshStrategy</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4" kindref="member">FrameRefreshStrategy</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Set a specific strategy for handling timing and mechanism of framebuffer drawing. </para>
        </briefdescription>
        <detaileddescription>
<para>By setting a different frame refresh strategy, the internals of how TouchGFX interacts with the framebuffer can be modified.</para>
<para>Currently there are two strategies available. This will increase over time.<itemizedlist>
<listitem><para>REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL: this strategy is available on targets that use single buffering on a TFT controller based system. It requires an implementation of the <ref refid="classtouchgfx_1_1_h_a_l_1aa8754934c1239c5b1a7c16beda97c97c" kindref="member">getTFTCurrentLine()</ref> function as well as a task delay function being registered. The implementation of this strategy is that TouchGFX will carefully track the progress of the TFT controller, and draw parts of the framebuffer whenever possible. The effect is that the risk of tearing is much reduced compared to the default single buffer strategy of only drawing in porch areas. It does have a drawback of slightly increased MCU load. But in many cases employing this strategy will make it possible to avoid external RAM, by using just a single framebuffer in internal RAM and still avoid tearing.</para>
</listitem><listitem><para>REFRESH_STRATEGY_DEFAULT: This is a general strategy that works for all target configurations.</para>
</listitem></itemizedlist>
</para>
<para>Recommendation: Try using REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL if you&apos;re on a TFT controller based system (ie. non-8080) and you have a desire to avoid external RAM. Otherwise stick to REFRESH_STRATEGY_DEFAULT.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired strategy to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the desired strategy will be used, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="835" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="835" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a4e2c2a8b8af2098feed65c6908547691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMCUActive</definition>
        <argsstring>(bool active)</argsstring>
        <name>setMCUActive</name>
        <param>
          <type>bool</type>
          <declname>active</declname>
        </param>
        <briefdescription>
<para>Register if MCU is active by measuring cpu cycles. </para>
        </briefdescription>
        <detaileddescription>
<para>If user wishes to track MCU load, this method should be called whenever the OS Idle task is scheduled in or out. This method makes calls to a concrete implementation of <ref refid="classtouchgfx_1_1_g_p_i_o" kindref="compound">GPIO</ref> functionality and a concrete implementation of cpu cycles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, MCU is registered as being active, inactive otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a01eb7c98dd3cbc649d63c2e7b295718a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setMCUInstrumentation</definition>
        <argsstring>(MCUInstrumentation *mcuInstr)</argsstring>
        <name>setMCUInstrumentation</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_m_c_u_instrumentation" kindref="compound">MCUInstrumentation</ref> *</type>
          <declname>mcuInstr</declname>
        </param>
        <briefdescription>
<para>Stores a pointer to an instance of an MCU specific instrumentation class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mcuInstr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to MCU instrumentation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="690" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="690" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a61b9ba64014639fbc554a8ea5b0eb3c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setTouchSampleRate</definition>
        <argsstring>(int8_t sampleRateInTicks)</argsstring>
        <name>setTouchSampleRate</name>
        <param>
          <type>int8_t</type>
          <declname>sampleRateInTicks</declname>
        </param>
        <briefdescription>
<para>Sets the number of ticks between each touch screen sample. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampleRateInTicks</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample rate. Default is 1 (every tick). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="650" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="650" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a5e6cf4d44af298d5d01023f51ee4a182" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void signalDMAInterrupt</definition>
        <argsstring>()</argsstring>
        <name>signalDMAInterrupt</name>
        <briefdescription>
<para>Notify the framework that a DMA interrupt has occurred. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="129" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1af79cd7a21af87918ddf1d9f6a1bfc2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void swapFrameBuffers</definition>
        <argsstring>()</argsstring>
        <name>swapFrameBuffers</name>
        <briefdescription>
<para>Swaps the two framebuffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ad68f077a0a024c4ae26d2f5aa6784fe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void taskDelay</definition>
        <argsstring>(uint16_t ms)</argsstring>
        <name>taskDelay</name>
        <param>
          <type>uint16_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Delay GUI task execution by number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This function requires the presence of a task delay function. If a task delay function has not been registered, it returns immediately. Otherwise it returns when number of milliseconds has passed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of milliseconds to wait.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classtouchgfx_1_1_h_a_l_1a42152550ca952d7c3b149ada5c017ecf" kindref="member">registerTaskDelayFunction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="902" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="902" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a41a5803bbaeb702e813fcc2190dfa618" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void taskEntry</definition>
        <argsstring>()</argsstring>
        <name>taskEntry</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1a41a5803bbaeb702e813fcc2190dfa618">taskEntry</reimplementedby>
        <briefdescription>
<para>Main event loop. </para>
        </briefdescription>
        <detaileddescription>
<para>Will wait for VSYNC signal, and then process next frame. Call this function from your GUI task.</para>
<para><simplesect kind="note"><para>This function never returns! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ad72bdda011be4074fcb5c3009a96e02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void unlockFrameBuffer</definition>
        <argsstring>()</argsstring>
        <name>unlockFrameBuffer</name>
        <briefdescription>
<para>Unlocks the framebuffer (MUST be called exactly once for each call to <ref refid="classtouchgfx_1_1_h_a_l_1a58075740e18c8812114dd5082a5074e7" kindref="member">lockFrameBuffer()</ref>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1abb1199249671d4d4777c3012002e4e46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vSync</definition>
        <argsstring>()</argsstring>
        <name>vSync</name>
        <briefdescription>
<para>Called by the VSync interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para>Called by the VSync interrupt for counting of <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> refreshes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="494" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a06a55976707db0ec78f6f18def68caeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~HAL</definition>
        <argsstring>()</argsstring>
        <name>~HAL</name>
        <briefdescription>
<para>Finalizes an instance of the <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="81" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="81" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ae4fa38f01133ea5a21e25449a0432d40" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> *</type>
        <definition>static HAL* getInstance</definition>
        <argsstring>()</argsstring>
        <name>getInstance</name>
        <briefdescription>
<para>Gets the <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="classtouchgfx_1_1_h_a_l" kindref="compound">HAL</ref> instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="90" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a649cc066d589492ce9b6198ec66d9654" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref> &amp;</type>
        <definition>static LCD&amp; lcd</definition>
        <argsstring>()</argsstring>
        <name>lcd</name>
        <briefdescription>
<para>Gets a reference to the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A reference to the <ref refid="classtouchgfx_1_1_l_c_d" kindref="compound">LCD</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="207" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="207" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ae61b1e2b893dcea03977ab8654824f6e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool beginFrame</definition>
        <argsstring>()</argsstring>
        <name>beginFrame</name>
        <briefdescription>
<para>Called when beginning to rendering a frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if rendering can begin, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a16613ef68935ab6966f20192bd9e5ebf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void endFrame</definition>
        <argsstring>()</argsstring>
        <name>endFrame</name>
        <briefdescription>
<para>Called when a rendering pass is completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="995" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1aa4451062ff9146fc50ea3147b77bc88c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t* getClientFrameBuffer</definition>
        <argsstring>()</argsstring>
        <name>getClientFrameBuffer</name>
        <briefdescription>
<para>Gets client framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The address of the framebuffer currently used by the framework to draw in. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1009" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1009" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a1dbae324e9d61cf117ce4f7c9b4c479d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void noTouch</definition>
        <argsstring>()</argsstring>
        <name>noTouch</name>
        <briefdescription>
<para>Called by the touch driver to indicate that no touch is currently detected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1027" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ae02af3c8fab5f0287febd79b6789be9c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void performDisplayOrientationChange</definition>
        <argsstring>()</argsstring>
        <name>performDisplayOrientationChange</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1adf83a370364878003e12747001b1ae22">performDisplayOrientationChange</reimplementedby>
        <briefdescription>
<para>Perform the actual display orientation change. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1030" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="1030" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a831e28238b114d68c64cc8b4d9a2f435" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void setTFTFrameBuffer</definition>
        <argsstring>(uint16_t *address)=0</argsstring>
        <name>setTFTFrameBuffer</name>
        <reimplementedby refid="classtouchgfx_1_1_h_a_l_s_d_l2_1a98806d2a7b0b0093792111195da6e5b7">setTFTFrameBuffer</reimplementedby>
        <param>
          <type>uint16_t *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Sets the framebuffer address used by the TFT controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>New framebuffer address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1002" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a084002a4b3ed4e00a3639ef6dab1f2be" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void tick</definition>
        <argsstring>()</argsstring>
        <name>tick</name>
        <briefdescription>
<para>This function is called at each timer tick, depending on platform implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="985" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1ab7301bee172befade52329bd7e9a188f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void touch</definition>
        <argsstring>(int32_t x, int32_t y)</argsstring>
        <name>touch</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Called by the touch driver to indicate a touch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the touch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the touch. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1024" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a6d065f3f488235f1a8da6114ec9b39c7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t getBitDepth</definition>
        <argsstring>(Bitmap::BitmapFormat format) const</argsstring>
        <name>getBitDepth</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_bitmap_1a23d1a7c7cf0f6da45ca389904e644d55" kindref="member">Bitmap::BitmapFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1094" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a5841751204b6035f8e9895e096e3ac82" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t* getDstAddress</definition>
        <argsstring>(uint16_t x, uint16_t y, uint16_t *startAddress, uint16_t dstWidth, Bitmap::BitmapFormat dstFormat) const</argsstring>
        <name>getDstAddress</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>startAddress</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dstWidth</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_bitmap_1a23d1a7c7cf0f6da45ca389904e644d55" kindref="member">Bitmap::BitmapFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1092" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_h_a_l_1a4bd9ec723f974e37690469aeef55c169" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t* getDstAddress</definition>
        <argsstring>(uint16_t x, uint16_t y, uint16_t *startAddress) const</argsstring>
        <name>getDstAddress</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>startAddress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/hal/HAL.hpp" line="1093" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware Abstraction Layer. </para>
    </briefdescription>
    <detaileddescription>
<para>Contains functions that are specific to the hardware platform the code is running on. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="728">
        <label>HAL</label>
        <link refid="classtouchgfx_1_1_h_a_l"/>
      </node>
      <node id="729">
        <label>HALSDL2</label>
        <link refid="classtouchgfx_1_1_h_a_l_s_d_l2"/>
        <childnode refid="728" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="731">
        <label>Rect</label>
        <link refid="classtouchgfx_1_1_rect"/>
      </node>
      <node id="740">
        <label>MCUInstrumentation</label>
        <link refid="classtouchgfx_1_1_m_c_u_instrumentation"/>
      </node>
      <node id="733">
        <label>DMA_Interface</label>
        <link refid="classtouchgfx_1_1_d_m_a___interface"/>
        <childnode refid="734" relation="usage">
          <edgelabel>queue</edgelabel>
        </childnode>
      </node>
      <node id="736">
        <label>Gestures</label>
        <link refid="classtouchgfx_1_1_gestures"/>
      </node>
      <node id="730">
        <label>HAL</label>
        <link refid="classtouchgfx_1_1_h_a_l"/>
        <childnode refid="731" relation="usage">
          <edgelabel>partialFrameBufferRect</edgelabel>
        </childnode>
        <childnode refid="732" relation="usage">
          <edgelabel>frameBufferAllocator</edgelabel>
        </childnode>
        <childnode refid="733" relation="usage">
          <edgelabel>dma</edgelabel>
        </childnode>
        <childnode refid="735" relation="usage">
          <edgelabel>touchController</edgelabel>
        </childnode>
        <childnode refid="736" relation="usage">
          <edgelabel>gestures</edgelabel>
        </childnode>
        <childnode refid="737" relation="usage">
          <edgelabel>lcdRef</edgelabel>
          <edgelabel>auxiliaryLCD</edgelabel>
        </childnode>
        <childnode refid="739" relation="usage">
          <edgelabel>buttonController</edgelabel>
        </childnode>
        <childnode refid="740" relation="usage">
          <edgelabel>mcuInstrumentation</edgelabel>
        </childnode>
      </node>
      <node id="737">
        <label>LCD</label>
        <link refid="classtouchgfx_1_1_l_c_d"/>
        <childnode refid="738" relation="usage">
          <edgelabel>defaultColor</edgelabel>
        </childnode>
      </node>
      <node id="735">
        <label>TouchController</label>
        <link refid="classtouchgfx_1_1_touch_controller"/>
      </node>
      <node id="739">
        <label>ButtonController</label>
        <link refid="classtouchgfx_1_1_button_controller"/>
      </node>
      <node id="734">
        <label>DMA_Queue</label>
        <link refid="classtouchgfx_1_1_d_m_a___queue"/>
      </node>
      <node id="732">
        <label>FrameBufferAllocator</label>
        <link refid="classtouchgfx_1_1_frame_buffer_allocator"/>
      </node>
      <node id="738">
        <label>colortype</label>
        <link refid="structtouchgfx_1_1colortype"/>
      </node>
    </collaborationgraph>
    <location file="touchgfx/hal/HAL.hpp" line="33" column="1" bodyfile="touchgfx/hal/HAL.hpp" bodystart="32" bodyend="1095"/>
    <listofallmembers>
      <member refid="classtouchgfx_1_1_h_a_l_1a705c80beba28778e2399d45f6ed97eb9" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>allowDMATransfers</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1af0c77c8827957c2d15397234aea724f6" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>auxiliaryLCD</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ae26fd1525f3ede94d9cff4c11c3cb423" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>backPorchExited</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ae61b1e2b893dcea03977ab8654824f6e" prot="protected" virt="virtual"><scope>touchgfx::HAL</scope><name>beginFrame</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ac8dbf97679e73e73955e2ecd45109ae8" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>blitCopy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a6ff0a8b2198a0aa836bcff822d1df26e" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>blitCopy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1af3fbd84308b86fe2b5392637f6ce505a" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>blitCopy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a3d7d4d8a67422bfc45100ea70441e6c1" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>blitCopyARGB8888</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a6a9d5dd2bec5e01051b5524ff452a82a" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>blitCopyGlyph</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a9a0c19d1a1246b6086e12f61c1f933e5" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>blitFill</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a8a7bc42ad95131aa18e017605a0fedc9" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>blitFill</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a4f53c9928e6d17edbb6382461ea60a43" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>blockCopy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a10e22c3440b3719c6ab6603469c17083" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>buttonController</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a4697bffac2cbfd7e78af30e37c6322cb" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>cc_begin</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1aa35cae78a70ca752b38af7ce649b5a8f" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>clientDirty</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a899e0d32497b51e5483064565623156f" prot="public" virt="pure-virtual"><scope>touchgfx::HAL</scope><name>configureInterrupts</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a01a26dc295915296613e39a1f38abf2b" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>configurePartialFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1be4b79cccbf907115e5ce6075759b80" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>copyFBRegionToMemory</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a8547506d89d884bcd2039241a5805c06" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>copyFBRegionToMemory</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1fbc52b8a6598c3a3183e79ab7b18021" prot="public" virt="pure-virtual"><scope>touchgfx::HAL</scope><name>disableInterrupts</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a88f14e4aa8756798bf97845274e8614d" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>DISPLAY_HEIGHT</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a687a54fff313039e31edc57eb1781297" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>DISPLAY_ROTATION</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a69caf4e3dd9e447013bc0d95dc00b29e" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>DISPLAY_WIDTH</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a21a9ba1a73cf60fed3cc68fde420a739" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>displayOrientationChangeRequested</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a05a11ff786f8aba513c4393cddef4dee" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>dma</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a666d501b1cf9ac91dc6dc6e78e7f0e28" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>drawDrawableInDynamicBitmap</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a661a7afd508167ec028cb97320bce2c6" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>drawDrawableInDynamicBitmap</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a2202c8be3809f3abde2c823e7d4241f5" prot="public" virt="pure-virtual"><scope>touchgfx::HAL</scope><name>enableInterrupts</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1d84dc0c997642bd476853aefb6446a8" prot="public" virt="pure-virtual"><scope>touchgfx::HAL</scope><name>enableLCDControllerInterrupt</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7f93a2214fa1982c6f5ff3a1ed9ef77c" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>enableMCULoadCalculation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a16613ef68935ab6966f20192bd9e5ebf" prot="protected" virt="virtual"><scope>touchgfx::HAL</scope><name>endFrame</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a55d4a3b2e3954954ac0bde7a1572d3c5" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>fingerSize</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a0f0005b02d82995ee28c1c7895a15a89" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>flushDMA</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a93dfbddf2eff9ce1d0fd1bf2a89e5028" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>flushFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1af7803460ef14e8d4a4731d40a9f4c57f" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>flushFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a65190cd2f6af334e630f8e1d33783542" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>FRAME_BUFFER_HEIGHT</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ac405941b35fb55f1635ab2804f60f08e" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>FRAME_BUFFER_WIDTH</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ac66e3b19235b43dbe16f9bef92d8c091" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>frameBuffer0</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7a5e0d2d006904d52da083c421645ab9" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>frameBuffer1</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1a28230b1ddebca275d51d72f356bd2b" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>frameBuffer2</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1adf80c809ef5619c1f049673cfead6e51" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>frameBufferAllocator</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ae3e79adce0f20f90e6ed0841ac5808bc" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>frameBufferUpdatedThisFrame</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>FrameRefreshStrategy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1a6717e9770ad606ffe0c2276427f0f7" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>frontPorchEntered</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a13b276fe6aeb77874d05a66cc27eb8ea" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>gestures</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7c4974317fa357a72aadb65cf8df894e" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getAnimationStorage</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a0f618e37f375c87dddb612788df3324c" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getAuxiliaryLCD</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a6d065f3f488235f1a8da6114ec9b39c7" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getBitDepth</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1aa76b900e4b59cdff7bb1892030c266fe" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>getBlitCaps</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a3824270ab45fd63e637a1f6199c2bda6" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getButtonController</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1aa4451062ff9146fc50ea3147b77bc88c" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getClientFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1cf8b1899b19f8e52e86fe4006531e9a" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getCPUCycles</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ad0f6ee4f84ab0f5a09f9d198e3bdf14d" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getDisplayHeight</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a9724a2c9e9763c751266320a8890cb80" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getDisplayOrientation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a939eadd59671da1da21f6a729df6f611" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getDisplayWidth</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a3bf3fd3047dfb9b99f89edd6f9d659f8" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>getDMAType</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a5841751204b6035f8e9895e096e3ac82" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getDstAddress</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a4bd9ec723f974e37690469aeef55c169" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getDstAddress</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ab2e6f5b465dd6c637971f8f74449d07a" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getFingerSize</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1afbaf61825a1727a7352e669be3a93888" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getFrameBufferAllocator</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a35eb6f0a4856e743be6fdbe5f934b8fb" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getFrameRefreshStrategy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ae4fa38f01133ea5a21e25449a0432d40" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getInstance</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a64088fc596df92a732dd8cb083454fbe" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getLCDRefreshCount</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a4b0233f623b18fd87d3e387b66ccbde2" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getMCULoadPct</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1aa8754934c1239c5b1a7c16beda97c97c" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>getTFTCurrentLine</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a3bec5c2eaafb5e7b2674dc6720dccf0e" prot="public" virt="pure-virtual"><scope>touchgfx::HAL</scope><name>getTFTFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a19d1b16b7fd76c0ecd3cef8ace6a4a89" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>getTouchSampleRate</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1aff7d430ff97f6eca77cee715afcbcd7e" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>HAL</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a25a40b6614565f755233080a384c35f1" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>initialize</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a8827c1b512625911efaebdc9549b9107" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>instance</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a9f832b80ca0857bc38fca999ddd9d7b0" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>isDrawing</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a6ff4d714082c99811dd8b4986e89d280" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>lastTouched</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a27f46bc82b854ed478bca4eedfa67112" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>lastX</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a5560173de73e637031ddd3722575ff54" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>lastY</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a649cc066d589492ce9b6198ec66d9654" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>lcd</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1aca20e801cb9562eb4da3a028b5cad0cb" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>lcdRef</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7e933b682dcad07bafc6595e3b004018" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>listener</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1add7d8e4551e5fb46a8ce656dc5c14190" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>lockDMAToFrontPorch</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a70d9d7d6a38d3c1d6856319f6fa6e1a4" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>lockDMAToPorch</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a58075740e18c8812114dd5082a5074e7" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>lockFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a859883064e961e58224109bd208ae314" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>mcuInstrumentation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ab3fa5c6eea56337e8edc676eedf4c93b" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>mcuLoadPct</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a123c63e538589b1f208fcd41067b5514" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>nativeDisplayOrientation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1dbae324e9d61cf117ce4f7c9b4c479d" prot="protected" virt="virtual"><scope>touchgfx::HAL</scope><name>noTouch</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a89f3f06692914977fdc5a9d8e494c668" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>partialFrameBufferRect</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ae02af3c8fab5f0287febd79b6789be9c" prot="protected" virt="virtual"><scope>touchgfx::HAL</scope><name>performDisplayOrientationChange</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4a3c95f830eb73d08211afe676080d18b5" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>REFRESH_STRATEGY_DEFAULT</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4ab08914e9037d6b98fb2606a4483ed8a0" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a7f86838885c94deaae0ddbf8efab2cf4ad6eaee7a49c2ae7399ac220c1055ebdb" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1adcf247597bbd8b4cf7bb1644be325d8d" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>refreshStrategy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a8ebfd2ba3e6bbca031f49a42638e4033" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>registerEventListener</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a42152550ca952d7c3b149ada5c017ecf" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>registerTaskDelayFunction</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ac916c122d68d5e027a9809014fa2b8a1" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>requestedOrientation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a4bedab6fe6056b80b124104085ab562c" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>sampleKey</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ae6fc10602f19e1dfe07d579939c543ed" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setAuxiliaryLCD</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a87c1f6c423f7ac101443cce375ea67ae" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setButtonController</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a54f42eaa3650ab0a0e342e0026826fde" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>setDisplayOrientation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1adcbcf663a587b694756e0551a7ec4a02" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setDragThreshold</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1af2c44c65e38882752f77141bd9eca3f4" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setFingerSize</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a0082f3c519686ebf9043752a2a6ce2e7" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setFrameBufferAllocator</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ad984d2d33fe2d3605b67427e5a34a47d" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>setFrameBufferStartAddress</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a2a6fd92626168d79e8346658752027e6" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>setFrameBufferStartAddresses</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a90f65a787d4a4296655e2434e88c1b6d" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setFrameRateCompensation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1af7ed8f3a817cabfa5fba5f2f44f55bd7" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setFrameRefreshStrategy</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a4e2c2a8b8af2098feed65c6908547691" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setMCUActive</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a01eb7c98dd3cbc649d63c2e7b295718a" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setMCUInstrumentation</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a831e28238b114d68c64cc8b4d9a2f435" prot="protected" virt="pure-virtual"><scope>touchgfx::HAL</scope><name>setTFTFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a61b9ba64014639fbc554a8ea5b0eb3c7" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>setTouchSampleRate</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a5e6cf4d44af298d5d01023f51ee4a182" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>signalDMAInterrupt</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1af79cd7a21af87918ddf1d9f6a1bfc2c1" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>swapFrameBuffers</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a3200e2e7bc1b7a63939b030805ca57ed" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>swapRequested</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ad68f077a0a024c4ae26d2f5aa6784fe1" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>taskDelay</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1c6b454fcb5302c60165c03cb53e05e6" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>taskDelayFunc</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a41a5803bbaeb702e813fcc2190dfa618" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>taskEntry</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a084002a4b3ed4e00a3639ef6dab1f2be" prot="protected" virt="virtual"><scope>touchgfx::HAL</scope><name>tick</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ab7301bee172befade52329bd7e9a188f" prot="protected" virt="virtual"><scope>touchgfx::HAL</scope><name>touch</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a1b7a962e3c313381b64ba5c8102733db" prot="protected" virt="non-virtual"><scope>touchgfx::HAL</scope><name>touchController</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ace680928a2a93f289c9781a73dec6745" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>touchSampleRate</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ad72bdda011be4074fcb5c3009a96e02c" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>unlockFrameBuffer</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a5e2c782e86c8b997957703bcc160fbaf" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>updateMCULoad</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a0638787ef3286032a7e7ac67d53c1d61" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>USE_ANIMATION_STORAGE</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a713a93a66c418e8221fe9341bb1858e4" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>USE_DOUBLE_BUFFERING</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a06101e7fb97be03e4d0f6f30fc697aea" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>useAuxiliaryLCD</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1abb1199249671d4d4777c3012002e4e46" prot="public" virt="non-virtual"><scope>touchgfx::HAL</scope><name>vSync</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1ae53541b4559ba9b6076854727bd9fab2" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>vSyncCnt</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a01472300b011d4e311d65f91a7c16143" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>vSyncCompensationEnabled</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a2e984a1dfd05337e2219121c597663de" prot="private" virt="non-virtual"><scope>touchgfx::HAL</scope><name>vSyncForFrame</name></member>
      <member refid="classtouchgfx_1_1_h_a_l_1a06a55976707db0ec78f6f18def68caeb" prot="public" virt="virtual"><scope>touchgfx::HAL</scope><name>~HAL</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
