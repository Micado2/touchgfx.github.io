<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classtouchgfx_1_1_screen" kind="class" language="C++" prot="public">
    <compoundname>touchgfx::Screen</compoundname>
    <derivedcompoundref refid="classtouchgfx_1_1_view" prot="public" virt="non-virtual">View&lt; T &gt;</derivedcompoundref>
    <includes local="no">Screen.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_screen_1a32a4ee533403291992a44e952d2aabe7" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_container" kindref="compound">Container</ref></type>
        <definition>Container container</definition>
        <argsstring></argsstring>
        <name>container</name>
        <briefdescription>
<para>The container contains the contents of the screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="207" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_screen_1ab412a8eb66a99ffc26c5d3b1ead3f57b" prot="protected" static="no" mutable="no">
        <type><ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> *</type>
        <definition>Drawable* focus</definition>
        <argsstring></argsstring>
        <name>focus</name>
        <briefdescription>
<para>The drawable currently in focus (set when DOWN_PRESSED is received). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="210" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtouchgfx_1_1_screen_1a230c2646bb296cf0008568e35fb7c0e6" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t fingerAdjustmentX</definition>
        <argsstring></argsstring>
        <name>fingerAdjustmentX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="213" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_screen_1a808e130fc4fd0d84d02a3d38d78f8139" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t fingerAdjustmentY</definition>
        <argsstring></argsstring>
        <name>fingerAdjustmentY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="214" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtouchgfx_1_1_screen_1ade0ee4cf0d2b87cc29f666431822925f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool useSMOC</definition>
        <argsstring></argsstring>
        <name>useSMOC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="215" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a308eab3a01440c35ab204cbb6f6a5fe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void afterTransition</definition>
        <argsstring>()</argsstring>
        <name>afterTransition</name>
        <briefdescription>
<para>Called by <ref refid="classtouchgfx_1_1_application_1a1af635cee0f186c3d0fcea60bac14355" kindref="member">Application::handleTickEvent()</ref> when the transition to the screen is done. </para>
        </briefdescription>
        <detaileddescription>
<para>Base version does nothing, but override to do screen specific initialization code that has to be done after the transition to the screen.</para>
<para><simplesect kind="see"><para><ref refid="classtouchgfx_1_1_application_1a1af635cee0f186c3d0fcea60bac14355" kindref="member">Application::handleTickEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="93" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a7a8ad1a2e43c28cb3ac5741c40f3df69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bindTransition</definition>
        <argsstring>(Transition &amp;trans)</argsstring>
        <name>bindTransition</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_transition" kindref="compound">Transition</ref> &amp;</type>
          <declname>trans</declname>
        </param>
        <briefdescription>
<para>Enables the transition to access the containers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">trans</parametername>
</parameternamelist>
<parameterdescription>
<para>The transition to bind. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a56c5cf8a568cff737ff95520cbe6b405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw</definition>
        <argsstring>()</argsstring>
        <name>draw</name>
        <briefdescription>
<para>Tells the screen to draw its entire area. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The more specific draw(<ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref>&amp;) version is preferred when possible. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a65fd8d8e7e3f7bbca6ad03b5347564d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void draw</definition>
        <argsstring>(Rect &amp;rect)</argsstring>
        <name>draw</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Tell the screen to draw the specified area. </para>
        </briefdescription>
        <detaileddescription>
<para>Will traverse the drawables tree from in z-order and delegate draw to them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in absolute coordinates.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The given rect must be in absolute coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a8179c2b21809a78e9436c3fe4aa57341" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtouchgfx_1_1_container" kindref="compound">Container</ref> &amp;</type>
        <definition>Container&amp; getRootContainer</definition>
        <argsstring>()</argsstring>
        <name>getRootContainer</name>
        <briefdescription>
<para>Obtain a reference to the root container of this screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The root container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="169" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a7f1524b90bc90e5f6cf7ee47aae12123" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleClickEvent</definition>
        <argsstring>(const ClickEvent &amp;evt)</argsstring>
        <name>handleClickEvent</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_click_event" kindref="compound">ClickEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
<para>Traverse the drawables in reverse z-order and notify them of a click event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a06ae1946b2124cc94e26cfe18728debf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleDragEvent</definition>
        <argsstring>(const DragEvent &amp;evt)</argsstring>
        <name>handleDragEvent</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_drag_event" kindref="compound">DragEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
<para>Traverse the drawables in reverse z-order and notify them of a drag event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a4db4945ecbc2303bf860e082409b8029" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void handleGestureEvent</definition>
        <argsstring>(const GestureEvent &amp;evt)</argsstring>
        <name>handleGestureEvent</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_gesture_event" kindref="compound">GestureEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
<para>Handle gestures. </para>
        </briefdescription>
        <detaileddescription>
<para>Traverses drawables in reverse-z and notifies them of the gesture.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a88a50b9c2623caa4cfa291b270e6c479" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void handleKeyEvent</definition>
        <argsstring>(uint8_t key)</argsstring>
        <name>handleKeyEvent</name>
        <param>
          <type>uint8_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Called by the <ref refid="classtouchgfx_1_1_application" kindref="compound">Application</ref> on the reception of a &quot;key&quot;, the meaning of which is platform/application specific. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="143" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a1af635cee0f186c3d0fcea60bac14355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void handleTickEvent</definition>
        <argsstring>()</argsstring>
        <name>handleTickEvent</name>
        <briefdescription>
<para>Called by the <ref refid="classtouchgfx_1_1_application" kindref="compound">Application</ref> on the current screen with a frequency of <ref refid="classtouchgfx_1_1_application_1a160d7a6f71ed82ae7bd81307c0cb5149" kindref="member">Application::TICK_INTERVAL_MS</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="133" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a82e9e9d81943af63c12827613bd2016d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JSMOC</definition>
        <argsstring>(const Rect &amp;invalidatedArea, Drawable *widgetToDraw)</argsstring>
        <name>JSMOC</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref> &amp;</type>
          <declname>invalidatedArea</declname>
        </param>
        <param>
          <type><ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> *</type>
          <declname>widgetToDraw</declname>
        </param>
        <briefdescription>
<para>Recursive JSMOC function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the actual occlusion culling implementation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">invalidatedArea</parametername>
</parameternamelist>
<parameterdescription>
<para>The area to redraw, expressed in absolute coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">widgetToDraw</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtouchgfx_1_1_widget" kindref="compound">Widget</ref> currently being drawn.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>JSMOC is an abbreviation of <emphasis>Jesper, S<oslash/>ren &amp; Martin&apos;s Occlusion Culling</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a261bb3958a10afdccc74310bfe1d387d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Screen</definition>
        <argsstring>()</argsstring>
        <name>Screen</name>
        <briefdescription>
<para>Initializes a new instance of the <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a3ab5a59e45c227501564dd65bbf1ea60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void setupScreen</definition>
        <argsstring>()</argsstring>
        <name>setupScreen</name>
        <briefdescription>
<para>Called by <ref refid="classtouchgfx_1_1_application_1a5d470cf8b4d40671ec384d7ab7ff34ad" kindref="member">Application::switchScreen()</ref> when this screen is going to be displayed. </para>
        </briefdescription>
        <detaileddescription>
<para>Base version does nothing, but place any screen specific initialization code in an overridden version.</para>
<para><simplesect kind="see"><para><ref refid="classtouchgfx_1_1_application_1a5d470cf8b4d40671ec384d7ab7ff34ad" kindref="member">Application::switchScreen</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="82" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a8d0750433f6736304a72e2ae538bcd07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void startSMOC</definition>
        <argsstring>(const Rect &amp;invalidatedArea)</argsstring>
        <name>startSMOC</name>
        <param>
          <type>const <ref refid="classtouchgfx_1_1_rect" kindref="compound">Rect</ref> &amp;</type>
          <declname>invalidatedArea</declname>
        </param>
        <briefdescription>
<para>Starts a JSMOC run, analyzing what parts of what widgets should be redrawn. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">invalidatedArea</parametername>
</parameternamelist>
<parameterdescription>
<para>The area to redraw, expressed in absolute coordinates.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>SMOC is an abbreviation of <emphasis>S<oslash/>ren &amp; Martin&apos;s Occlusion Culling</emphasis>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a7d248bef58f0d09a34be9541e0a67634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void tearDownScreen</definition>
        <argsstring>()</argsstring>
        <name>tearDownScreen</name>
        <briefdescription>
<para>Called by <ref refid="classtouchgfx_1_1_application_1a5d470cf8b4d40671ec384d7ab7ff34ad" kindref="member">Application::switchScreen()</ref> when this screen will no longer be displayed. </para>
        </briefdescription>
        <detaileddescription>
<para>Base version does nothing, but place any screen specific cleanup code in an overridden version.</para>
<para><simplesect kind="see"><para><ref refid="classtouchgfx_1_1_application_1a5d470cf8b4d40671ec384d7ab7ff34ad" kindref="member">touchgfx::Application::switchScreen</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="104" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a74b34acc720ee5a628da9453005ef9af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool usingSMOC</definition>
        <argsstring>() const</argsstring>
        <name>usingSMOC</name>
        <briefdescription>
<para>Determines if using JSMOC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this screen uses the JSMOC drawing algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="152" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1af619ef90f83b17ddf512dee76ff7928d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~Screen</definition>
        <argsstring>()</argsstring>
        <name>~Screen</name>
        <briefdescription>
<para>Finalizes an instance of the <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="35" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="35" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1afcad4ee6a1f963058f3d9bd41b975d6c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void add</definition>
        <argsstring>(Drawable &amp;d)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Add a drawable to the content container. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Must not be called with a <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> that was already added to the screen. If in doubt, call <ref refid="classtouchgfx_1_1_screen_1a0269f5d1a532a70da001934f8fe98c0b" kindref="member">remove()</ref> first. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="191" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a0269f5d1a532a70da001934f8fe98c0b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void remove</definition>
        <argsstring>(Drawable &amp;d)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Removes a drawable from the content container. </para>
        </briefdescription>
        <detaileddescription>
<para>Safe to call even if the drawable was never added (in which case nothing happens).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtouchgfx_1_1_drawable" kindref="compound">Drawable</ref> to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="202" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classtouchgfx_1_1_screen_1a787858e36336ba2391ce0df2b9496f93" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void useSMOCDrawing</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>useSMOCDrawing</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Determines whether to use JSMOC or painter&apos;s algorithm for drawing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>true if JSMOC should be enabled, false if disabled (meaning painter&apos;s algorithm is employed instead). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="touchgfx/Screen.hpp" line="181" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> represents a full-screen drawable area. </para>
    </briefdescription>
    <detaileddescription>
<para>Applications create specific screens by subclassing this class. Each <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> has a root container to which drawables are added. The <ref refid="classtouchgfx_1_1_screen" kindref="compound">Screen</ref> makes sure to delegate draw requests and various events to the appropriate drawables in correct order. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1362">
        <label>View&lt; T &gt;</label>
        <link refid="classtouchgfx_1_1_view"/>
        <childnode refid="1361" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1361">
        <label>Screen</label>
        <link refid="classtouchgfx_1_1_screen"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1366">
        <label>Container</label>
        <link refid="classtouchgfx_1_1_container"/>
        <childnode refid="1364" relation="public-inheritance">
        </childnode>
        <childnode refid="1364" relation="usage">
          <edgelabel>firstChild</edgelabel>
        </childnode>
      </node>
      <node id="1365">
        <label>Rect</label>
        <link refid="classtouchgfx_1_1_rect"/>
      </node>
      <node id="1364">
        <label>Drawable</label>
        <link refid="classtouchgfx_1_1_drawable"/>
        <childnode refid="1365" relation="usage">
          <edgelabel>rect</edgelabel>
        </childnode>
        <childnode refid="1364" relation="usage">
          <edgelabel>nextSibling</edgelabel>
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="1363">
        <label>Screen</label>
        <link refid="classtouchgfx_1_1_screen"/>
        <childnode refid="1364" relation="usage">
          <edgelabel>focus</edgelabel>
        </childnode>
        <childnode refid="1366" relation="usage">
          <edgelabel>container</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="touchgfx/Screen.hpp" line="29" column="1" bodyfile="touchgfx/Screen.hpp" bodystart="28" bodyend="216"/>
    <listofallmembers>
      <member refid="classtouchgfx_1_1_screen_1afcad4ee6a1f963058f3d9bd41b975d6c" prot="protected" virt="non-virtual"><scope>touchgfx::Screen</scope><name>add</name></member>
      <member refid="classtouchgfx_1_1_screen_1a308eab3a01440c35ab204cbb6f6a5fe7" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>afterTransition</name></member>
      <member refid="classtouchgfx_1_1_screen_1a7a8ad1a2e43c28cb3ac5741c40f3df69" prot="public" virt="non-virtual"><scope>touchgfx::Screen</scope><name>bindTransition</name></member>
      <member refid="classtouchgfx_1_1_screen_1a32a4ee533403291992a44e952d2aabe7" prot="protected" virt="non-virtual"><scope>touchgfx::Screen</scope><name>container</name></member>
      <member refid="classtouchgfx_1_1_screen_1a56c5cf8a568cff737ff95520cbe6b405" prot="public" virt="non-virtual"><scope>touchgfx::Screen</scope><name>draw</name></member>
      <member refid="classtouchgfx_1_1_screen_1a65fd8d8e7e3f7bbca6ad03b5347564d9" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>draw</name></member>
      <member refid="classtouchgfx_1_1_screen_1a230c2646bb296cf0008568e35fb7c0e6" prot="private" virt="non-virtual"><scope>touchgfx::Screen</scope><name>fingerAdjustmentX</name></member>
      <member refid="classtouchgfx_1_1_screen_1a808e130fc4fd0d84d02a3d38d78f8139" prot="private" virt="non-virtual"><scope>touchgfx::Screen</scope><name>fingerAdjustmentY</name></member>
      <member refid="classtouchgfx_1_1_screen_1ab412a8eb66a99ffc26c5d3b1ead3f57b" prot="protected" virt="non-virtual"><scope>touchgfx::Screen</scope><name>focus</name></member>
      <member refid="classtouchgfx_1_1_screen_1a8179c2b21809a78e9436c3fe4aa57341" prot="public" virt="non-virtual"><scope>touchgfx::Screen</scope><name>getRootContainer</name></member>
      <member refid="classtouchgfx_1_1_screen_1a7f1524b90bc90e5f6cf7ee47aae12123" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>handleClickEvent</name></member>
      <member refid="classtouchgfx_1_1_screen_1a06ae1946b2124cc94e26cfe18728debf" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>handleDragEvent</name></member>
      <member refid="classtouchgfx_1_1_screen_1a4db4945ecbc2303bf860e082409b8029" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>handleGestureEvent</name></member>
      <member refid="classtouchgfx_1_1_screen_1a88a50b9c2623caa4cfa291b270e6c479" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>handleKeyEvent</name></member>
      <member refid="classtouchgfx_1_1_screen_1a1af635cee0f186c3d0fcea60bac14355" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>handleTickEvent</name></member>
      <member refid="classtouchgfx_1_1_screen_1a82e9e9d81943af63c12827613bd2016d" prot="public" virt="non-virtual"><scope>touchgfx::Screen</scope><name>JSMOC</name></member>
      <member refid="classtouchgfx_1_1_screen_1a0269f5d1a532a70da001934f8fe98c0b" prot="protected" virt="non-virtual"><scope>touchgfx::Screen</scope><name>remove</name></member>
      <member refid="classtouchgfx_1_1_screen_1a261bb3958a10afdccc74310bfe1d387d" prot="public" virt="non-virtual"><scope>touchgfx::Screen</scope><name>Screen</name></member>
      <member refid="classtouchgfx_1_1_screen_1a3ab5a59e45c227501564dd65bbf1ea60" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>setupScreen</name></member>
      <member refid="classtouchgfx_1_1_screen_1a8d0750433f6736304a72e2ae538bcd07" prot="public" virt="non-virtual"><scope>touchgfx::Screen</scope><name>startSMOC</name></member>
      <member refid="classtouchgfx_1_1_screen_1a7d248bef58f0d09a34be9541e0a67634" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>tearDownScreen</name></member>
      <member refid="classtouchgfx_1_1_screen_1ade0ee4cf0d2b87cc29f666431822925f" prot="private" virt="non-virtual"><scope>touchgfx::Screen</scope><name>useSMOC</name></member>
      <member refid="classtouchgfx_1_1_screen_1a787858e36336ba2391ce0df2b9496f93" prot="protected" virt="non-virtual"><scope>touchgfx::Screen</scope><name>useSMOCDrawing</name></member>
      <member refid="classtouchgfx_1_1_screen_1a74b34acc720ee5a628da9453005ef9af" prot="public" virt="non-virtual"><scope>touchgfx::Screen</scope><name>usingSMOC</name></member>
      <member refid="classtouchgfx_1_1_screen_1af619ef90f83b17ddf512dee76ff7928d" prot="public" virt="virtual"><scope>touchgfx::Screen</scope><name>~Screen</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
