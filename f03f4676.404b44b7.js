(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{239:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(1),o=n(9),i=(n(0),n(254)),r=n(255),l=(n(268),n(265),n(269),n(264),{id:"TouchGFXHALDevelopmentScenarios",title:"LTDC/Parallel RGB"}),c={id:"Development/TouchGFXHALDevelopment/TouchGFXHALDevelopmentScenarios",title:"LTDC/Parallel RGB",description:"import Figure from '@site/components/Figure';\r",source:"@site/docs\\Development\\TouchGFXHALDevelopment\\scenarios.mdx",permalink:"/docs/Development/TouchGFXHALDevelopment/TouchGFXHALDevelopmentScenarios",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/Development/TouchGFXHALDevelopment/scenarios/TouchGFXHALDevelopmentScenariosIntro"},next:{title:"FMC / Intel 8080",permalink:"/docs/Development/TouchGFXHALDevelopment/scenarios/TouchGFXHALDevelopmentScenariosFMC"}},s=[{value:"Generator",id:"generator",children:[]},{value:"Main",id:"main",children:[]}],p={rightToc:s},h="wrapper";function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)(h,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)(r.a,{imageSource:"/img/Development/TouchGFXHALDevelopment/activities_selected_002.png",caption:"Project activity",noShadow:!0,mdxType:"Figure"}),Object(i.b)("p",null,"For STM32F4 and STM32F7 MCUs with a TFT controller, the TouchGFX Generator can provide the parts of the HAL that interface with the LTDC and also signals ",Object(i.b)("inlineCode",{parentName:"p"},"OSWrappers::signalVSync()")," to unblock the TouchGFX Engine rendering cycle (REF)."),Object(i.b)("p",null,"The following code is an example of an LTDC driver for STM32F746 that provides an interrupt on both entering and exiting the active area. It provides the external signal that unblocks the TouchGFX Engine render cycle, it calls the ",Object(i.b)("inlineCode",{parentName:"p"},"GPIO")," interface to visualize the frequency of the signal."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),'extern "C"\n__irq void LTDC_IRQHandler(void)\n{\n    if (LTDC->ISR & 1)\n    {\n        LTDC->ICR = 1;\n        if (LTDC->LIPCR == (LTDC->AWCR & 0x7FF) - 1)\n        {\n            //entering active area\n            LTDC->LIPCR = lcd_int_porch_line;\n            OSWrappers::signalVSync();\n        }\n        else\n        {\n            //exiting active area\n            LTDC->LIPCR = (LTDC->BPCR & 0x7FF) - 1;\n        }\n    }\n}\n')),Object(i.b)("h3",{id:"generator"},"Generator"),Object(i.b)("p",null,'For Parallel RGB (LTDC) to be a selectable option the LTDC must be enabled from the "Multimedia" group in the CubeMX category list.'),Object(i.b)(r.a,{noShadow:!0,imageSource:"/img/Development/TouchGFXHALDevelopment/Generator/display_if_options.png",caption:"<Figure X - >",mdxType:"Figure"}),Object(i.b)("p",null,"Once enabled, Parallel RGB (LTDC)\xa0becomes available:"),Object(i.b)(r.a,{noShadow:!0,imageSource:"/img/Development/TouchGFXHALDevelopment/Generator/ltdc_modes.png",caption:"<Figure X - >",mdxType:"Figure"}),Object(i.b)(r.a,{noShadow:!0,imageSource:"/img/Development/TouchGFXHALDevelopment/Generator/dependencies.png",caption:"<Figure X - >",mdxType:"Figure"}),Object(i.b)("p",null,"Notice the following list of dependencies:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Unsupported pixel format")," - The framebuffer drivers of TouchGFX are only available in RGB565 (16-bit) and RGB888 (24-bit). The pixel format of the LTDC must match the chosen driver for the TouchGFX HAL."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Additional layers configured")," - TouchGFX is only capable of utilizing a single layer. While two layers can be used in TouchGFX applications this is just a warning to the user that the LTDC is potentially misconfigured."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Alpha Constant is 0")," - By default, the alpha constant of LTDC layers is 0. This should be > 0 and preferably 255 unless there is an intent to have a global alpha at all times in an application.")),Object(i.b)("p",null,"Satisfying the conditions of the warnings causes the list of dependencies to become empty again:"),Object(i.b)(r.a,{noShadow:!0,imageSource:"/img/Development/TouchGFXHALDevelopment/Generator/ltdc_config.png",caption:"<Figure X - >",mdxType:"Figure"}),Object(i.b)("p",null,"By selecting Parallel RGB (LTDC) as the interface, the width and height of the framebuffer in TouchGFX Generator configuration is inherited from the LTDC configuration horizontal start/stop and vertical start/stop. If we define the window dimensions of Layer 0..."),Object(i.b)(r.a,{noShadow:!0,imageSource:"/img/Development/TouchGFXHALDevelopment/Generator/ltdc_window_position.png",caption:"<Figure X - >",mdxType:"Figure"}),Object(i.b)("p",null,"... users will see a new warning from TouchGFX Generator."),Object(i.b)(r.a,{noShadow:!0,imageSource:"/img/Development/TouchGFXHALDevelopment/Generator/dependency_ltdc_image.png",caption:"<Figure X - >",mdxType:"Figure"}),Object(i.b)("p",null,"Satisfying this warning by specifying Framebuffer Image Width and Image Height will empty the dependency/warning list yet again:"),Object(i.b)(r.a,{noShadow:!0,imageSource:"/img/Development/TouchGFXHALDevelopment/Generator/ltdc_config_fixed.png",caption:"<Figure X - >",mdxType:"Figure"}),Object(i.b)("p",null,"Unrelated to TouchGFX, users must configure the LTDC GPIO settings in accordance with the datasheet for their board."),Object(i.b)("p",null,"In conclusion, what the Parallel RGB (LTDC) display interface option does when enabled is to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Set the width, height and pixel format of the TouchGFX application in accordance with LTDC settings. The width and height impact the size of the canvas in TouchGFX Designer and the pixel format impacts the required framebuffer driver and also the generated format for image assets."),Object(i.b)("li",{parentName:"ul"},"Allow the LTDC application tick source to be selected.")),Object(i.b)("h2",{id:"main"},"Main"),Object(i.b)("p",null,"This doesn't belong here, but is closer related to RTOS."),Object(i.b)("p",null,"Now we have to start all the things."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"  /* Create the thread(s) */\n  /* definition and creation of defaultTaskHand */\n  osThreadDef(defaultTaskHand, StartDefaultTask, osPriorityNormal, 0, 4096);\n  defaultTaskHandHandle = osThreadCreate(osThread(defaultTaskHand), NULL);\n\n  /* USER CODE BEGIN RTOS_THREADS */\n  /* add threads, ... */\n  /* USER CODE END RTOS_THREADS */\n\n  /* Start scheduler */\n  osKernelStart();\n \n  /* We should never get here as control is now taken by the scheduler */\n\n  /* Infinite loop */\n  /* USER CODE BEGIN WHILE */\n  while (1)\n  {\n    /* USER CODE END WHILE */\n\n    /* USER CODE BEGIN 3 */\n  }\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"/* USER CODE BEGIN Header_StartDefaultTask */\n/**\n  * @brief  Function implementing the defaultTaskHand thread.\n  * @param  argument: Not used \n  * @retval None\n  */\n/* USER CODE END Header_StartDefaultTask */\nvoid StartDefaultTask(void const * argument)\n{\n  /* USER CODE BEGIN 5 */\n  MX_TouchGFX_Process();\n  /* Infinite loop */\n  for(;;)\n  {\n    \n    osDelay(1);\n  }\n  /* USER CODE END 5 */ \n}\n")),Object(i.b)("p",null,"Init automatically called:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"  /* Initialize all configured peripherals */\n  MX_GPIO_Init();\n  MX_CRC_Init();\n  MX_QUADSPI_Init();\n  MX_DMA2D_Init();\n  MX_FMC_Init();\n  MX_LTDC_Init();\n  MX_I2C3_Init();\n  MX_TouchGFX_Init();\n  /* USER CODE BEGIN 2 */\n\n")))}u.isMDXComponent=!0},268:function(e,t,n){"use strict";var a=n(5),o=n(0),i=n.n(o),r=n(266),l=i.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},i.a.createElement("path",{"fill-rule":"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return i.a.createElement(r.a,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:l},this.props.children)},t}(o.Component);t.a=c},269:function(e,t,n){"use strict";var a=n(5),o=n(0),i=n.n(o),r=n(266),l=i.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},i.a.createElement("path",{"fill-rule":"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return i.a.createElement(r.a,{color:"var(--highlight-color-try)",header:"Things to try",type:"try",icon:l},this.props.children)},t}(o.Component);t.a=c}}]);