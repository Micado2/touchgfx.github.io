(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{329:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return m})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return f}));var a=n(1),i=n(9),o=(n(0),n(508)),c=n(510),r=n(511),l=(n(517),n(516)),s=(n(515),n(518)),d=n(514),h=(n(522),n(513)),b=n(521),p={id:"mixins",title:"Mixins"},m={id:"development/ui-development/touchgfx-engine-features/mixins",title:"Mixins",description:"A Mixin is a class that extends the functionality of a widget, to for example be able to animate movement or a change in their alpha value. The Move Animator and Fade Animator mixins are the basis of TouchGFX Designer Interactions being able to generate code that animates movement and alpha change. These mixins can be added to a widget either through TouchGFX Designer or manually in User Code.\r",source:"@site/docs\\development\\ui-development\\touchgfx-engine-features\\mixins.mdx",permalink:"/docs/development/ui-development/touchgfx-engine-features/mixins",sidebar:"docs",previous:{title:"Backend Communication",permalink:"/docs/development/ui-development/touchgfx-engine-features/backend-communication"},next:{title:"Texts and Fonts",permalink:"/docs/development/ui-development/touchgfx-engine-features/texts-and-fonts"}},u=[{value:"Move Animator",id:"move-animator",children:[{value:"Using Move Animator in User Code",id:"using-move-animator-in-user-code",children:[]},{value:"Callback Implementation in User Code",id:"callback-implementation-in-user-code",children:[]},{value:"API reference",id:"api-reference",children:[]}]},{value:"Fade Animator",id:"fade-animator",children:[{value:"Using Fade Animator in User Code",id:"using-fade-animator-in-user-code",children:[]},{value:"Callback Implementation in User Code",id:"callback-implementation-in-user-code-1",children:[]},{value:"API reference",id:"api-reference-1",children:[]}]},{value:"ClickListener",id:"clicklistener",children:[{value:"Callback Implementation in User Code",id:"callback-implementation-in-user-code-2",children:[]},{value:"API reference",id:"api-reference-2",children:[]}]},{value:"Draggable",id:"draggable",children:[{value:"API reference",id:"api-reference-3",children:[]}]}],g={rightToc:u},x="wrapper";function f(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(x,Object(a.a)({},g,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A Mixin is a class that extends the functionality of a widget, to for example be able to animate movement or a change in their alpha value. The Move Animator and Fade Animator mixins are the basis of TouchGFX Designer Interactions being able to generate code that animates movement and alpha change. These mixins can be added to a widget either through TouchGFX Designer or manually in User Code."),Object(o.b)("h2",{id:"move-animator"},"Move Animator"),Object(o.b)("p",null,"The Move Animator mixin makes the widget it is applied to, capable of animating a movement from its current position to a specified end position. The movement in both the X and Y direction can\nbe described by supplying EasingEquations."),Object(o.b)("p",null,'In TouchGFX Designer, the mixin can be applied by enabling it in the properties for the given widget in the "Mixins" section, as shown in the image below.'),Object(o.b)("p",null,"The Move Animator mixin will automatically be applied to a widget if an ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/development/ui-development/designer-user-guide/interactions-view"}),"Interaction")," that moves the widget has been created."),Object(o.b)(r.a,{imageSource:"/img/development/ui-development/touchgfx-engine-features/mixins/mixins-move-animator-enabled.png",caption:"Move Animator mixin enabled in TouchGFX Designer",mdxType:"Figure"}),Object(o.b)("p",null,"Enabling the Move Animator mixin changes the declaration signature of the generated widget as seen below, where a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/shapes/box"}),"Box")," has had the Move Animator mixin enabled."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"touchgfx::MoveAnimator< touchgfx::Box > box;\n")),Object(o.b)("h3",{id:"using-move-animator-in-user-code"},"Using Move Animator in User Code"),Object(o.b)("p",null,"When a widget has had the Move Animator mixin applied to it, the widget now has the capability of animating its movement from one position to another. In this section a demonstration of how to use this new functionality is shown."),Object(o.b)("p",null,"After enabeling the Move Animator mixin in TouchGFX Designer on a Box widget, the method ",Object(o.b)(l.a,{text:"startMoveAnimation",mdxType:"InlineCode"})," becomes available for use.\nThis methods takes five arguments in the following order"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"endX: the X position relative to its parent that the widget should move to."),Object(o.b)("li",{parentName:"ul"},"endY: the Y position relative to its parent that the widget should move to."),Object(o.b)("li",{parentName:"ul"},"duration: the time in ticks the movement in the X and Y axis should take."),Object(o.b)("li",{parentName:"ul"},"xProgressionEquation: the EasingEquation that should be used for the movement in the X axis."),Object(o.b)("li",{parentName:"ul"},"yProgressionEquation: the EasingEquation that should be used for the movement in the Y axis.")),Object(o.b)("p",null,"Below an example of a movement to the coordinates X: 0, X: 0 over a duration of 40 ticks, using a linear EasingEquation in both X and Y axis."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"    box.startMoveAnimation(0, 0, 40, EasingEquations::linearEaseNone, EasingEquations::linearEaseNone);\n")),Object(o.b)(d.a,{mdxType:"FurtherReading"},Object(o.b)("li",null,Object(o.b)(s.a,{link:"classes/classtouchgfx_1_1_easing_equations",mdxType:"API"},"API Reference for the available EasingEquations")),Object(o.b)("li",null,Object(o.b)(c.a,{to:"https://easings.net/",mdxType:"Link"},"Graphical demonstations of EasingEquations"))),Object(o.b)("h3",{id:"callback-implementation-in-user-code"},"Callback Implementation in User Code"),Object(o.b)("p",null,"When a Move Animator mixin has completed an animation, a callback is emitted. In this section a demonstration of how to implement this callback is shown."),Object(o.b)("p",null,"After enabeling the Move Animator mixin in TouchGFX Designer on a Box widget, the next step is to add declarations for a callback and a function to handle the event in the Screen header class file that inherits from the base class where the Box widget is located."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.hpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{5-6,9-10}","{5-6,9-10}":!0}),"class Screen1View : public Screen1ViewBase\n{\npublic:\n    Screen1View();\n    // Declaring callback handler for move animation ended on a Box\n    void boxMoveAnimationEndedHandler(const touchgfx::MoveAnimator<Box>& comp);\n\nprotected:\n    // Declaring callback type of MoveAnimator<Box>\n    Callback <Screen1View, const touchgfx::MoveAnimator<Box>&> boxMoveAnimationEndedCallback;\n};\n")),Object(o.b)("p",null,"Then the callback declaration and function to handle the event need to be bound to the view object, and bind which function to handle the event."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{2-3}","{2-3}":!0}),"Screen1View::Screen1View() :\n  // In constructor for callback, bind to this view object and bind which function to handle the event.\n  boxMoveAnimationEndedCallback(this, &Screen1View::boxMoveAnimationEndedHandler) { }\n")),Object(o.b)("p",null,"Next step is to tell the Box widget which callback to use when its move animation has ended, this is done in ",Object(o.b)(l.a,{text:"setupScreen()",mdxType:"InlineCode"})," to ensure that the callback is set every time the screen is entered."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{3-4}","{3-4}":!0}),"void Screen1View::setupScreen()\n{\n  // Add the callback to box\n  box.setMoveAnimationEndedAction(boxMoveAnimationEndedCallback);\n}\n")),Object(o.b)("p",null,"Last step is to implement the function, ",Object(o.b)(l.a,{text:"boxMoveAnimationEndedHandler",mdxType:"InlineCode"}),", that handles the callback. For good practice we check that the Box which move animation has ended is actually the 'box'"),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void Screen1View::boxMoveAnimationEndedHandler(const touchgfx::MoveAnimator<touchgfx::Box>& b)\n{\n    if (&b == &box)\n    {\n        //Implement what should happen when move animation on 'box' has ended here.\n    }\n}\n")),Object(o.b)("h3",{id:"api-reference"},"API reference"),Object(o.b)(d.a,{mdxType:"FurtherReading"},Object(o.b)("li",null,Object(o.b)(s.a,{link:"classes/classtouchgfx_1_1_move_animator",mdxType:"API"},"API reference for the MoveAnimator class"))),Object(o.b)("h2",{id:"fade-animator"},"Fade Animator"),Object(o.b)("p",null,"The Fade Animator mixin makes the widget it is applied to, capable of animating its alpha value to fade from its current alpha value to a specified end alpha value. The rate of fading can be\ndescribed by supplying an EasingEquation."),Object(o.b)(b.a,{mdxType:"Note"},"Only widgets that implement an alpha value support the Fade Animator mixin. This means all the widgets that can contain other widgets, like the ",Object(o.b)(c.a,{to:"/docs/development/ui-development/ui-components/containers/container",mdxType:"Link"},"Container"),", do not support the Fade Animator mixin."),Object(o.b)("p",null,'In TouchGFX Designer, the mixin can be applied by enabling it in the properties for the given widget in the "Mixins" section, as shown in the image below.'),Object(o.b)("p",null,"The Fade Animator mixin will also automatically be applied to a widget if an ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/development/ui-development/designer-user-guide/interactions-view"}),"Interaction")," that fades the widget over a duration larger than zero has been added."),Object(o.b)(r.a,{imageSource:"/img/development/ui-development/touchgfx-engine-features/mixins/mixins-fade-animator-enabled.png",caption:"Fade Animator mixin enabled in TouchGFX Designer",mdxType:"Figure"}),Object(o.b)("p",null,"Enabling the Fade Animator mixin changes the declaration signature of the generated widget as seen below, where a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/shapes/box"}),"Box")," has had the Fade Animator mixin enabled."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"touchgfx::FadeAnimator< touchgfx::Box > box;\n")),Object(o.b)("h3",{id:"using-fade-animator-in-user-code"},"Using Fade Animator in User Code"),Object(o.b)("p",null,"When a widget has had the Fade Animator mixin applied to it, the widget now has the capability of animating its alpha value from one setting to another. In this section a demonstration of how to use this new functionality is shown."),Object(o.b)("p",null,"After enabeling the Fade Animator mixin in TouchGFX Designer on a Box widget, the method ",Object(o.b)(l.a,{text:"startFadeAnimation",mdxType:"InlineCode"})," becomes available for use.\nThis methods takes thee arguments in the following order"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"endAlpha: the alpha value the widget should be when animation is completed."),Object(o.b)("li",{parentName:"ul"},"duration: the time in ticks the animation to the new alpha value setting should take."),Object(o.b)("li",{parentName:"ul"},"alphaProgressionEquation: the EasingEquation that should be used for the rate of change to the alpha value.")),Object(o.b)("p",null,"Below an example of an alpha value change to 0 over a duration of 40 ticks, using a linear EasingEquation."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"    box.startFadeAnimation(0, 0, 40, EasingEquations::linearEaseNone);\n")),Object(o.b)(d.a,{mdxType:"FurtherReading"},Object(o.b)("li",null,Object(o.b)(s.a,{link:"classes/classtouchgfx_1_1_easing_equations",mdxType:"API"},"API Reference for the available EasingEquations")),Object(o.b)("li",null,Object(o.b)(c.a,{to:"https://easings.net/",mdxType:"Link"},"Graphical demonstations of EasingEquations"))),Object(o.b)("h3",{id:"callback-implementation-in-user-code-1"},"Callback Implementation in User Code"),Object(o.b)("p",null,"When a Fade Animator mixin has completed an animation, a callback is emitted. In this section a demonstration of how to implement this callback is shown."),Object(o.b)("p",null,"After enabeling the Fade Animator mixin in TouchGFX Designer on a Box widget, the next step is to add declarations for a callback and a function to handle the event in the Screen header class file that inherits from the base class where the Box widget is located."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.hpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{5-6,9-10}","{5-6,9-10}":!0}),"class Screen1View : public Screen1ViewBase\n{\npublic:\n    Screen1View();\n    // Declaring callback handler for fade animation ended on a Box\n    void boxFadeAnimationEndedHandler(const touchgfx::FadeAnimator<Box>& comp);\n\nprotected:\n    // Declaring callback type of FadeAnimator<Box>\n    Callback <Screen1View, const touchgfx::FadeAnimator<Box>&> boxFadeAnimationEndedCallback;\n};\n")),Object(o.b)("p",null,"Then the callback declaration and function to handle the event need to be bound to the view object, and bind which function to handle the event."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{2-3}","{2-3}":!0}),"Screen1View::Screen1View() :\n  // In constructor for callback, bind to this view object and bind which function to handle the event.\n  boxFadeAnimationEndedCallback(this, &Screen1View::boxFadeAnimationEndedHandler) { }\n")),Object(o.b)("p",null,"Next step is to tell the Box widget which callback to use when its move animation has ended, this is done in ",Object(o.b)(l.a,{text:"setupScreen()",mdxType:"InlineCode"})," to ensure that the callback is set every time the screen is entered."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{3-4}","{3-4}":!0}),"void Screen1View::setupScreen()\n{\n  // Add the callback to box\n  box.setFadeAnimationEndedAction(boxFadeAnimationEndedCallback);\n}\n")),Object(o.b)("p",null,"Last step is to implement the function, ",Object(o.b)(l.a,{text:"boxFadeAnimationEndedHandler",mdxType:"InlineCode"}),", that handles the callback. For good practice we check that the Box which fade animation has ended is actually the 'box'"),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void Screen1View::boxFadeAnimationEndedHandler(const touchgfx::FadeAnimator<touchgfx::Box>& b)\n{\n    if (&b == &box)\n    {\n        //Implement what should happen when fade animation on 'box' has ended here.\n    }\n}\n")),Object(o.b)("h3",{id:"api-reference-1"},"API reference"),Object(o.b)(d.a,{mdxType:"FurtherReading"},Object(o.b)("li",null,Object(o.b)(s.a,{link:"classes/classtouchgfx_1_1_fade_animator",mdxType:"API"},"API reference for the FadeAnimator class"))),Object(o.b)("h2",{id:"clicklistener"},"ClickListener"),Object(o.b)("p",null,"The Click Listener mixin makes the widget it is applied to, capable of responding to touch input by extending the widget with a callback."),Object(o.b)("p",null,'In TouchGFX Designer, the mixin can be applied by enabling it in the properties for the given widget in the "Mixins" section, as shown in the image below.'),Object(o.b)(r.a,{imageSource:"/img/development/ui-development/touchgfx-engine-features/mixins/mixins-click-listener-enabled.png",caption:"Click Listener mixin enabled in TouchGFX Designer",mdxType:"Figure"}),Object(o.b)("p",null,"Enabling the Click Listener mixin changes the declaration signature of the generated widget as seen below, where a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/shapes/box"}),"Box")," has had the Click Listener mixin enabled."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"touchgfx::ClickListener< touchgfx::Box > box;\n")),Object(o.b)("h3",{id:"callback-implementation-in-user-code-2"},"Callback Implementation in User Code"),Object(o.b)("p",null,"When a Click Listener mixin receives a touch event, a callback is emitted. In this section a demonstration of how to implement this callback is shown."),Object(o.b)("p",null,"After enabeling the Click Listener mixin in TouchGFX Designer on a Box widget, the next step is to add declarations for a callback and a function to handle the event in the Screen header class file that inherits from the base class where the Box widget is located."),Object(o.b)("p",null,"The callback should declare three things: which class type to bind to, which widget the callback originates from and the type of event that occurs. In this example it is ",Object(o.b)(l.a,{text:"Screen1View",mdxType:"InlineCode"}),", ",Object(o.b)(l.a,{text:"const Box&",mdxType:"InlineCode"})," and ",Object(o.b)(l.a,{text:"const ClickEvent&",mdxType:"InlineCode"})),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.hpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{5-6,9-10}","{5-6,9-10}":!0}),"class Screen1View : public Screen1ViewBase\n{\npublic:\n    Screen1View();\n    // Declaring callback handler for Box\n    void boxClickHandler(const Box& b, const ClickEvent& e);\n\nprotected:\n    // Declaring callback type of box and clickEvent\n    Callback<Screen1View, const Box&, const ClickEvent&> boxClickedCallback;\n};\n")),Object(o.b)("p",null,"Then the callback declaration and function to handle the event need to be bound to the view object, and bind which function to handle the event."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{2-3}","{2-3}":!0}),"Screen1View::Screen1View() :\n    // In constructor for callback, bind to this view object and bind which function to handle the event.\n    boxClickedCallback(this, &Screen1View::boxClickHandler) { }\n")),Object(o.b)("p",null,"Next step is to tell the Box widget which callback to use when it is touched, this is done in ",Object(o.b)(l.a,{text:"setupScreen()",mdxType:"InlineCode"})," to ensure that the callback is set every time the screen is entered."),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp",metastring:"{3-4}","{3-4}":!0}),"void Screen1View::setupScreen()\n{\n    // Add the callback to box\n    box.setClickAction(boxClickedCallback);\n}\n")),Object(o.b)("p",null,"Last step is to implement the function, ",Object(o.b)(l.a,{text:"boxClickHandler",mdxType:"InlineCode"}),", that handles the callback. For good practice we check that the Box which initiated the callback is actually the 'box'"),Object(o.b)(h.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void Screen1View::boxClickHandler(const Box& b, const ClickEvent& evt)\n{\n    if (&b == &box)\n    {\n        //Implement what should happen when 'box' is touched/clicked here.\n    }\n}\n")),Object(o.b)("h3",{id:"api-reference-2"},"API reference"),Object(o.b)(d.a,{mdxType:"FurtherReading"},Object(o.b)("li",null,Object(o.b)(s.a,{link:"classes/classtouchgfx_1_1_click_listener",mdxType:"API"},"API reference for the ClickListener class"))),Object(o.b)("h2",{id:"draggable"},"Draggable"),Object(o.b)("p",null,"The Draggable mixin makes the widget it is applied to, capable of being dragged around via touch input."),Object(o.b)("p",null,'In TouchGFX Designer, the mixin can be applied by enabling it in the properties for the given widget in the "Mixins" section, as shown in the image below.'),Object(o.b)(r.a,{imageSource:"/img/development/ui-development/touchgfx-engine-features/mixins/mixins-draggable-enabled.png",caption:"Draggable mixin enabled in TouchGFX Designer",mdxType:"Figure"}),Object(o.b)("p",null,"Enabling the Draggable mixin changes the declaration signature of the generated widget as seen below, where a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/shapes/box"}),"Box")," has had the Click Listener mixin enabled."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"touchgfx::Draggable< touchgfx::Box > box;\n")),Object(o.b)("h3",{id:"api-reference-3"},"API reference"),Object(o.b)(d.a,{mdxType:"FurtherReading"},Object(o.b)("li",null,Object(o.b)(s.a,{link:"classes/classtouchgfx_1_1_draggable",mdxType:"API"},"API reference for the Draggable class"))))}f.isMDXComponent=!0},509:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e="highlight highlight-"+this.props.type;return(o.a.createElement("div",{class:e},o.a.createElement("div",{class:"highlight-heading"},o.a.createElement("h5",null,o.a.createElement("div",{class:"highlight-icon"},this.props.icon),this.props.header)),o.a.createElement("div",{class:"highlight-content"},this.props.children)))},t}(i.Component);t.a=c},511:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e=this.props.noShadow||!1,t=this.props.width,n=this.props.height;return e?o.a.createElement("div",{class:"figure noshadow"},o.a.createElement("a",{href:this.props.imageSource,target:"_blank"},o.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),o.a.createElement("p",null,this.props.caption)):o.a.createElement("div",{class:"figure"},o.a.createElement("a",{href:this.props.imageSource,target:"_blank"},o.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),o.a.createElement("p",null,this.props.caption))},t}(i.Component);t.a=c},513:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return o.a.createElement("div",{class:"code-header"},o.a.createElement("div",null,o.a.createElement("h5",null,this.props.children)))},t}(i.Component);t.a=c},514:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=n(509),r=o.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},o.a.createElement("path",{"fill-rule":"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),l=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return o.a.createElement(c.a,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:r},this.props.children)},t}(i.Component);t.a=l},515:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=n(509),r=o.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},o.a.createElement("path",{"fill-rule":"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})),l=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return o.a.createElement(c.a,{color:"var(--highlight-color-tip)",header:"Tip",type:"tip",icon:r},this.props.children)},t}(i.Component);t.a=l},516:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return o.a.createElement("code",null,this.props.text)},t}(i.Component);t.a=c},517:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return o.a.createElement("i",null,this.props.text)},t}(i.Component);t.a=c},518:function(e,t,n){"use strict";n(519);var a=n(5),i=n(0),o=n.n(i),c=n(510),r=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e="/docs/api/"+this.props.link;return(o.a.createElement(c.a,{to:e},this.props.children))},t}(i.Component);t.a=r},519:function(e,t,n){"use strict";n(520)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},520:function(e,t,n){var a=n(12),i=n(13),o=n(24),c=/"/g,r=function(e,t,n,a){var i=String(o(e)),r="<"+t;return""!==n&&(r+=" "+n+'="'+String(a).replace(c,"&quot;")+'"'),r+">"+i+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(r),a(a.P+a.F*i((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},521:function(e,t,n){"use strict";var a=n(5),i=n(0),o=n.n(i),c=n(509),r=o.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},o.a.createElement("path",{"fill-rule":"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})),l=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return o.a.createElement(c.a,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:r},this.props.children)},t}(i.Component);t.a=l},522:function(e,t,n){"use strict";n(523);var a=n(5),i=n(0),o=n.n(i),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return o.a.createElement("i",null,this.props.name)},t}(i.Component);t.a=c},523:function(e,t,n){var a=n(25).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(10)&&a(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(e){return""}}})}}]);