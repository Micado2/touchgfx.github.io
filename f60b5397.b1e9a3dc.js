(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{216:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return h})),n.d(t,"default",(function(){return b}));var i=n(1),r=n(9),a=(n(0),n(227)),o=n(230),s=n(231),c=n(228),l=n(238),p={id:"GraphicsEngine",title:"Graphics Engine"},d={id:"BasicConcepts/GraphicsEngine",title:"Graphics Engine",description:"import Link from '@docusaurus/Link';",source:"@site/docs\\BasicConcepts\\GraphicsEngine.mdx",permalink:"/docs/BasicConcepts/GraphicsEngine",sidebar:"docs",previous:{title:"Embedded Graphics",permalink:"/docs/BasicConcepts/EmbeddedGraphics"},next:{title:"Colors",permalink:"/docs/BasicConcepts/Colors"}},h=[{value:"Scene model",id:"scene-model",children:[{value:"A tree of widgets",id:"a-tree-of-widgets",children:[]}]},{value:"Drawing API",id:"drawing-api",children:[]},{value:"TODO explain what a widget is",id:"todo-explain-what-a-widget-is",children:[]},{value:"Main Loop",id:"main-loop",children:[{value:"Tasks",id:"tasks",children:[]}]},{value:"Platform adaptibility",id:"platform-adaptibility",children:[]}],u={rightToc:h},m="wrapper";function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)(m,Object(i.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"TouchGFX graphics engine's main responsibility is drawing graphics on the display of an embedded device."),Object(a.b)("p",null,"This section will give an overview of what kind of graphics engine TouchGFX is and provide some background on why it is this way."),Object(a.b)("h2",{id:"scene-model"},"Scene model"),Object(a.b)("p",null,"Graphics engines can be divided into two main categories."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Immediate mode graphics engines")," provide an API that enables an application to directly draw things to the display. It is the responsibility of the application to ensure that the correct drawing operations are invoked at the right time."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Retained mode graphics engines")," let the user manipulate an abstract model of the components being displayed. The engine takes care of translating this component model into the correct graphics drawing operations at the right times.")),Object(a.b)("p",null,"TouchGFX follows the retained mode graphics principles. In short this means that TouchGFX provides a model that can be manipulated by the user and TouchGFX then takes care of translating from this model into an optimized set of rendering method calls."),Object(a.b)(c.a,{imageSource:"/img/BasicConcepts/retained_mode_graphics2.svg",caption:"Retained mode graphics",noShadow:"true",width:480,mdxType:"Figure"}),Object(a.b)("p",null,"The benefits of TouchGFX being retained are many. Primary ones are"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Ease of use:")," A retained graphics engine is easy to use. The user adresses the configuration of components on screen, by invoking methods on the internal model and does not think in terms of actual drawing operations."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Performance:")," TouchGFX analyses the scene model and optimizes the drawing calls needed to realize the model on screen. This includes deliberately not drawing hidden components, drawing and transferring only changed parts of components, managing framebuffers, and much more."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"State management:")," TouchGFX keeps track of which part of the scene model is active. This in turn makes it easier for the user to optimize the scene model contents.")),Object(a.b)("p",null,"The main drawback of TouchGFX adhering to the retained mode graphics scheme is"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Memory consumption")," representing the scene model takes up some memory. TouchGFX reaches its performance levels, typically rendering 60 frames per second, by analyzing the scene model and optimizing the corresponding rendering done.\nGreat effort has gone into reducing the amount of memory used by the scene model of TouchGFX. In typical applications the amount of memory for this model is well below one kilobyte.")),Object(a.b)("h3",{id:"a-tree-of-widgets"},"A tree of widgets"),Object(a.b)("p",null,"The scene model consists of components. "),Object(a.b)(c.a,{imageSource:"/img/BasicConcepts/scene_model.svg",caption:"A tree of widgets",noShadow:"true",width:280,mdxType:"Figure"}),Object(a.b)("p",null,"Each of the components in the model has exactly one associated parent component.\nThe parent component itself is also part of the scene model. Such a model is widely referred to as a ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Tree_(data_structure)"}),"tree"),". "),Object(a.b)("p",null,"We will often refer to a component as a UI component or a widget. "),Object(a.b)("p",null,"Updating the displayed graphics is done by manipulating the widgets in the scene model."),Object(a.b)("p",null,"TODO perhaps an example of updating the tree of widgets"),Object(a.b)("h2",{id:"drawing-api"},"Drawing API"),Object(a.b)("p",null,"TODO stronger correspondence between figure with two arrows and subsection names, manipulate model and drawing api/issue commands"),Object(a.b)("p",null,"TODO readers should not think that they should implement their own DrawingAPI, TouchGFX implements a lot of variants."),Object(a.b)("p",null,"#TODO move about what is, and that hw is utilized"),Object(a.b)("p",null,"Ultimately, when rendering the scene model, TouchGFX will utilize its drawing API. This drawing API has methods for drawing graphics primitives, such as boxes, images, lines, polygons, textured triangles, ..."),Object(a.b)("p",null,"As an example the ",Object(a.b)(o.a,{to:"/docs/Development/UIDevelopment/UIComponents/Buttons/Button",mdxType:"Link"},"Button")," widget in TouchGFX, when being rendered, uses the ",Object(a.b)(l.a,{link:"classtouchgfx_1_1_l_c_d_a21fc0988883bc392096c8eb21b0710b7.html#a21fc0988883bc392096c8eb21b0710b7",mdxType:"API"},"drawing API method for drawing images"),". "),Object(a.b)("p",null,"One can utilize these same drawing methods when extending the scene model with new types of widgets."),Object(a.b)("p",null,"The implementation behind the drawing API methods is platform specific. TouchGFX is open in the way that developers can implement their own version of the drawing API."),Object(a.b)("h2",{id:"todo-explain-what-a-widget-is"},"TODO explain what a widget is"),Object(a.b)("h2",{id:"main-loop"},"Main Loop"),Object(a.b)("p",null,"TODO tick should be mentioned"),Object(a.b)("p",null,"The workings of many game engines, graphics engines and in particular TouchGFX can be thought of as an infinite loop. "),Object(a.b)("p",null,"Within the main loop of TouchGFX there are three main activities"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Collect events"),"\nCollect events from the touch screen, presses of physical buttons, messages from backend system, ..."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Update scene model"),"\nReact to the collected events, updating the positions, animations, colors, images, ... of the model"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Render scene model"),"\nRedraw the parts of the model that has been updated")),Object(a.b)("p",null,"In pseudocode (not at all like the actual code found within the engine) the main loop is"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-cpp"}),"while( true )\n{\n    collect();\n    update();\n    render();\n}\n")),Object(a.b)("h3",{id:"tasks"},"Tasks"),Object(a.b)("p",null,"Move and expand this section to article named basic concepts operating system, and refer to it"),Object(a.b)("p",null,"If an operating system is at hand, TouchGFX and in particular the main loop is intended to be run as a separate task.\nThis makes it easy for the embedded system to do other work, for instance control a washing machine, in a separate task as well.\nThe two tasks can communicate via messages, in order to update the GUI with values from the rest of the system, and to send messages from the UI to the system."),Object(a.b)("p",null,"If an operating system is not present, the methods of the main loop of TouchGFX should be intertwined with the rest of the code of the system."),Object(a.b)("p",null,"TouchGFX is optimized for CPU friendliness."),Object(a.b)("p",null,"See more in ",Object(a.b)("strong",{parentName:"p"},"Operating System section TODO")),Object(a.b)("h2",{id:"platform-adaptibility"},"Platform adaptibility"),Object(a.b)("p",null,"TODO move to other places or remove"),Object(a.b)("p",null,"As TouchGFX is designed for running on any STM32 embedded setup the above phases can be customized."),Object(a.b)("p",null,"Events -> operating system"),Object(a.b)("p",null,"Drawing a box -> hardware"),Object(a.b)("p",null,"Transfer to display"),Object(a.b)(s.a,{mdxType:"FurtherReading"},Object(a.b)("li",null,"See ",Object(a.b)(o.a,{to:"https://www.st.com/en/microcontrollers-microprocessors/stm32-32-bit-arm-cortex-mcus.html",mdxType:"Link"},"STM32 32-bit Arm Cortex MCUs")," for available STM32 microcontrollers.")))}b.isMDXComponent=!0},227:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,m=d["".concat(o,".").concat(h)]||d[h]||u[h]||a;return n?r.a.createElement(m,s({ref:t},l,{components:n})):r.a.createElement(m,s({ref:t},l))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[h]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},228:function(e,t,n){"use strict";var i=n(5),r=n(0),a=n.n(r),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(i.a)(t,e),t.prototype.render=function(){var e=this.props.noShadow||!1,t=this.props.width,n=this.props.height;return e?a.a.createElement("div",{class:"figure noshadow"},a.a.createElement("a",{href:this.props.imageSource,target:"_blank"},a.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),a.a.createElement("p",null,this.props.caption)):a.a.createElement("div",{class:"figure"},a.a.createElement("a",{href:this.props.imageSource,target:"_blank"},a.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),a.a.createElement("p",null,this.props.caption))},t}(r.Component);t.a=o},229:function(e,t,n){"use strict";var i=n(5),r=n(0),a=n.n(r),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(i.a)(t,e),t.prototype.render=function(){var e="highlight highlight-"+this.props.type;return a.a.createElement("div",{class:e},a.a.createElement("div",{class:"highlight-heading"},a.a.createElement("h5",null,a.a.createElement("div",{class:"highlight-icon"},this.props.icon),this.props.header)),a.a.createElement("div",{class:"highlight-content"},this.props.children))},t}(r.Component);t.a=o},230:function(e,t,n){"use strict";var i=n(1),r=n(0),a=n.n(r),o=n(34),s=/^\/(?!\/)/;t.a=function(e){var t,n=e.to,c=e.href,l=n||c,p=s.test(l),d=Object(r.useRef)(!1),h="undefined"!=typeof window&&"IntersectionObserver"in window;return Object(r.useEffect)((function(){return!h&&p&&window.docusaurus.prefetch(l),function(){h&&t&&t.disconnect()}}),[l,h,p]),l&&p?a.a.createElement(o.b,Object(i.a)({},e,{onMouseEnter:function(){d.current||(window.docusaurus.preload(l),d.current=!0)},innerRef:function(e){var n,i;h&&e&&p&&(n=e,i=function(){window.docusaurus.prefetch(l)},(t=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(t.unobserve(n),t.disconnect(),i())}))}))).observe(n))},to:l})):a.a.createElement("a",Object(i.a)({},e,{href:l}))}},231:function(e,t,n){"use strict";var i=n(5),r=n(0),a=n.n(r),o=n(229),s=a.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.a.createElement("path",{"fill-rule":"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(i.a)(t,e),t.prototype.render=function(){return a.a.createElement(o.a,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:s},this.props.children)},t}(r.Component);t.a=c},238:function(e,t,n){"use strict";n(239);var i=n(5),r=n(0),a=n.n(r),o=n(230),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(i.a)(t,e),t.prototype.render=function(){var e="/api/"+this.props.link;return a.a.createElement(o.a,{to:e,target:"_blank"},this.props.children)},t}(r.Component);t.a=s},239:function(e,t,n){"use strict";n(240)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},240:function(e,t,n){var i=n(17),r=n(18),a=n(23),o=/"/g,s=function(e,t,n,i){var r=String(a(e)),s="<"+t;return""!==n&&(s+=" "+n+'="'+String(i).replace(o,"&quot;")+'"'),s+">"+r+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(s),i(i.P+i.F*r((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}}}]);