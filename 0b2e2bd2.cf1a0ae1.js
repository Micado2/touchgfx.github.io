(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{138:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return m})),a.d(t,"default",(function(){return d}));var n=a(1),i=a(9),c=(a(0),a(254)),p=a(255),r=(a(267),a(257),a(264)),l=(a(281),{id:"CreatingDynamicL8Images",title:"Creating Dynamic L8 Images"}),o={id:"Development/UIDevelopment/Scenarios/CreatingDynamicL8Images",title:"Creating Dynamic L8 Images",description:"import Figure from '@site/components/Figure';",source:"@site/docs\\Development\\UIDevelopment\\Scenarios\\CreatingDynamicL8Images.mdx",permalink:"/docs/Development/UIDevelopment/Scenarios/CreatingDynamicL8Images",sidebar:"docs",previous:{title:"Using the L8 Image Format to Reduce Memory Consumption",permalink:"/docs/Development/UIDevelopment/Scenarios/UsingTheL8ImageFormatToReduceMemoryConsumption"},next:{title:"Using Non-Memory Mapped Flash for storing images",permalink:"/docs/Development/UIDevelopment/Scenarios/UsingNonMemoryMappedFlash"}},m=[{value:"Dynamic L8 Images",id:"dynamic-l8-images",children:[{value:"Creating a Dynamic L8 image with 24-bit palette",id:"creating-a-dynamic-l8-image-with-24-bit-palette",children:[]},{value:"Accessing the palette",id:"accessing-the-palette",children:[]}]},{value:"Dynamic L8 Bitmap Example",id:"dynamic-l8-bitmap-example",children:[{value:"Manipulating the Palette",id:"manipulating-the-palette",children:[]}]}],b={rightToc:m},s="wrapper";function d(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(c.b)(s,Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"This section explains the use of dynamic L8 images and especially how to create the palette."),Object(c.b)("p",null,"Read in general about ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/TouchGFXEngineFeatures/DynamicBitmaps"}),"Dynamic Bitmaps here")," and about the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/Scenarios/UsingTheL8ImageFormatToReduceMemoryConsumption"}),"L8 image format here")," ."),Object(c.b)("h2",{id:"dynamic-l8-images"},"Dynamic L8 Images"),Object(c.b)("p",null,"Dynamic L8 bitmaps are created like any other dynamic bitmap, except\nthat we also have to specify the type of palette  to create for the bitmap."),Object(c.b)("p",null,"TouchGFX supports 3 types of palettes:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"Palette")),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"Description")))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"CLUT_FORMAT_L8_ARGB8888"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"32-bit, 8 bits for each of red, green, blue and per pixel alpha channel")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"CLUT_FORMAT_L8_RGB888"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"24-bit, 8 bits for each of red, green and blue, no per pixel alpha channel")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"CLUT_FORMAT_L8_RGB565"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16-bit, 5 bits for red, 6 bits for green, 5 bits for blue, no per pixel alpha channel")))),Object(c.b)("h3",{id:"creating-a-dynamic-l8-image-with-24-bit-palette"},"Creating a Dynamic L8 image with 24-bit palette"),Object(c.b)("p",null,"Here we create a 100x100 pixels L8 bitmap with a 24-bit palette:"),Object(c.b)(r.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"BitmapId dynamicBitmap1 = Bitmap::dynamicBitmapCreate(100, 100, Bitmap::L8, Bitmap::CLUT_FORMAT_L8_RGB888);\n")),Object(c.b)("p",null,"This call allocated a 100x100 L8 bitmap and a 24-bit palette in the\nbitmap cache. The palette always holds 256 colors for dynamic bitmaps."),Object(c.b)("h3",{id:"accessing-the-palette"},"Accessing the palette"),Object(c.b)("p",null,"The palette is located 4 bytes after the pixels (aligned on\n32-bit). The bytes contains information about the palette type and\nlength of the palette."),Object(c.b)("p",null,"We can get a pointer to the (so far uninitialized) palette like this:"),Object(c.b)(r.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"//Get a pointer to the bitmap data (pixels and palette)\nuint8_t* data = Bitmap::dynamicBitmapGetAddress(dynamicBitmap1);\n\n//1 byte pr pixel, round up to 32-bit\nuint32_t byteSize = 100*100;\nbyteSize = ((byteSize + 3) & ~3);\n\n//Palette starts four bytes after the pixels\nuint8_t* pal = (data + byteSize + 4);\n")),Object(c.b)("h2",{id:"dynamic-l8-bitmap-example"},"Dynamic L8 Bitmap Example"),Object(c.b)("p",null,"We will now go through an example of creating a dynamic L8 bitmap and\nmanipulating the palette.",Object(c.b)("br",{parentName:"p"}),"\n","Manipulating the palette if not a typical thing to do for a general\napplication. The example serves the purpose of illustrating how to\naccess and generate a palette."),Object(c.b)("p",null,"First we create a Screen in TouchGFXDesigner and insert a white Box\nin the background and an Image at e.g. x=140, y=8:"),Object(c.b)(p.a,{imageSource:"/img/Development/UIDevelopment/Scenarios/CreatingDynamicL8Images/Designer.png",caption:"Creating a Screen",mdxType:"Figure"}),Object(c.b)("p",null,"Now generate the code and open the Screen1View.cpp file. We must\ninsert code in ",Object(c.b)("em",{parentName:"p"},"setupScreen")," to initialize the bitmap cache and create\na dynamic bitmap."),Object(c.b)("p",null,"We create a bitmap of 200*256 pixels. Remember each pixel in an L8\nbitmap is one byte. We color each row of the image with a different\ncolor. First row has color 0, last row has color 255."),Object(c.b)("p",null,"Then we initialize the colors in the palette. We calculate the start\naddress of the palette and set the RGB values of the 256 colors. Here\nwe create colors that go from green to red and back to green again."),Object(c.b)(r.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),'#ifdef SIMULATOR\nuint32_t cacheBuffer[320*1024/4]; //simulate PSRAM\nuint16_t* psram = (uint16_t*)cacheBuffer;\n#else\nuint16_t* psram = (uint16_t*)(0xd0000000 + 480*272*2*2); //Address after two 16bit framebuffers\n#endif\n\nScreen1View::Screen1View()\n{\n\n}\n\nvoid Screen1View::setupScreen()\n{\n    Screen1ViewBase::setupScreen();\n\n    //Create one dynamic bitmap\n    Bitmap::setCache(psram, 320*1024, 1); //320Kb cache\n    BitmapId dynamicBitmap1 = Bitmap::dynamicBitmapCreate(200, 256, Bitmap::L8, Bitmap::CLUT_FORMAT_L8_RGB888);\n    imageDynamic.setBitmap(Bitmap(dynamicBitmap1));\n\n    if (dynamicBitmap1 == BITMAP_INVALID)\n    {\n        touchgfx_printf("Unable to create dynamic bitmap\\n");\n    }\n    else\n    {\n        uint8_t* data = Bitmap::dynamicBitmapGetAddress(dynamicBitmap1);\n\n        uint8_t* pixel = data;\n        //make colored rows\n        for (int y = 0; y<256; y++)\n        {\n            for (int x = 0; x<200; x++)\n            {\n                *pixel++ = y;\n            }\n        }\n\n        uint32_t byteSize = 200*256;\n        byteSize = ((byteSize + 3) & ~3);\n\n        //Palette starts four bytes after the pixels\n        uint8_t* pal = (data + byteSize + 4);\n\n        //Make palette with 256 colors from green to red to green\n        for (int i = 0; i<256; i++)\n        {\n            //BGR\n            pal[i*3 + 0] = 0x00;\n            pal[i*3 + 1] = 127*(1+cosf(i*6.28f/255));\n            pal[i*3 + 2] = 255*(sinf(i*3.14f/255));\n        }\n    }\n}\n')),Object(c.b)("p",null,"This gives us a Screen that looks like this:"),Object(c.b)(p.a,{imageSource:"/img/Development/UIDevelopment/Scenarios/CreatingDynamicL8Images/img_20200225_151937.bmp",caption:"Showing L8 image",mdxType:"Figure"}),Object(c.b)("h3",{id:"manipulating-the-palette"},"Manipulating the Palette"),Object(c.b)("p",null,"Since we have access to the palette used for the dynamic L8 bitmap, we\ncan easily manipulate it."),Object(c.b)("p",null,"Here we cycle the colors one index down and force a redraw of the\nimage in every frame:"),Object(c.b)(r.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"...\nvoid Screen1View::handleTickEvent()\n{\n    //get palette address\n    uint8_t* data = Bitmap::dynamicBitmapGetAddress(imageDynamic.getBitmap());\n    uint32_t byteSize = 200*256;\n    byteSize = ((byteSize + 3) & ~3);\n    uint8_t* pal = (data + byteSize + 4);\n\n    //Cycle palette, copy color 0\n    int8_t blue = pal[0], green = pal[1], red = pal[2];\n\n    //Move palette down, 1->0, 2->1, ...\n    for (int i = 0; i<255*3; i+=3)\n    {\n        pal[i] = pal[i+3];\n        pal[i+1] = pal[i+4];\n        pal[i+2] = pal[i+5];\n    }\n\n    //Insert color 0 as color 255\n    pal[255*3+0] = blue;\n    pal[255*3+1] = green;\n    pal[255*3+2] = red;\n    \n    //Force redraw by invalidating\n    imageDynamic.invalidate();\n}\n")),Object(c.b)("p",null,'This will move colors in the dynamic bitmap "upwards":'),Object(c.b)(p.a,{width:"200",imageSource:"/img/Development/UIDevelopment/Scenarios/CreatingDynamicL8Images/demo.gif",caption:"Cycling the L8 palette",mdxType:"Figure"}))}d.isMDXComponent=!0},281:function(e,t,a){"use strict";var n=a(5),i=a(0),c=a.n(i),p=function(e){function t(){return e.apply(this,arguments)||this}return Object(n.a)(t,e),t.prototype.render=function(){return c.a.createElement("p",null,c.a.createElement("div",{class:"videoWrapper"},c.a.createElement("video",{controls:!0},c.a.createElement("source",{src:this.props.url,type:"video/mp4"}))))},t}(i.Component);t.a=p}}]);