(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return h})),n.d(t,"default",(function(){return m}));var a=n(1),i=n(9),s=(n(0),n(508)),r=(n(511),n(519),n(510)),o=n(513),c={id:"operating-system",title:"Operating Systems"},l={id:"basic-concepts/operating-system",title:"Operating Systems",description:"## Introduction\r",source:"@site/docs\\basic-concepts\\operating-system.mdx",permalink:"/docs/basic-concepts/operating-system",sidebar:"docs",previous:{title:"Performance",permalink:"/docs/basic-concepts/performance"},next:{title:"Memory Usage",permalink:"/docs/basic-concepts/memory-usage"}},h=[{value:"Introduction",id:"introduction",children:[{value:"Interleaving other tasks with the user interface",id:"interleaving-other-tasks-with-the-user-interface",children:[]},{value:"An example",id:"an-example",children:[]}]},{value:"RTOS",id:"rtos",children:[{value:"Task communication",id:"task-communication",children:[]},{value:"Handling interrupts",id:"handling-interrupts",children:[]},{value:"FreeRTOS",id:"freertos",children:[]},{value:"TouchGFX OS Wrappers",id:"touchgfx-os-wrappers",children:[]}]},{value:"No RTOS",id:"no-rtos",children:[{value:"Model::tick",id:"modeltick",children:[]},{value:"OSWrappers",id:"oswrappers",children:[]}]}],u={rightToc:h},p="wrapper";function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)(p,Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"introduction"},"Introduction"),Object(s.b)("p",null,"In this section we will discuss the use of an operating system in\ngraphical user interface applications."),Object(s.b)("p",null,"Embedded devices are becoming more and more advanced. The majority of\nthe systems are not only handling the graphical user interface, but\noften also complex control algorithms and tasks."),Object(s.b)("p",null,"These tasks can for example be motor control, data aquisition, or\nsecurity related tasks. Many modern devices contain communication\nprotocol stacks like TCP/IP, for communication with data centers; or\nradio stacks like Bluetooth for communication with other local\ndevices."),Object(s.b)("h3",{id:"interleaving-other-tasks-with-the-user-interface"},"Interleaving other tasks with the user interface"),Object(s.b)("p",null,"In a simple device with the graphical user interface and only a few\nsimple support task, like an egg timer, it is possible to structure the\nwhole application around the user interface code. The application does\nvery little besides the regular user interface updates, so the\nexecution of the other tasks can with fair success be embedded into\nthe user interface code."),Object(s.b)("p",null,'As soon as the device contains more advanced functionality that "runs\nin the background" with separate timing requirements like regulating a\nmotor, it quickly becomes difficult to integrate the two task in one\nwhile supporting the requirements.'),Object(s.b)("p",null,"As we discussed in the previous articles the graphics engine must keep\ndrawing new frames to support a fluent user interface. If the graphics\nengine pauses this while running other tasks, the frame rate will\ndecrease. Likewise, if the other tasks only run between the frames, in\nthe idle time, then these task will suffer when the user interface is\nrendering complex scenes where there is less idle time. These effects\nmakes it difficult to manually interleave the ui task with other\ncomplex tasks."),Object(s.b)("h3",{id:"an-example"},"An example"),Object(s.b)("p",null,"Assume for the rest of this section that we are building a bluetooth\nspeaker with a display. We have 3 major tasks: run the graphical user\ninterface, feed music to the speaker, and handle the bluetooth stack\nfor communication with other devices."),Object(s.b)("p",null,"It is not difficult to see that an application architecture centered\non the user interface is not good: Imagine e.g. that we blend the\nmusic code with the user interface and put the code for starting\nplayback in the eventhandler for a button in the user interface. Now\nthe user interface is locked for the time it takes to start the\nmusic. Any animation running will be stopped meanwhile."),Object(s.b)("p",null,"In general, the responsiveness of the user interface becomes\ndependant on the execution time of the music tasks (start, stop, next,\netc.). This is a general problem, that we will come back to."),Object(s.b)("p",null,"And what happens if we also want to be able to start music from\nBluetooth? Should the user interface somehow be involved in that?"),Object(s.b)("p",null,"And how do we give priority to the music tasks, so that the music is\nwithout pauses? At the same time we also want the user interface to\nrun with the highest performance when there is no music tasks to run."),Object(s.b)("p",null,"All this can be solved by using an operating system with tasks,\ncommunication means, and synchronization."),Object(s.b)("h2",{id:"rtos"},"RTOS"),Object(s.b)("p",null,"A real-time operating system is a small piece of software that\nsupports applications with various services and distributes computing\nresources to the tasks in the application."),Object(s.b)("p",null,"Using a RTOS allows you to structure your application in a number of\nindependent, but coorporating tasks. These tasks are then executed\nconcurrently by the RTOS when they have work to do and according to\ntheir priority."),Object(s.b)("p",null,"We can even split a job into a high priority and a low priority\ntask. Assume that we have to read bluetooth data from a buffer very\nfast when it arrives, and put it into a larger application buffer. The\nhandling of the data can be postponed a little. This way we end up\nwith two bluetooth tasks."),Object(s.b)("p",null,"For our example we will start 4 tasks from main:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"int main() {\n  ...\n  os_start_task(gui_task,      medium_priority);\n  os_start_task(music_task,    low_priority);\n  os_start_task(bt_comm_task,  high_priority);\n  os_start_task(bt_appl_task,  low_priority);\n  os_start_scheduler();\n}\n")),Object(s.b)("p",null,"A similar split can be done with the music task: A high priority task\nto feed data to the speaker, and a low priority task to control what\nsong is playing and sending notifications to the user interface."),Object(s.b)("p",null,"The result using different priorities as above is that the\nbt_comm_task is running when there is data to handle and the user\ninterface task runs otherwise. When the user interface task is waiting\nfor the display, the two low priority task can run. The operating\nsystem scheduler will handle this time distribution for us."),Object(s.b)("p",null,"In a typical TouchGFX application the user interface is waiting for\nthe display in every frame, and it is also regularly waiting for the\ngraphics accelerator, ChromArt, to finish drawing elements. This means\nthat there will be many small pauses where the lower priority task can\nrun. The operating system scheduler will automatically change the MCU\nto run these task when the higher priority tasks are waiting."),Object(s.b)("h3",{id:"task-communication"},"Task communication"),Object(s.b)("p",null,"When we use multiple task we also need a safe way of communicating\nbetween the tasks. One simple case is from the user interfaced to the\nmusic task. Here we need, among other cases, the music task to wait\nuntil the gui_task asks it to start playing a song. A simple way to\nimplement that is to use a message queue. The music task sleeps until\nthere is a message in the queue. The scheduler wakes the task when\nthere is a message in the queue and when the higher priority tasks are\nnot busy."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"   ...\n   music_task_input_queue = os_create_queue(10); //10 element queue\n   ...\n")),Object(s.b)("p",null,'In the user interface, when "Play" is pressed, we send a message to\nthe music task\'s queue:'),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void ScreenMusic::handlePlayPressed()\n{\n   os_send_message(music_task_input_queue, play_message);\n}\n")),Object(s.b)("p",null,"The music task can wait for a message by reading the queue. This will\nblock the task until a message arrives:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"...\nMessage message;\nos_receive_message(music_task_input_queue, &message);\n")),Object(s.b)("p",null,"After putting the message into the queue of the music task, the user\ninterface is continuing to run and rendering the frame as fast as\npossible. We are not wasting time on handling the play message\nimmediately. But, when the rendering is done and the ui task is\nwaiting before rendering the next frame, the scheduler will change the\nexecution to the music task, which will handle the incoming messages."),Object(s.b)("p",null,"Similary we can also give the user interface an input queue. The music\ntask can then send a notification message e.g. when the song has\nended. The user interface task should not wait for a message, but\nquickly check if a message is available without blocking, and read it\nin case."),Object(s.b)("p",null,"This setup gives a very loose connection between the tasks in the\nsystem. We can actually test the music task without using the user\ninterface, and we can also easily start music from the bluetooth task."),Object(s.b)("h3",{id:"handling-interrupts"},"Handling interrupts"),Object(s.b)("p",null,"Some tasks needs to run as a response to an interrupts. In our example\nthe bluetooth communication task is such an example. We want that task\nto run when the bluetooth chip has a new package for us. Assuming that\nwe can get an interrupt in that case, we can send a message from the\ninterrupt handler:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void BT_DataAvailable_Handler(void)\n{\n  os_send_message(bt_data_queue, data_available_message);\n}\n")),Object(s.b)("p",null,"Other synchronization primitives than queues are also\navailable. Semaphores and mutexes for example are found in many\noperating systems."),Object(s.b)("h3",{id:"freertos"},"FreeRTOS"),Object(s.b)("p",null,"TouchGFX is tested with the FreeRTOS operating system during\ndevelopment. TouchGFX has very little requirements and can run on many\nother operating systems, but FreeRTOS is a good\nstarting point unless you have some specific requirements."),Object(s.b)("p",null,"FreeRTOS is a simple operating system that is free to use in\ncommercial application. It is supplied in source code with the STM32\nCube firmware with ready to use examples for all STM32\nmicrocontrollers."),Object(s.b)("p",null,"See ",Object(s.b)(r.a,{to:"https://www.freertos.org/",mdxType:"Link"},"freertos.org")," for\nfurther information and license terms for FreeRTOS."),Object(s.b)("h3",{id:"touchgfx-os-wrappers"},"TouchGFX OS Wrappers"),Object(s.b)("p",null,"TouchGFX in its default configuration runs on FreeRTOS and uses a\nsingle message queue to synchronize with the display controller and a\nsemaphore to guard the access to the framebuffer."),Object(s.b)("p",null,"This is handled by the OSWrappers class defined in\n",Object(s.b)("inlineCode",{parentName:"p"},"touchgfx/os/OSWrappers.cpp"),". This class has the following methods:"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Method"),Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"signalVSync()"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"This method should be called from the display driver when the display is ready for the next frame.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"waitForVSync();"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by the graphics engine to wait. Should not return until signalVSync is called.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"takeFrameBufferSemaphore()"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called by the graphics engine and the accelerator to gain direct access to the framebuffer")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"giveFrameBufferSemaphore()"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Called to release the direct access again.")))),Object(s.b)("p",null,"The default implementation uses a message queue to implement the VSync\n(frame) synchronization. The graphics engine task is sleeping until\nthe next VSync arrives."),Object(s.b)("p",null,"This OSWrapper class is generated by the TouchGFX Generator. Read more\nabout the Generator\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/development/touchgfx-hal-development/touchgfx-generator#real-time-operating-system"}),"here"),"."),Object(s.b)("h2",{id:"no-rtos"},"No RTOS"),Object(s.b)("p",null,"TouchGFX can also run without an operating system. In this case you\nmust start the graphics enging main loop directly in your main:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"int main()\n{\n    ...\n    touchgfx::HAL::getInstance()->taskEntry();\n\n    //never returns\n}\n")),Object(s.b)("p",null,"Not using an RTOS does not lower the performance of TouchGFX. It may\nincrease the MCU load and it will make it more difficult to run other\ntasks together with TouchGFX."),Object(s.b)("p",null,"As described above you now need to drive any other task manually while\nthe user interface is running in your main."),Object(s.b)("h3",{id:"modeltick"},"Model::tick"),Object(s.b)("p",null,"One way is to perform a task check in the Model class once in every\nframe:"),Object(s.b)(o.a,{mdxType:"CodeHeader"},"Model.cpp"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void Model::tick()\n{\n   //run other tasks here\n   music_task_tick();\n   bluetooth_task_tick();\n}\n")),Object(s.b)("p",null,"Using this method all tasks will be executed once in every frame. The\ntime consumed by the tasks will be added to the rendering time of the\nuser interface. This is a simple and acceptable solution for simple\nsystems, where all tasks can terminate quickly."),Object(s.b)("h3",{id:"oswrappers"},"OSWrappers"),Object(s.b)("p",null,"Another method is to use the hooks in the OSWrappers class. As\nexplained above the graphics engine calls method on this class when it\nneeds to wait for events. You can use this to do other work while\nwaiting for said events:"),Object(s.b)(o.a,{mdxType:"CodeHeader"},"OSWrappers.cpp"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"static volatile uint8_t vsync_sem = 0;\n\nvoid OSWrappers::signalVSync()\n{\n    vsync_sem = 1;\n}\n\nvoid OSWrappers::waitForVSync()\n{\n    do {\n        // Perform other work while waiting\n        music_task_tick();\n        bluetooth_task_tick();\n    } while(!vsync_sem);\n    vsync_sem = 0;\n}\n")),Object(s.b)("p",null,"Using this method the idle task between the frame can be fully used by\nthe other tasks, but the amount of time the tasks get will vary."),Object(s.b)("p",null,"It is important that the tasks can divide their work in to small steps\nof maybe 1 millisecond. Otherwise it will hurt the user interface\nperformance."))}m.isMDXComponent=!0},511:function(e,t,n){"use strict";var a=n(5),i=n(0),s=n.n(i),r=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e=this.props.noShadow||!1,t=this.props.width,n=this.props.height;return e?s.a.createElement("div",{class:"figure noshadow"},s.a.createElement("a",{href:this.props.imageSource,target:"_blank"},s.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),s.a.createElement("p",null,this.props.caption)):s.a.createElement("div",{class:"figure"},s.a.createElement("a",{href:this.props.imageSource,target:"_blank"},s.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),s.a.createElement("p",null,this.props.caption))},t}(i.Component);t.a=r},513:function(e,t,n){"use strict";var a=n(5),i=n(0),s=n.n(i),r=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return s.a.createElement("div",{class:"code-header"},s.a.createElement("div",null,s.a.createElement("h5",null,this.props.children)))},t}(i.Component);t.a=r},519:function(e,t,n){"use strict";n(520);var a=n(5),i=n(0),s=n.n(i),r=n(510),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e="/docs/api/"+this.props.link;return(s.a.createElement(r.a,{to:e},this.props.children))},t}(i.Component);t.a=o},520:function(e,t,n){"use strict";n(521)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},521:function(e,t,n){var a=n(12),i=n(13),s=n(24),r=/"/g,o=function(e,t,n,a){var i=String(s(e)),o="<"+t;return""!==n&&(o+=" "+n+'="'+String(a).replace(r,"&quot;")+'"'),o+">"+i+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(o),a(a.P+a.F*i((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}}}]);