(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{178:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return h}));var a=n(1),o=n(9),r=(n(0),n(215)),i=n(216),c=n(223),l={id:"code-structure",title:"Code Structure"},s={id:"Development/UIDevelopment/software-architecture/code-structure",title:"Code Structure",description:"import Figure from '@site/components/Figure';\r",source:"@site/docs\\Development\\UIDevelopment\\software-architecture\\code-structure.mdx",permalink:"/docs/Development/UIDevelopment/software-architecture/code-structure",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/Development/UIDevelopment/UIDevelopmentIntroduction"},next:{title:"Creating a new Application",permalink:"/docs/Development/UIDevelopment/WorkingWithTouchGFX/CreatingANewApplication"}},u=[{value:"Separate the generated code from user code",id:"separate-the-generated-code-from-user-code",children:[]},{value:"Open Architecture",id:"open-architecture",children:[]},{value:"Example",id:"example",children:[{value:"TouchGFX Designer View",id:"touchgfx-designer-view",children:[]},{value:"Layers",id:"layers",children:[]},{value:"Code",id:"code",children:[]}]},{value:"Rolling your own",id:"rolling-your-own",children:[]}],d={rightToc:u},p="wrapper";function h(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)(p,Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"One side of creating a user interface in TouchGFX Designer is designing the actual interface, having the right screens, the right widgets positioned at the right locations, making everything look and feel the right way."),Object(r.b)("p",null,"Another side is the code that actually ends up on your embedded target. This code needs to be as small, simple, maintainable and as efficient as possible.",Object(r.b)("br",{parentName:"p"}),"\n","TouchGFX Designer generates automatically TouchGFX C++ code of the highest quality."),Object(r.b)("p",null,"This articles explains the structure of the code generated by the Designer and how you can expand the code and insert your own additional code."),Object(r.b)("h2",{id:"separate-the-generated-code-from-user-code"},"Separate the generated code from user code"),Object(r.b)("p",null,"The code generated by the tool will be completely separate from the code written by you. In fact the generated code is placed in the folder ",Object(r.b)("inlineCode",{parentName:"p"},"generated/gui_generated"),", whereas the handwritten code (that you eventually will update) is in the ",Object(r.b)("inlineCode",{parentName:"p"},"gui")," folder."),Object(r.b)("p",null,"The generated gui code serves as base classes for the classes you will add code to. The base classes contain all the setup code configured in TouchGFX Designer. A class diagram shows the relationship of the classes."),Object(r.b)(i.a,{imageSource:"/img/Development/UIDevelopment/software-architecture/code-structure/code-levels.png",caption:"Code levels",mdxType:"Figure"}),Object(r.b)("p",null,"The layering shows the 3 layers of code involved in a TouchGFX application created by TouchGFX Designer."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Engine")," - these classes are the standard classes provided by TouchGFX. These act as base classes for the generated classes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Generated")," - these classes and corresponding files will be regenerated whenever you make a change in TouchGFX Designer. Therefore you should not change any of these classes and files manually. Your changes will be removed on the next run of the code generator. These classes are base classes for the user classes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"User")," - these classes are intended for your code. You are free to put the code you want in these. The user classes will be generated if not present, but will never be altered by TouchGFX Designer. They are ",Object(r.b)("em",{parentName:"li"},"your")," classes.")),Object(r.b)("h2",{id:"open-architecture"},"Open Architecture"),Object(r.b)("p",null,"The architecture of the applications generated by the Designer is open in the sense that there should be no limits to what you can create. If something, e.g. an animation or effect, is not supported by TouchGFX Designer or is not easy to do without having access to code, it is possible and easy to do it in the user classes.",Object(r.b)("br",{parentName:"p"}),"\n","The code generated by TouchGFX Designer is by design not allowed to restrict you in your way of doing TouchGFX applications."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"A somewhat simplified example of an application having both generated and user code will be given below. This should illustrate the aspects above in more detail."),Object(r.b)("h3",{id:"touchgfx-designer-view"},"TouchGFX Designer View"),Object(r.b)("p",null,"The following example has just one screen. The screen ",Object(r.b)("inlineCode",{parentName:"p"},"MyScreen")," consists of a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/UIComponents/Shapes/Box"}),"Box")," ",Object(r.b)("inlineCode",{parentName:"p"},"box1")," and a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/UIComponents/Buttons/Button"}),"Button")," ",Object(r.b)("inlineCode",{parentName:"p"},"button1"),". We have set up an interaction to call the virtual function ",Object(r.b)("inlineCode",{parentName:"p"},"setRandomColor()")," when ",Object(r.b)("inlineCode",{parentName:"p"},"button1")," is clicked."),Object(r.b)(i.a,{imageSource:"/img/Development/UIDevelopment/software-architecture/code-structure/designer-application.png",caption:"TouchGFX Designer application",mdxType:"Figure"}),Object(r.b)("p",null,"Whenever we press the button we would like to change the color of the background box to a new random color. This behaviour is not something that can be described directly in TouchGFX Designer, so we will do this in user code."),Object(r.b)("h3",{id:"layers"},"Layers"),Object(r.b)("p",null,"Looking at the classes involved in the code generated for this example:"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/hc/article_attachments/205353045/example_code.png",alt:"layering example"}))),Object(r.b)("p",null,"We see that"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"MyViewBase, FrontendApplicationBase and FrontendHeapBase are in generated space, implying that:  ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"They will be regenerated whenever a change is made in TouchGFX Designer"),Object(r.b)("li",{parentName:"ul"},"You should not manually edit these classes"))),Object(r.b)("li",{parentName:"ul"},"MyView, MyPresenter, FrontendApplication and FrontendHeap are created in the user code space  ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"These will not be regenerated when changes are made in TouchGFX Designer"),Object(r.b)("li",{parentName:"ul"},"You are free to add your custom code here")))),Object(r.b)("p",null,"All the setup of box1, image1 and button1 is done in the generated view base class, MyScreenViewBase.",Object(r.b)("br",{parentName:"p"}),"\n","All the methods for transitioning between screens are in the generated application base class, FrontendApplicationBase.",Object(r.b)("br",{parentName:"p"}),"\n","All the book keeping, making sure that the right amount of memory is allocated, is in the generated heap base class, FrontendHeapBase."),Object(r.b)("p",null,"You are free to edit the user generated classes. For instance you could add more widgets. For now we will just implement the ",Object(r.b)("inlineCode",{parentName:"p"},"button1Clicked")," method to actually change the color of box1."),Object(r.b)("h3",{id:"code"},"Code"),Object(r.b)("p",null,"A brief look at the code should illustrate the separation of generated and user code. Looking at the view base code, we see all the setup of the box, image and button. All generated by TouchGFX Designer. We also see the setup of and the call to the virtual method ",Object(r.b)("inlineCode",{parentName:"p"},"button1Clicked"),". We will specialize this in our own user code."),Object(r.b)(c.a,{mdxType:"CodeHeader"},"MyApplication/generated/gui_generated/src/my_screen/MyViewBase.cpp"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),'/*********************************************************************************/\n/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/\n/*********************************************************************************/\n#include <gui_generated/my_screen/MyViewBase.hpp>\n#include <touchgfx/Color.hpp>\n#include "BitmapDatabase.hpp"\n\nMyViewBase::MyViewBase()  :\n      buttonCallback(this, &MyViewBase::buttonCallbackHandler)\n{\n    box1.setPosition(0,0,800,480);\n    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(0,0,0));\n    image1.setBitmap(Bitmap(BITMAP_IMAGE_ID));\n    image1.setXY(40, 24);\n    button1.setPosition(253, 210, 294, 61);\n    button1.setBitmaps(Bitmap(BITMAP_UP_ID), Bitmap(BITMAP_DOWN_ID));\n    button1.setAction(buttonCallback);\n\n    add(box1);\n    add(image1);\n    add(button1);\n}\n\nvoid MyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)\n{\n    if (&src == &button1)\n    {\n        button1Clicked();\n    }\n}\n')),Object(r.b)("p",null,"In the user code we will implement the button clicked method to do the actual switching of colors."),Object(r.b)(c.a,{mdxType:"CodeHeader"},"MyApplication/gui/src/my_screen/MyView.cpp"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"#include <gui/my_screen/MyView.hpp>\n#include <touchgfx/Color.hpp>\n\nvoid MyView::button1Clicked()\n{\n  box1.setColor(Color::getColorFrom24BitRGB(rand()&0xff, rand()&0xff, rand()&0xff));\n  box1.invalidate();\n}\n")),Object(r.b)("p",null,"Having added this short piece of custom code to MyView.cpp (and declaration in MyView.hpp) we are able to click the button and get the color of the box changing. We can navigate to the generated code on disk and compile as we usually do - using Make/GCC, Visual Studio or our preferred IDE."),Object(r.b)("h2",{id:"rolling-your-own"},"Rolling your own"),Object(r.b)("p",null,"Of course you don\u2019t need to use any features of the code generated by TouchGFX Designer. You can go ahead and do your applications the classic TouchGFX way."),Object(r.b)("p",null,"Or you can mix and match."),Object(r.b)("p",null,"You can have screens that are not defined within TouchGFX Designer. You can add the ",Object(r.b)("inlineCode",{parentName:"p"},"gotoXYZ")," methods to the ",Object(r.b)("inlineCode",{parentName:"p"},"FrontendApplication")," class and add the views, presenters and transitions you need for your screen to the ",Object(r.b)("inlineCode",{parentName:"p"},"FrontendHeap"),"."))}h.isMDXComponent=!0},215:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},d=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,b=d["".concat(i,".").concat(p)]||d[p]||h[p]||r;return n?o.a.createElement(b,c({ref:t},s,{components:n})):o.a.createElement(b,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},216:function(e,t,n){"use strict";var a=n(5),o=n(0),r=n.n(o),i=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e=this.props.noShadow||!1,t=this.props.width,n=this.props.height;return e?r.a.createElement("div",{class:"figure noshadow"},r.a.createElement("a",{href:this.props.imageSource,target:"_blank"},r.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),r.a.createElement("p",null,this.props.caption)):r.a.createElement("div",{class:"figure"},r.a.createElement("a",{href:this.props.imageSource,target:"_blank"},r.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),r.a.createElement("p",null,this.props.caption))},t}(o.Component);t.a=i},223:function(e,t,n){"use strict";var a=n(5),o=n(0),r=n.n(o),i=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return r.a.createElement("div",{class:"code-header"},r.a.createElement("div",null,r.a.createElement("h5",null,this.props.children)))},t}(o.Component);t.a=i}}]);