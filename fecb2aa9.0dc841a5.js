(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{222:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return h})),n.d(t,"rightToc",(function(){return m})),n.d(t,"default",(function(){return b}));var a=n(1),i=n(9),r=(n(0),n(227)),o=n(229),c=(n(245),n(231)),s=(n(232),n(230)),l=(n(234),n(266)),p={id:"AchievingBetterPerformanceWithCacheableContainer",title:"Achieving Better Performance with CacheableContainer"},h={id:"Development/UIDevelopment/Scenarios/AchievingBetterPerformanceWithCacheableContainer",title:"Achieving Better Performance with CacheableContainer",description:"import Figure from '@site/components/Figure';",source:"@site/docs\\Development\\UIDevelopment\\Scenarios\\AchievingBetterPerformanceWithCacheableContainer.mdx",permalink:"/docs/Development/UIDevelopment/Scenarios/AchievingBetterPerformanceWithCacheableContainer",sidebar:"docs",previous:{title:"General UI Component Performance",permalink:"/docs/Development/UIDevelopment/UIComponents/GeneralUIComponentPerformance"},next:{title:"Loading Images at Runtime",permalink:"/docs/Development/UIDevelopment/Scenarios/LoadingImagesAtRuntime"}},m=[{value:"Performance impact",id:"performance-impact",children:[]},{value:"Test application",id:"test-application",children:[]},{value:"Performance of redrawing complex containers",id:"performance-of-redrawing-complex-containers",children:[]},{value:"Improving performance through caching",id:"improving-performance-through-caching",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],u={rightToc:m},d="wrapper";function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)(d,Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When moving Widgets in your application (like Image or TextArea), either through dragging or animating, TouchGFX needs to redraw these widgets in their new positions in every frame, and in most cases redraw part of the background that was previously covered by these widgets."),Object(r.b)("p",null,"When these widgets are computationally complex such as the TextureMapper widget, shapes, and also large transparent Images it is hard for the MCU to render effeciently without hardware acceleration resulting in a redraw that takes many milliseconds. This leads to long render times impacting the performance of the application."),Object(r.b)("p",null,"In this article you will learn how to use the CacheableContainer to speed up animations that involve computationally complex elements in order to avoid redrawing.  While measurements in this article were performed using the STM32F429Discovery board, the CacheableContainer technique applies generally to other hardware platforms. Some available RAM is required for creation of a bitmap cache."),Object(r.b)("h2",{id:"performance-impact"},"Performance impact"),Object(r.b)("p",null,"Due to the performance implications of moving computationally expensive widgets with the MCU an animation that evolves in many, small steps will appear slow and sluggish due to a high render time for each frame. Programming the animation to be faster will cause individual steps to be large, and the animation will not appear smooth to the user."),Object(r.b)("p",null,"The following is an example running on an STM32F429-DISCO board (240x320), where a full screen Container is moved up, vertically, and a new, similar Container, is moved in from the bottom."),Object(r.b)("p",null,"In the video the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/UIComponents/Buttons/ToggleButton"}),"ToggleButton")," switches between CacheableContainer being enabled and disabled. The difference is clearly visible."),Object(r.b)(l.a,{url:"http://sw-center-st-com.s3-eu-west-1.amazonaws.com/touchgfx/TouchGFX/knowledgebase/Cacheable%20Container/Cacheable%20Container%20example.mp4",mdxType:"Video"}),Object(r.b)("p",null,"The two Containers we are moving each consist of a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/UIComponents/Shapes/Box"}),"Box")," (background), a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/UIComponents/Miscellaneous/TextArea"}),"TextArea"),", and a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/Development/UIDevelopment/UIComponents/Images/TextureMapper"}),"TextureMapper"),". The TextureMapper is configured to use the Bilinear rendering algorithm and a global alpha of 174, making it very expensive to draw. The rendering time for the whole screen is around 100 ms on the STM32F429-DISCO board."),Object(r.b)("h2",{id:"test-application"},"Test application"),Object(r.b)("p",null,"In order to move the two elements relative to each other they're put in a parent Container twice the height of either, giving it a size of 240 x 640 (2*320). By declaring the container as a move animator it will be able to receive application ticks and animate over time during which performance can be measured."),Object(r.b)(o.a,{imageSource:"/img/Development/UIDevelopment/Scenarios/AchievingBetterPerformanceWithCacheableContainer/toucgfx-designer-test-application-overview.png",caption:"CacheableContainer test application overview",mdxType:"Figure"}),Object(r.b)("p",null,"The upper container (container1) is placed at position x=0, y=0. The lower container (container2) is placed at position x=0, y=320 directly below container1."),Object(r.b)("p",null,"Since container1 and container2 are placed in the masterContainer, the two elements will move together when we move the masterContainer. If we e.g. move the masterContainer to position x=0, y=-320, container1 will be invisible, but container2 will be fully visible. The animation between these two states can be created using an interaction in the TouchGFX Designer."),Object(r.b)("p",null,"The code below will move the masterContainer up, if it is down, and down if it is already up. For simplicity the code is inserted into the handleClickEvent eventhandler of the view, and is therefore executed whenever the user touches anywhere on the screen:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void Screen1View::handleClickEvent(const ClickEvent& evt)\n{\n    //Forward event to base View (for Button to work)\n    View::handleClickEvent(evt);\n    //If touch is released and y > 50, move masterContainer\n    if (evt.getType() == ClickEvent::RELEASED && evt.getY() > 50)\n    {\n        const int endPosition = masterContainer.getY() >= 0 ? -320 : 0;\n        masterContainer.startMoveAnimation(masterContainer.getX(), endPosition,\n                            20 /* ticks */,\n                            EasingEquations::cubicEaseInOut,\n                            EasingEquations::cubicEaseInOut);\n    }\n}\n")),Object(r.b)("h2",{id:"performance-of-redrawing-complex-containers"},"Performance of redrawing complex containers"),Object(r.b)("p",null,"As mentioned, the render time for one frame is around 100 ms when the MCU has to redraw the expensive texturemapper at each small step of the animation. This gives us 10 frames pr second (fps). The whole animation is 20 frames which will take around two seconds."),Object(r.b)("p",null,"On the STM32F429-DISCO the rendering time is available as digital signal on GPIO G14. The VSYNC signal is available on G13 which is set up in the GPIO.cpp file."),Object(r.b)("p",null,"The following image is a measurement of VSYNC and RENDER_TIME for the application when moving the masterContainer upwards:"),Object(r.b)(o.a,{imageSource:"/img/Development/UIDevelopment/Scenarios/AchievingBetterPerformanceWithCacheableContainer/saleae-logic-software-vsync-and-render-time.png",caption:"Saleae Logic Software Vsync and Render Time measurement",mdxType:"Figure"}),Object(r.b)("p",null,"The rendering time is the first signal (active low). We can see that the rendering time for the first frame in the move animation is 99.29 ms."),Object(r.b)("p",null,"The lower signal is the VSYNC, which transitions high to low on every frame when pixels are clocked out. We can see on the measurement above that drawing a single frame covers the time for 7 frames on the display. On the 8th VSYNC signal the rendering of the next frame starts. During the rendering, the display is showing the previously drawn frame."),Object(r.b)("h2",{id:"improving-performance-through-caching"},"Improving performance through caching"),Object(r.b)("p",null,"We can improve the performance of the above move animation by caching the rendering of the container to memory such that we can simply move the pixels located in that memory, small steps at a time using DMA, rather than redrawing a complex widget often using the MCU. Even if an application could achieve 60 frames per second using the MCU alone it would be busy (Perhaps 100% MCU load) making the same calculations often rather than doing something more important."),Object(r.b)("p",null,'This "in-memory-image" of the container can now be shown on the screen at different places, using a DynamicBitmap, instead of re-rendering the container.'),Object(r.b)("p",null,"The first thing to do is to enable caching in the Designer by checking the Cacheable property on the two Containers, container1, and container2:"),Object(r.b)(o.a,{imageSource:"/img/Development/UIDevelopment/Scenarios/AchievingBetterPerformanceWithCacheableContainer/cacheable-container-option-in-touchgfx-designer.png",caption:"CacheableContainer option on Container widget",mdxType:"Figure"}),Object(r.b)("p",null,"The next step is to create two dynamic bitmaps in RAM that the Containers can be cached into."),Object(r.b)("p",null,"Decide an address in RAM where the bitmap cache should be located. In this particular we placed it in SDRAM (starts at addres 0xd0000000 on an STM32F429) just after the framebuffers."),Object(r.b)("p",null,"For the Windows simulator the cache is allocated in a global variable:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"#ifdef SIMULATOR\n    uint32_t sdramBuffer[8*1024*1024/4];\n    uint16_t* sdram = (uint16_t*)sdramBuffer;\n#else\n    uint16_t* sdram = (uint16_t*)(0xd0000000 + 320*240*2*2);\n#endif\n")),Object(r.b)("p",null,"Initialize the bitmap cache and create two dynamic bitmaps for caching:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"//Create bitmap cache and two dynamic bitmap for caching\nBitmap::setCache(sdram, 320*1024, 2); //320Kb cache\ndynamicBitmap1 = Bitmap::dynamicBitmapCreate(240, 320, Bitmap::RGB565);\ndynamicBitmap2 = Bitmap::dynamicBitmapCreate(240, 320, Bitmap::RGB565);\n")),Object(r.b)("p",null,"Assign the dynamic bitmaps to the Containers and set them in caching mode:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"//Assign the bitmaps to the CacheableContainers\ncontainer1.setCacheBitmap(dynamicBitmap1);\ncontainer2.setCacheBitmap(dynamicBitmap2);\n\n//Enable caching\ncontainer1.enableCachedMode(true);\ncontainer2.enableCachedMode(true);\n\n//Finally update the cached bitmaps\ncontainer1.updateCache();\ncontainer2.updateCache();\n")),Object(r.b)("p",null,"Calls to Container::updateCache() will render the containers into their respective bitmaps. Call this method whenever an updated state of the containers is needed. This must be handled in application code by the developer."),Object(r.b)("p",null,"With caching enabled for container1 and container2 performance measurements now show a factor 20 improvement in render time from ~99ms to ~5ms meaning we can easily render in 60 frames per second completing the entire animation within 20 frames."),Object(r.b)(o.a,{imageSource:"/img/Development/UIDevelopment/Scenarios/AchievingBetterPerformanceWithCacheableContainer/saleae-logic-software-comparison.png",caption:"Saleae Logic Software Vsync and Render Time measurement",mdxType:"Figure"}),Object(r.b)("h2",{id:"conclusion"},"Conclusion"),Object(r.b)("p",null,"Using Cacheable Container with DynamicBitmap when animating (frequent moves) can improve the render time dramatically when the subject is computationally complex and does not change between animation steps. In the event that the cache must update (e.g. a watch face) the contents of the cache can be recomputed at certain points during the animation."),Object(r.b)(c.a,{mdxType:"FurtherReading"},Object(r.b)("li",null,Object(r.b)(s.a,{to:"/docs/Development/UIDevelopment/Scenarios/UsingNonMemoryMappedFlashForStoringImages",mdxType:"Link"},"Using Non-Memory Mapped Flash for Storing Images")),Object(r.b)("li",null,Object(r.b)(s.a,{to:"/docs/Development/UIDevelopment/Scenarios/LoadingImagesAtRuntime",mdxType:"Link"},"Dynamic Bitmaps: Load images at runtime"))))}b.isMDXComponent=!0},227:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return b}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},h=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,d=h["".concat(o,".").concat(m)]||h[m]||u[m]||r;return n?i.a.createElement(d,c({ref:t},l,{components:n})):i.a.createElement(d,c({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[m]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},228:function(e,t,n){"use strict";var a=n(5),i=n(0),r=n.n(i),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e="highlight highlight-"+this.props.type;return r.a.createElement("div",{class:e},r.a.createElement("div",{class:"highlight-heading"},r.a.createElement("h5",null,r.a.createElement("div",{class:"highlight-icon"},this.props.icon),this.props.header)),r.a.createElement("div",{class:"highlight-content"},this.props.children))},t}(i.Component);t.a=o},229:function(e,t,n){"use strict";var a=n(5),i=n(0),r=n.n(i),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){var e=this.props.noShadow||!1,t=this.props.width,n=this.props.height;return e?r.a.createElement("div",{class:"figure noshadow"},r.a.createElement("a",{href:this.props.imageSource,target:"_blank"},r.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),r.a.createElement("p",null,this.props.caption)):r.a.createElement("div",{class:"figure"},r.a.createElement("a",{href:this.props.imageSource,target:"_blank"},r.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),r.a.createElement("p",null,this.props.caption))},t}(i.Component);t.a=o},230:function(e,t,n){"use strict";var a=n(1),i=n(0),r=n.n(i),o=n(34),c=/^\/(?!\/)/;t.a=function(e){var t,n=e.to,s=e.href,l=n||s,p=c.test(l),h=Object(i.useRef)(!1),m="undefined"!=typeof window&&"IntersectionObserver"in window;return Object(i.useEffect)((function(){return!m&&p&&window.docusaurus.prefetch(l),function(){m&&t&&t.disconnect()}}),[l,m,p]),l&&p?r.a.createElement(o.b,Object(a.a)({},e,{onMouseEnter:function(){h.current||(window.docusaurus.preload(l),h.current=!0)},innerRef:function(e){var n,a;m&&e&&p&&(n=e,a=function(){window.docusaurus.prefetch(l)},(t=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(t.unobserve(n),t.disconnect(),a())}))}))).observe(n))},to:l})):r.a.createElement("a",Object(a.a)({},e,{href:l}))}},231:function(e,t,n){"use strict";var a=n(5),i=n(0),r=n.n(i),o=n(228),c=r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},r.a.createElement("path",{"fill-rule":"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return r.a.createElement(o.a,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:c},this.props.children)},t}(i.Component);t.a=s},232:function(e,t,n){"use strict";var a=n(5),i=n(0),r=n.n(i),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return r.a.createElement("code",null,this.props.text)},t}(i.Component);t.a=o},234:function(e,t,n){"use strict";var a=n(5),i=n(0),r=n.n(i),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return r.a.createElement("div",{class:"code-header"},r.a.createElement("div",null,r.a.createElement("h5",null,this.props.children)))},t}(i.Component);t.a=o},245:function(e,t,n){"use strict";var a=n(5),i=n(0),r=n.n(i),o=n(228),c=r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},r.a.createElement("path",{"fill-rule":"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return r.a.createElement(o.a,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:c},this.props.children)},t}(i.Component);t.a=s},266:function(e,t,n){"use strict";var a=n(5),i=n(0),r=n.n(i),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(a.a)(t,e),t.prototype.render=function(){return r.a.createElement("p",null,r.a.createElement("div",{class:"videoWrapper"},r.a.createElement("video",{controls:!0},r.a.createElement("source",{src:this.props.url,type:"video/mp4"}))))},t}(i.Component);t.a=o}}]);