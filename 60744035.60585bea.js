(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{189:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return u})),r.d(t,"metadata",(function(){return g})),r.d(t,"rightToc",(function(){return O})),r.d(t,"default",(function(){return f}));var n=r(1),a=r(9),i=(r(0),r(270)),o=r(271),c=r(280),b=r(283),s=r(281),p=r(284),l=r(272),d=r(276),m=r(279),u={id:"text-progress",title:"TextProgress"},g={id:"development/ui-development/ui-components/progress-indicators/text-progress",title:"TextProgress",description:"import Figure from '@site/components/Figure'\r",source:"@site/docs\\development\\ui-development\\ui-components\\progress-indicators\\text-progress.mdx",permalink:"/docs/development/ui-development/ui-components/progress-indicators/text-progress",sidebar:"docs",previous:{title:"ImageProgress",permalink:"/docs/development/ui-development/ui-components/progress-indicators/image-progress"},next:{title:"LineProgress",permalink:"/docs/development/ui-development/ui-components/progress-indicators/line-progress"}},O=[{value:"Widget Group",id:"widget-group",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Interactions",id:"interactions",children:[{value:"Actions",id:"actions",children:[]},{value:"Triggers",id:"triggers",children:[]}]},{value:"Performance",id:"performance",children:[]},{value:"Examples",id:"examples",children:[{value:"Generated Code",id:"generated-code",children:[]},{value:"User Code",id:"user-code",children:[]},{value:"TouchGFX Designer Examples",id:"touchgfx-designer-examples",children:[]}]},{value:"API Reference",id:"api-reference",children:[]}],j={rightToc:O},h="wrapper";function f(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)(h,Object(n.a)({},j,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A TextProgress will display progress as a number with a given number of decimals. It shows the current progress by using a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/miscellaneous/text-area"}),"TextArea")," as the progress indicator on top of a background ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/images/image"}),"Image"),". The ",Object(i.b)(s.a,{name:"Color",mdxType:"Property"}),", the ",Object(i.b)(s.a,{name:"Alpha",mdxType:"Property"})," and the ",Object(i.b)(s.a,{name:"Text",mdxType:"Property"})," of the TextArea can be configured.\nIt is possible to create a custom background image and change the different parameters of the progress indicator such as the position and the size to fit the custom background image."),Object(i.b)(o.a,{imageSource:"/img/development/ui-development/ui-components/text-progress/widget-appearance.gif",caption:"TextProgress running in the simulator",mdxType:"Figure"}),Object(i.b)("h2",{id:"widget-group"},"Widget Group"),Object(i.b)("p",null,"The TextProgress can be found in the Progress Indicators widget group."),Object(i.b)(o.a,{imageSource:"/img/development/ui-development/ui-components/text-progress/widget-group.png",caption:"TextProgress in TouchGFX Designer",mdxType:"Figure"}),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)("p",null,"The properties for a TextProgress in TouchGFX Designer."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Property Group")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Property Descriptions")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Name")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"Name",mdxType:"Property"})," of the widget. ",Object(i.b)(l.a,{text:"Name is the unique identifier used in TouchGFX Designer and code.",mdxType:"InlineNote"}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Location")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"X",mdxType:"Property"})," and ",Object(i.b)(s.a,{name:"Y",mdxType:"Property"})," specify the top left corner of the widget relative to its parent.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"W",mdxType:"Property"})," and ",Object(i.b)(s.a,{name:"H",mdxType:"Property"})," specify the width and height of the widget.",Object(i.b)("br",null),Object(i.b)(l.a,{text:"The size of a TextProgress is determined by the size of the selected background image.",mdxType:"InlineNote"}),Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"Visible",mdxType:"Property"})," specifies the visibility of the widget. ",Object(i.b)(l.a,{text:"Making the widget invisible also disables interacting with the widget through the screen",mdxType:"InlineNote"}),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Style")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"Style",mdxType:"Property"})," specifies a predefined setup of the widget, that sets select properties to predefined values.",Object(i.b)("br",null),Object(i.b)(l.a,{text:"These styles contain images that are free to use",mdxType:"InlineNote"}),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Image")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"Background",mdxType:"Property"})," specifies the background image.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Text")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"Text",mdxType:"Property"}),' specifies the text displayed. The text field is automatically set to use a wildcard "<',">",' %" which means that the wildcard created will be filled with a number that fits the progress configuration. This wildcard is mandatory for the TextProgress to work correctly but any other text can be set before and/or after the wildcard. For more details on text configuration, refer to the ',Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/development/ui-development/touchgfx-engine-features/texts-and-fonts"}),"Texts and Fonts")," section.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Text Position & Size")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"X",mdxType:"Property"})," and ",Object(i.b)(s.a,{name:"Y",mdxType:"Property"})," specify the top left corner of the progress text relative to its TextProgress parent.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"W",mdxType:"Property"})," and ",Object(i.b)(s.a,{name:"H",mdxType:"Property"})," specify the width and height of the progress text.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Values")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"Range Min",mdxType:"Property"})," and ",Object(i.b)(s.a,{name:"Range Max",mdxType:"Property"})," specify the minimum and maximum integer values of the indicator.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"Initial",mdxType:"Property"})," specifies the initial value of the progress indicator.",Object(i.b)(s.a,{name:"Steps Total",mdxType:"Property"})," specifies at what granularity the progress indicator reports new values. For instance, if the progress needs to be reported as 0%, 10%, 20%, ..., 100%, the total value should be set to 10.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"Steps Min",mdxType:"Property"})," specifies the minimum steps the progress indicator shows.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"Number of Decimals",mdxType:"Property"})," specifies the precision required to show progress. The possible values are 0, 1 or 2.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Appearance")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"Color",mdxType:"Property"})," specifies the color of the displayed text.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"Alpha",mdxType:"Property"})," specifies the transparency of the widget. ",Object(i.b)(l.a,{text:"The alpha value ranges between 0 and 255 for the widget. 0 is fully transparent and 255 is solid.",mdxType:"InlineNote"}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Mixins")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)(s.a,{name:"Draggable",mdxType:"Property"})," specifies if the widget is draggable at runtime.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"ClickListener",mdxType:"Property"})," specifies if the widget emits a callback when clicked.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"FadeAnimator",mdxType:"Property"})," specifies if the widget can animate changes to its ",Object(i.b)(s.a,{name:"Alpha",mdxType:"Property"})," value.",Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)(s.a,{name:"MoveAnimator",mdxType:"Property"})," specifies if the widget can animate changes to ",Object(i.b)(s.a,{name:"X",mdxType:"Property"})," and ",Object(i.b)(s.a,{name:"Y",mdxType:"Property"})," values.")))),Object(i.b)("h2",{id:"interactions"},"Interactions"),Object(i.b)("p",null,"The actions and triggers supported by the TextProgress are described in the following sections."),Object(i.b)("h3",{id:"actions"},"Actions"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Widget specific actions")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Set value")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Set the value of the progress indicator.")))),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Standard widget actions")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Move widget")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Move a widget to a new position over time.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Fade widget")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Modify alpha value of widget over time.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Hide widget")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Hides a widget (sets visibility to false).")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Show widget")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Make a hidden widget visible (sets visibility to true).")))),Object(i.b)("h3",{id:"triggers"},"Triggers"),Object(i.b)("p",null,"The TextProgress widget does not emit any triggers."),Object(i.b)("h2",{id:"performance"},"Performance"),Object(i.b)("p",null,"A TextProgress consists of a TextArea and a background Image. Text drawing is very similar to general image drawing (though due to the nature of text characters, a significant amount of alpha blending takes place). Therefore, the TextProgress is considered a fast widget on most platforms."),Object(i.b)("p",null,"For more details on text drawing performance, read the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/general-ui-component-performance"}),"General UI Component Performance")," section."),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)("h3",{id:"generated-code"},"Generated Code"),Object(i.b)("p",null,"In the generated code for the View base class we can see how TouchGFX Designer sets up a TextProgress."),Object(i.b)(m.a,{mdxType:"CodeHeader"},"Screen1ViewBase.cpp"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"textProgress.setXY(198, 119);\ntextProgress.setProgressIndicatorPosition(0, 0, 84, 34);\ntextProgress.setRange(0, 100);\ntextProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));\ntextProgress.setNumberOfDecimals(0);\ntextProgress.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));\ntextProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));\ntextProgress.setValue(50);\n")),Object(i.b)("h3",{id:"user-code"},"User Code"),Object(i.b)("p",null,"The following example illustrates how to implement the ",Object(i.b)("inlineCode",{parentName:"p"},"handleTickEvent()")," function to simulate progress. Running this code creates the application shown at the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/development/ui-development/ui-components/progress-indicators/text-progress"}),"beginning of this article"),"."),Object(i.b)(m.a,{mdxType:"CodeHeader"},"Screen1View.hpp"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"class Screen1View : public Screen1ViewBase\n{\npublic:\n    Screen1View();\n    virtual ~Screen1View() {}\n    virtual void setupScreen();\n    virtual void tearDownScreen();\n    virtual void handleTickEvent();\nprotected:\n    bool increase = true;\n    uint8_t counter;\n};\n")),Object(i.b)(m.a,{mdxType:"CodeHeader"},"Screen1View.cpp"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"void Screen1View::handleTickEvent()\n{\n    counter++;\n    if(counter%15 == 0) // Every 0.25 seconds\n    {\n        int currentValue = textProgress.getValue();\n        int16_t max;\n        int16_t min;\n        textProgress.getRange(min, max);\n\n        if (currentValue == min)\n        {\n            increase = true;\n        }\n        else if (currentValue == max)\n        {\n            increase = false;\n        }\n\n        int nextValue = increase == true ? currentValue+1 : currentValue-1;\n\n        counter = 0;\n        textProgress.setValue(nextValue);\n    }\n}\n")),Object(i.b)(b.a,{mdxType:"Tip"},"You can use these functions and the others available in the TextProgress class in user code. Remember to force a redraw by calling ",Object(i.b)(p.a,{text:"textProgress1.invalidate()",mdxType:"InlineCode"})," if you change the appearance of the widget."),Object(i.b)("h3",{id:"touchgfx-designer-examples"},"TouchGFX Designer Examples"),Object(i.b)("p",null,"To further explore the TextProgress, try creating a new application within TouchGFX Designer with the following UI template:"),Object(i.b)(o.a,{imageSource:"/img/development/ui-development/ui-templates/progress-indicator-example.png",caption:"ProgressIndicator Example UI template in TouchGFX Designer",mdxType:"Figure"}),Object(i.b)("h2",{id:"api-reference"},"API Reference"),Object(i.b)(c.a,{mdxType:"FurtherReading"},Object(i.b)("li",null,Object(i.b)(d.a,{link:"classtouchgfx_1_1_text_progress.html",mdxType:"API"},"API reference for the TextProgress class"))))}f.isMDXComponent=!0},272:function(e,t,r){"use strict";var n=r(5),a=r(0),i=r.n(a),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(n.a)(t,e),t.prototype.render=function(){return i.a.createElement("i",null,this.props.text)},t}(a.Component);t.a=o},276:function(e,t,r){"use strict";r(277);var n=r(5),a=r(0),i=r.n(a),o=r(273),c=function(e){function t(){return e.apply(this,arguments)||this}return Object(n.a)(t,e),t.prototype.render=function(){var e="/api/"+this.props.link;return(i.a.createElement(o.a,{to:e,target:"_blank"},this.props.children))},t}(a.Component);t.a=c},277:function(e,t,r){"use strict";r(278)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},278:function(e,t,r){var n=r(12),a=r(13),i=r(24),o=/"/g,c=function(e,t,r,n){var a=String(i(e)),c="<"+t;return""!==r&&(c+=" "+r+'="'+String(n).replace(o,"&quot;")+'"'),c+">"+a+"</"+t+">"};e.exports=function(e,t){var r={};r[e]=t(c),n(n.P+n.F*a((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",r)}},281:function(e,t,r){"use strict";r(282);var n=r(5),a=r(0),i=r.n(a),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(n.a)(t,e),t.prototype.render=function(){return i.a.createElement("i",null,this.props.name)},t}(a.Component);t.a=o},282:function(e,t,r){var n=r(25).f,a=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in a||r(10)&&n(a,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})}}]);