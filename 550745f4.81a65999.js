(window.webpackJsonp=window.webpackJsonp||[]).push([[359],{1230:function(e,t,n){"use strict";var r=n(5),a=n(0),i=n.n(a),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e="highlight highlight-"+this.props.type;return(i.a.createElement("div",{class:e},i.a.createElement("div",{class:"highlight-heading"},i.a.createElement("h5",null,i.a.createElement("div",{class:"highlight-icon"},this.props.icon),this.props.header)),i.a.createElement("div",{class:"highlight-content"},this.props.children)))},t}(a.Component);t.a=o},1232:function(e,t,n){"use strict";var r=n(5),a=n(0),i=n.n(a),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this.props.noShadow||!1,t=this.props.width,n=this.props.height;return e?i.a.createElement("div",{class:"figure noshadow"},i.a.createElement("a",{href:this.props.imageSource,target:"_blank"},i.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),i.a.createElement("p",null,this.props.caption)):i.a.createElement("div",{class:"figure"},i.a.createElement("a",{href:this.props.imageSource,target:"_blank"},i.a.createElement("img",{width:t,height:n,src:this.props.imageSource})),i.a.createElement("p",null,this.props.caption))},t}(a.Component);t.a=o},1234:function(e,t,n){"use strict";var r=n(5),a=n(0),i=n.n(a),o=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement("div",{class:"code-header"},i.a.createElement("div",null,i.a.createElement("h5",null,this.props.children)))},t}(a.Component);t.a=o},1235:function(e,t,n){"use strict";var r=n(5),a=n(0),i=n.n(a),o=n(1230),c=i.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},i.a.createElement("path",{"fill-rule":"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(o.a,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:c},this.props.children)},t}(a.Component);t.a=s},1236:function(e,t,n){"use strict";var r=n(5),a=n(0),i=n.n(a),o=n(1230),c=i.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},i.a.createElement("path",{"fill-rule":"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(o.a,{color:"var(--highlight-color-tip)",header:"Tip",type:"tip",icon:c},this.props.children)},t}(a.Component);t.a=s},1239:function(e,t,n){"use strict";var r=n(5),a=n(0),i=n.n(a),o=n(1230),c=i.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},i.a.createElement("path",{"fill-rule":"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(o.a,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:c},this.props.children)},t}(a.Component);t.a=s},1242:function(e,t,n){"use strict";var r=n(5),a=n(0),i=n.n(a),o=n(1230),c=i.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},i.a.createElement("path",{"fill-rule":"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(o.a,{color:"var(--highlight-color-try)",header:"Things to try",type:"try",icon:c},this.props.children)},t}(a.Component);t.a=s},496:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return h})),n.d(t,"default",(function(){return f}));var r=n(1),a=n(9),i=(n(0),n(1229)),o=n(1232),c=n(1239),s=(n(1236),n(1242),n(1234),n(1235)),l={id:"scenarios-fmc",title:"FMC and SPI Display Interface"},p={id:"version-4.14/development/touchgfx-hal-development/scenarios/scenarios-fmc",title:"FMC and SPI Display Interface",description:"The following scenario shows, generally, the steps involved in writing a TouchGFX driver when selecting *Custom* display interface in the TouchGFX generator using an LCD connected to either an FMC or through SPI.\r",source:"@site/versioned_docs\\version-4.14\\development\\touchgfx-hal-development\\scenarios\\scenarios-fmc.mdx",permalink:"/docs/development/touchgfx-hal-development/scenarios/scenarios-fmc",version:"4.14",sidebar:"version-4.14/docs",previous:{title:"LTDC/Parallel RGB",permalink:"/docs/development/touchgfx-hal-development/scenarios/scenarios-ltdc-parallel-rgb"},next:{title:"Framebuffer Strategies",permalink:"/docs/development/touchgfx-hal-development/scenarios/scenarios-framebuffer-strategies"}},h=[{value:"Transferring the framebuffer",id:"transferring-the-framebuffer",children:[]},{value:"Returning from HAL::flushFrameBuffer()",id:"returning-from-halflushframebuffer",children:[]},{value:"TouchGFX Driver / Tearing Effect Signal",id:"touchgfx-driver--tearing-effect-signal",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],u={rightToc:h},d="wrapper";function f(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)(d,Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The following scenario shows, generally, the steps involved in writing a TouchGFX driver when selecting ",Object(i.b)("em",{parentName:"p"},"Custom")," display interface in the TouchGFX generator using an LCD connected to either an FMC or through SPI."),Object(i.b)(s.a,{mdxType:"FurtherReading"},"the STM32L496-DISCO Application template available from the designer uses FMC and can be inspected for inspiration on how to implement a TouchGFX display driver."),Object(i.b)("p",null,"The process of writing a TouchGFX display driver for MCUs without embedded display controllers over FMC or SPI\xbd is identical. The scenario described in this section uses an ST7789H2 LCD Controller to exemplify."),Object(i.b)("p",null,"Once FMC or SPI is configured according to board specifications in CubeMX the TouchGFX Generator can be used to generate a HAL, selecting the ",Object(i.b)("em",{parentName:"p"},"Custom")," display interface, which allows developers to write custom code to transfer the updated parts of the application framebuffer to a connected display."),Object(i.b)("p",null,"The figure below shows a TouchGFX Generator configuration with ",Object(i.b)("em",{parentName:"p"},"Custom")," Display Interface selected. This instructs the TouchGFX Generator that the developer would like to configure and transfer pixels from the framebuffer memory to the display manually and generates the handles to accomplish this."),Object(i.b)(c.a,{mdxType:"Note"},"The driver code shown in this section for the ST7789H2 would have been developed during the Board Bringup phase and, once working, can more or less be copied to the HAL class generated by the TouchGFX Generator.",Object(i.b)("p",null,"The driver must be able to transfer pixels to the display, and to control the memory writing position of the display. Check its datasheet to find appropriate commands, outlined below, and further details.")),Object(i.b)(o.a,{imageSource:"/img/development/touchgfx-hal-development/scenarios/custom-interface.png",caption:"TouchGFX Generator Configuration",noShadow:!1,mdxType:"Figure"}),Object(i.b)("p",null,"Generally, for displays with embedded GRAM such as 8080 or SPI displays, the driver works as follows:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},'Based on the area of the framebuffer to be redrawn, move the "display cursor" and "active window" to a place in GRAM that matches this area.'),Object(i.b)("li",{parentName:"ol"},"Prepare to write incoming pixel data to GRAM."),Object(i.b)("li",{parentName:"ol"},"Send pixel data.")),Object(i.b)("h2",{id:"transferring-the-framebuffer"},"Transferring the framebuffer"),Object(i.b)("p",null,"When an area of the framebuffer has been updated, the TouchGFX Engine calls ",Object(i.b)("inlineCode",{parentName:"p"},"HAL::flushFrameBuffer(Rect r)"),'. This function can be overridden when developers must implement a driver for a "Custom" display interface.'),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"void  TouchGFXHAL::flushFrameBuffer(const Rect& rect)\n{\n    /* Set Cursor */\n    __ST7789H2_SetDisplayWindow(rect.x, rect.y, rect.width, rect.height);\n\n    /* Prepare to write to LCD RAM */\n    ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);\n\n    /* Send Pixels */\n    this->copyFrameBufferBlockToLCD(rect);\n}\n")),Object(i.b)("p",null,"The following function ",Object(i.b)("inlineCode",{parentName:"p"},"__ST7789H2_SetDisplayWindow")," sets the ",Object(i.b)("inlineCode",{parentName:"p"},"x")," and ",Object(i.b)("inlineCode",{parentName:"p"},"y"),' coordinates for the virtual "cursor" in GRAM by writing to specific registers, which is usual for displays using GRAM.'),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),'extern "C"\nvoid __ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)\n{\n    uint8_t   parameter[4];\n\n    /* CASET: Column Addrses Set */\n    parameter[0] = 0x00;\n    parameter[1] = Xpos;\n    parameter[2] = 0x00;\n    parameter[3] = Xpos + Width - 1;\n    ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);\n\n    /* RASET: Row Addrses Set */\n    parameter[0] = 0x00;\n    parameter[1] = Ypos;\n    parameter[2] = 0x00;\n    parameter[3] = Ypos + Height - 1;\n    ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);\n}\n')),Object(i.b)("p",null,"The following function ",Object(i.b)("inlineCode",{parentName:"p"},"TouchGFXHAL::copyFrameBufferBlockToLCD")," is a private function that sends one line of the updated area (",Object(i.b)("inlineCode",{parentName:"p"},"Rect"),") at a time, ensuring to progress the framebuffer pointer accordingly."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect rect)\n{\n    __IO uint16_t* ptr;\n    uint32_t height;\n\n    // This can be accelerated using regular DMA hardware\n    for (height = 0; height < rect.height ; height++)\n    {\n        ptr = getClientFrameBuffer() + rect.x + (height + rect.y)  * BSP_LCD_GetXSize();\n        LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);\n    }\n}\n")),Object(i.b)("p",null,"Instead of advancing ",Object(i.b)("inlineCode",{parentName:"p"},"ptr")," manually, the TouchGFX Generator will generate a function ",Object(i.b)("inlineCode",{parentName:"p"},"advanceFrameBufferToRect")," that advances ",Object(i.b)("inlineCode",{parentName:"p"},"ptr")," according to the position of ",Object(i.b)("inlineCode",{parentName:"p"},"Rect")," in the framebuffer."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"inline uint8_t* TouchGFXGeneratedHAL::advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect) const\n{\n    //       Advance vertically                   Advance horizontally\n    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;\n    return fbPtr;\n}\n")),Object(i.b)("h2",{id:"returning-from-halflushframebuffer"},"Returning from HAL::flushFrameBuffer()"),Object(i.b)("p",null,"Once the function returns TouchGFX Engine continues to draw the rest of the frame. If developers wish to use DMA to transfer pixels to the display, they must ensure that ",Object(i.b)("inlineCode",{parentName:"p"},"HAL::flushFrameBuffer(Rect& rect)")," does not return immediatly by e.g. waiting on a semaphore signaled by a ",Object(i.b)("em",{parentName:"p"},"DMA Completed")," interrupt."),Object(i.b)("p",null,"The following pseudo-code example shows an example of how ",Object(i.b)("inlineCode",{parentName:"p"},"HAL::flushFrameBuffer()")," could be structured in case DMA is used. The code uses a FreeRTOS semaphore ",Object(i.b)("inlineCode",{parentName:"p"},"screen_frame_buffer_sem"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)\n{\n    uint16_t* fb = HAL::lockFrameBuffer();\n\n    //Prepare display\n    prepare();\n\n    //Try to take a display semaphore - Always free at this point\n    xSemaphoreTake(screen_frame_buffer_sem, portMAX_DELAY);\n\n    //Set up DMA\n    screenDMAEnable();\n\n    // Wait for the DMA transfer to complete\n    xSemaphoreTake(screen_frame_buffer_sem, portMAX_DELAY);\n\n    //Unlock framebuffer and give semaphore back\n    HAL::unlockFrameBuffer();\n    xSemaphoreGive(screen_frame_buffer_sem);\n}\n")),Object(i.b)("h2",{id:"touchgfx-driver--tearing-effect-signal"},"TouchGFX Driver / Tearing Effect Signal"),Object(i.b)("p",null,'As can be seen in TouchGFX Generator configuration above, the "Application Tick Source" is also set to "Custom", which is general for MCUs without embedded TFT Controllers.'),Object(i.b)("p",null,"As described in the Abstraction Layer Architecture section, the TouchGFX Engine main loop is unblocked by calling ",Object(i.b)("inlineCode",{parentName:"p"},"OSWrappers::signalVSync()"),", usually at the time when a display signals."),Object(i.b)("p",null,'For displays with a serial or 8080 display interface, the embedded display controller typically raises a periodic Tearing Effect (TE) signal that can be connected to a GPIO on the MCU. In this case, the MCU is usually configured to raise an interrupt when the GPIO is signalled. This "Tearing Effect" interrupt will then unblock the TouchGFX Engine Main loop to render the next frame. Remember to configure the GPIO to input and enable the external interrupt for the pin in CubeMX.'),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),'extern "C"\nvoid TE_Handler(void)\n{\n    ...\n    /* Unblock TouchGFX Engine Main Loop to render next frame */\n    OSWrappers::signalVSync();\n    ...\n}\n\n')),Object(i.b)("h2",{id:"conclusion"},"Conclusion"),Object(i.b)("p",null,"Selecting ",Object(i.b)("em",{parentName:"p"},"Custom")," Display Interface through the TouchGFX Generator is an expression of a developers intent to write code to transfer pixels from an application frame buffer to a display, manually."),Object(i.b)("p",null,"The TouchGFX Generator will generate a function ",Object(i.b)("inlineCode",{parentName:"p"},"TouchGFXHAL::flushFrameBuffer(Rect& rect)")," that is called automatically by TouchGFX after rendering an area of the framebuffer that developers can use to transfer affected pixels to a display, SPI, FMC or otherwise."),Object(i.b)("p",null,"Selecting a ",Object(i.b)("em",{parentName:"p"},"custom")," display interface also requires developers to implement a custom TouchGFX Application Tick driver that signals ",Object(i.b)("inlineCode",{parentName:"p"},"OSWrappers::signalVSync()")," to unblock the TouchGFX Engine Main loop. Usually, displays used along with MCUS that have no TFT Controllers can provide a ",Object(i.b)("em",{parentName:"p"},"Tearing Effect")," signal that is connected to the MCU."))}f.isMDXComponent=!0}}]);